
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 10 02:28:45 CST 2018
//----------------------------------------------------

package Analizadores;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 10 02:28:45 CST 2018
  */
public class AS_HTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_HTML() {super();}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\004\005\000\002\004\006\000\002\004\004" +
    "\000\002\006\004\000\002\006\010\000\002\006\012\000" +
    "\002\013\005\000\002\013\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\010\000\002\017" +
    "\010\000\002\022\007\000\002\014\010\000\002\014\012" +
    "\000\002\012\024\000\002\010\011\000\002\010\010\000" +
    "\002\020\005\000\002\020\004\000\002\021\006\000\002" +
    "\021\010\000\002\021\010\000\002\021\010\000\002\021" +
    "\010\000\002\021\010\000\002\021\010\000\002\021\010" +
    "\000\002\021\010\000\002\021\010\000\002\021\003\000" +
    "\002\023\006\000\002\023\005\000\002\025\002\000\002" +
    "\025\003\000\002\026\005\000\002\026\004\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\027\005\000\002\030\007\000\002" +
    "\031\005\000\002\032\005\000\002\033\005\000\002\034" +
    "\005\000\002\035\005\000\002\036\005\000\002\037\003" +
    "\000\002\037\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\075\006\001\002\000\004\002\273\001" +
    "\002\000\004\002\000\001\002\000\004\027\007\001\002" +
    "\000\004\074\010\001\002\000\004\075\011\001\002\000" +
    "\010\030\013\031\014\052\012\001\002\000\004\074\272" +
    "\001\002\000\004\074\214\001\002\000\024\074\uffdc\103" +
    "\025\104\023\105\037\106\024\107\027\110\031\111\030" +
    "\112\032\001\002\000\004\002\uffff\001\002\000\024\074" +
    "\uffdb\103\025\104\023\105\037\106\024\107\027\110\031" +
    "\111\030\112\032\001\002\000\004\020\uffd3\001\002\000" +
    "\004\020\211\001\002\000\004\020\uffd4\001\002\000\004" +
    "\020\uffd2\001\002\000\004\021\205\001\002\000\004\021" +
    "\203\001\002\000\004\021\201\001\002\000\004\020\uffd6" +
    "\001\002\000\004\021\177\001\002\000\004\021\175\001" +
    "\002\000\004\021\173\001\002\000\004\021\166\001\002" +
    "\000\004\020\uffd1\001\002\000\004\020\uffd5\001\002\000" +
    "\004\020\uffd7\001\002\000\004\020\uffd8\001\002\000\004" +
    "\021\164\001\002\000\004\074\041\001\002\000\004\075" +
    "\043\001\002\000\004\002\ufffd\001\002\000\032\033\051" +
    "\034\060\035\055\036\056\037\046\040\053\044\052\045" +
    "\062\046\061\050\047\051\054\054\157\001\002\000\004" +
    "\075\045\001\002\000\032\033\051\034\060\035\055\036" +
    "\056\037\046\040\053\044\052\045\062\046\061\050\047" +
    "\051\054\054\057\001\002\000\024\074\uffdc\103\025\104" +
    "\023\105\037\106\024\107\027\110\031\111\030\112\032" +
    "\001\002\000\024\074\uffdc\103\025\104\023\105\037\106" +
    "\024\107\027\110\031\111\030\112\032\001\002\000\004" +
    "\075\uffeb\001\002\000\024\074\uffdc\103\025\104\023\105" +
    "\037\106\024\107\027\110\031\111\030\112\032\001\002" +
    "\000\024\074\uffdc\103\025\104\023\105\037\106\024\107" +
    "\027\110\031\111\030\112\032\001\002\000\024\074\uffdc" +
    "\103\025\104\023\105\037\106\024\107\027\110\031\111" +
    "\030\112\032\001\002\000\004\075\uffdf\001\002\000\024" +
    "\074\uffdc\103\025\104\023\105\037\106\024\107\027\110" +
    "\031\111\030\112\032\001\002\000\024\074\uffdc\103\025" +
    "\104\023\105\037\106\024\107\027\110\031\111\030\112" +
    "\032\001\002\000\004\074\102\001\002\000\024\074\uffdc" +
    "\103\025\104\023\105\037\106\024\107\027\110\031\111" +
    "\030\112\032\001\002\000\024\074\uffdc\103\025\104\023" +
    "\105\037\106\024\107\027\110\031\111\030\112\032\001" +
    "\002\000\024\074\uffdc\103\025\104\023\105\037\106\024" +
    "\107\027\110\031\111\030\112\032\001\002\000\004\074" +
    "\064\001\002\000\004\075\065\001\002\000\004\070\066" +
    "\001\002\000\004\074\067\001\002\000\004\075\uffe2\001" +
    "\002\000\004\074\071\001\002\000\004\075\072\001\002" +
    "\000\004\071\073\001\002\000\004\074\074\001\002\000" +
    "\004\075\uffe1\001\002\000\004\074\076\001\002\000\004" +
    "\075\077\001\002\000\004\057\100\001\002\000\004\074" +
    "\101\001\002\000\004\075\uffe8\001\002\000\004\075\103" +
    "\001\002\000\004\052\104\001\002\000\004\074\105\001" +
    "\002\000\004\002\uffed\001\002\000\004\074\107\001\002" +
    "\000\004\075\110\001\002\000\004\061\111\001\002\000" +
    "\004\074\112\001\002\000\004\075\uffe6\001\002\000\004" +
    "\074\114\001\002\000\004\075\115\001\002\000\004\060" +
    "\116\001\002\000\004\074\117\001\002\000\004\075\uffe7" +
    "\001\002\000\004\074\121\001\002\000\004\075\122\001" +
    "\002\000\004\063\123\001\002\000\004\074\124\001\002" +
    "\000\004\075\uffe4\001\002\000\004\074\126\001\002\000" +
    "\004\075\127\001\002\000\004\067\130\001\002\000\004" +
    "\074\131\001\002\000\004\075\uffe3\001\002\000\004\074" +
    "\133\001\002\000\004\075\134\001\002\000\032\033\051" +
    "\034\060\035\055\036\056\037\046\040\053\044\052\045" +
    "\062\046\061\050\047\051\054\056\142\001\002\000\004" +
    "\075\137\001\002\000\004\075\uffe9\001\002\000\032\033" +
    "\051\034\060\035\055\036\056\037\046\040\053\044\052" +
    "\045\062\046\061\050\047\051\054\056\140\001\002\000" +
    "\004\074\141\001\002\000\004\075\uffde\001\002\000\004" +
    "\074\144\001\002\000\004\075\uffea\001\002\000\004\075" +
    "\uffdd\001\002\000\004\074\146\001\002\000\004\075\147" +
    "\001\002\000\004\073\150\001\002\000\004\074\151\001" +
    "\002\000\004\075\uffe0\001\002\000\004\074\153\001\002" +
    "\000\004\075\154\001\002\000\004\062\155\001\002\000" +
    "\004\074\156\001\002\000\004\075\uffe5\001\002\000\004" +
    "\074\160\001\002\000\004\075\161\001\002\000\004\052" +
    "\162\001\002\000\004\074\163\001\002\000\004\002\uffec" +
    "\001\002\000\004\114\165\001\002\000\004\020\uffce\001" +
    "\002\000\010\115\172\116\171\117\170\001\002\000\004" +
    "\020\uffc9\001\002\000\004\020\uffc6\001\002\000\004\020" +
    "\uffc7\001\002\000\004\020\uffc8\001\002\000\004\010\174" +
    "\001\002\000\004\020\uffcb\001\002\000\004\010\176\001" +
    "\002\000\004\020\uffca\001\002\000\004\012\200\001\002" +
    "\000\004\020\uffcc\001\002\000\004\114\202\001\002\000" +
    "\004\020\uffd0\001\002\000\004\012\204\001\002\000\004" +
    "\020\uffcd\001\002\000\004\012\206\001\002\000\004\023" +
    "\207\001\002\000\004\024\210\001\002\000\004\020\uffcf" +
    "\001\002\000\024\074\uffd9\103\uffd9\104\uffd9\105\uffd9\106" +
    "\uffd9\107\uffd9\110\uffd9\111\uffd9\112\uffd9\001\002\000\004" +
    "\020\213\001\002\000\024\074\uffda\103\uffda\104\uffda\105" +
    "\uffda\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda\001\002" +
    "\000\004\075\216\001\002\000\004\002\ufffe\001\002\000" +
    "\012\032\227\053\260\076\225\100\222\001\002\000\004" +
    "\075\220\001\002\000\012\032\227\053\224\076\225\100" +
    "\222\001\002\000\004\002\ufffb\001\002\000\024\074\uffdc" +
    "\103\025\104\023\105\037\106\024\107\027\110\031\111" +
    "\030\112\032\001\002\000\004\075\ufff5\001\002\000\004" +
    "\074\243\001\002\000\024\074\uffdc\103\025\104\023\105" +
    "\037\106\024\107\027\110\031\111\030\112\032\001\002" +
    "\000\004\075\ufff4\001\002\000\004\074\232\001\002\000" +
    "\004\075\ufff8\001\002\000\004\075\ufff6\001\002\000\004" +
    "\075\233\001\002\000\004\055\234\001\002\000\004\074" +
    "\235\001\002\000\004\075\ufff1\001\002\000\004\074\237" +
    "\001\002\000\004\075\240\001\002\000\004\077\241\001" +
    "\002\000\004\074\242\001\002\000\004\075\ufff3\001\002" +
    "\000\004\075\244\001\002\000\006\031\246\052\245\001" +
    "\002\000\004\074\252\001\002\000\024\074\uffdc\103\025" +
    "\104\023\105\037\106\024\107\027\110\031\111\030\112" +
    "\032\001\002\000\004\074\250\001\002\000\004\075\043" +
    "\001\002\000\004\002\uffef\001\002\000\004\002\ufff0\001" +
    "\002\000\004\074\254\001\002\000\004\075\255\001\002" +
    "\000\004\101\256\001\002\000\004\074\257\001\002\000" +
    "\004\075\ufff2\001\002\000\004\074\262\001\002\000\004" +
    "\075\ufff7\001\002\000\004\075\263\001\002\000\006\031" +
    "\265\052\264\001\002\000\004\074\271\001\002\000\024" +
    "\074\uffdc\103\025\104\023\105\037\106\024\107\027\110" +
    "\031\111\030\112\032\001\002\000\004\074\267\001\002" +
    "\000\004\075\043\001\002\000\004\002\ufff9\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\024\017\025\037\026\015" +
    "\027\035\030\034\031\025\032\033\033\020\034\016\035" +
    "\021\036\032\001\001\000\002\001\001\000\024\024\211" +
    "\027\035\030\034\031\025\032\033\033\020\034\016\035" +
    "\021\036\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\041\020\043\001\001\000\002\001\001\000\004" +
    "\021\142\001\001\000\002\001\001\000\004\021\047\001" +
    "\001\000\030\024\017\025\151\026\015\027\035\030\034" +
    "\031\025\032\033\033\020\034\016\035\021\036\032\001" +
    "\001\000\030\024\017\025\144\026\015\027\035\030\034" +
    "\031\025\032\033\033\020\034\016\035\021\036\032\001" +
    "\001\000\002\001\001\000\030\024\017\025\131\026\015" +
    "\027\035\030\034\031\025\032\033\033\020\034\016\035" +
    "\021\036\032\001\001\000\030\024\017\025\124\026\015" +
    "\027\035\030\034\031\025\032\033\033\020\034\016\035" +
    "\021\036\032\001\001\000\030\024\017\025\117\026\015" +
    "\027\035\030\034\031\025\032\033\033\020\034\016\035" +
    "\021\036\032\001\001\000\002\001\001\000\030\024\017" +
    "\025\112\026\015\027\035\030\034\031\025\032\033\033" +
    "\020\034\016\035\021\036\032\001\001\000\030\024\017" +
    "\025\105\026\015\027\035\030\034\031\025\032\033\033" +
    "\020\034\016\035\021\036\032\001\001\000\002\001\001" +
    "\000\030\024\017\025\074\026\015\027\035\030\034\031" +
    "\025\032\033\033\020\034\016\035\021\036\032\001\001" +
    "\000\030\024\017\025\067\026\015\027\035\030\034\031" +
    "\025\032\033\033\020\034\016\035\021\036\032\001\001" +
    "\000\030\024\017\025\062\026\015\027\035\030\034\031" +
    "\025\032\033\033\020\034\016\035\021\036\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\134\023\135\001\001\000" +
    "\004\021\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\214\013\216\001\001\000\002\001" +
    "\001\000\012\015\260\016\230\017\222\022\225\001\001" +
    "\000\004\014\220\001\001\000\012\015\227\016\230\017" +
    "\222\022\225\001\001\000\002\001\001\000\030\024\017" +
    "\025\252\026\015\027\035\030\034\031\025\032\033\033" +
    "\020\034\016\035\021\036\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\024\017\025\235\026\015\027" +
    "\035\030\034\031\025\032\033\033\020\034\016\035\021" +
    "\036\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\024\017\025\246\026\015\027\035" +
    "\030\034\031\025\032\033\033\020\034\016\035\021\036" +
    "\032\001\001\000\002\001\001\000\006\010\250\020\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\024\017\025\265\026\015\027\035\030\034\031\025\032" +
    "\033\033\020\034\016\035\021\036\032\001\001\000\002" +
    "\001\001\000\006\010\267\020\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_HTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_HTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_HTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_HTML$actions {


    //se declaran variables globales etc.
    //GestorC3D gs = new GestorC3D();

  private final AS_HTML parser;

  /** Constructor */
  CUP$AS_HTML$actions(AS_HTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_HTML$do_action(
    int                        CUP$AS_HTML$act_num,
    java_cup.runtime.lr_parser CUP$AS_HTML$parser,
    java.util.Stack            CUP$AS_HTML$stack,
    int                        CUP$AS_HTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_HTML$result;

      /* select the action based on the action number */
      switch (CUP$AS_HTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valor_alineado ::= CENT 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("valor_alineado",29, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor_alineado ::= DER 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("valor_alineado",29, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor_alineado ::= IZQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("valor_alineado",29, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // att_alineado ::= ALINEADO IGUAL valor_alineado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alineado",28, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // att_ancho ::= ANCHO IGUAL NUM 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ancho",27, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // att_alto ::= ALTO IGUAL NUM 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alto",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // att_grupo ::= GRUPO IGUAL I_D 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_grupo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // att_id ::= ID IGUAL I_D 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_id",24, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // att_valor ::= VALOR IGUAL STRING_LITERAL 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_valor",23, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // att_click ::= CLICK IGUAL I_D APAR CPAR 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_click",22, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // att_ruta ::= RUTA IGUAL STRING_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 System.out.println(a.getCadena()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ruta",21, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atributo ::= att_alineado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atributo ::= att_ancho 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atributo ::= att_alto 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atributo ::= att_grupo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributo ::= att_id 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atributo ::= att_valor 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atributo ::= att_click 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atributo ::= att_ruta 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list_atts2 ::= atributo PYC 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",20, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list_atts2 ::= list_atts2 atributo PYC 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",20, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // list_atts ::= list_atts2 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",19, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // list_atts ::= 
            {
              Nodo RESULT =null;
		 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",19, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contenidopanel ::= MENQ FPANEL MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidopanel",17, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // contenidopanel ::= etiquetas_cuerpo MENQ FPANEL MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidopanel",17, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // et_cuerpo ::= ISALTOF 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // et_cuerpo ::= ISPINNER list_atts MAYQ MENQ FSPINNER MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // et_cuerpo ::= ICAJA list_atts MAYQ MENQ FCAJA MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // et_cuerpo ::= ICAJA_TEXTO list_atts MAYQ MENQ FCAJA_TEXTO MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // et_cuerpo ::= ITEXTO_A list_atts MAYQ MENQ FTEXTO_A MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // et_cuerpo ::= ITABLA list_atts MAYQ MENQ FTABLA MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // et_cuerpo ::= IENLACE list_atts MAYQ MENQ FENLACE MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // et_cuerpo ::= IBOTON list_atts MAYQ MENQ FBOTON MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // et_cuerpo ::= IIMAGEN list_atts MAYQ MENQ FIMAGEN MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // et_cuerpo ::= ITEXTO list_atts MAYQ MENQ FTEXTO MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // et_cuerpo ::= IPANEL list_atts MAYQ contenidopanel 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiquetas_cuerpo ::= MENQ et_cuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",14, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etiquetas_cuerpo ::= etiquetas_cuerpo MENQ et_cuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",14, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contenidocuerpo ::= MENQ FCUERPO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contenidocuerpo ::= etiquetas_cuerpo MENQ FCUERPO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contenidocss ::= FCSS MAYQ MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ FCSS MAYQ MENQ FENCABEZADO MAYQ MENQ ICUERPO list_atts MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocss",8, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-17)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fin_encabezado ::= MENQ FENCABEZADO MAYQ MENQ ICUERPO list_atts MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("fin_encabezado",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-7)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fin_encabezado ::= MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("fin_encabezado",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiquetatitulo ::= ITITULO MAYQ MENQ FTITULO MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetatitulo",16, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiquetacjs ::= ICSS list_atts MAYQ MENQ FCSS MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetacjs",13, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiquetacss ::= ICJS list_atts MAYQ MENQ FCJS MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetacss",12, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // et_encabezado ::= etiquetatitulo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // et_encabezado ::= etiquetacjs 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // et_encabezado ::= etiquetacss 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiquetas_encabezado ::= MENQ et_encabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_encabezado",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiquetas_encabezado ::= etiquetas_encabezado MENQ et_encabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_encabezado",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenidoencabezado ::= MENQ FENCABEZADO MAYQ MENQ ICUERPO list_atts MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-7)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenidoencabezado ::= MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenidoencabezado ::= etiquetas_encabezado fin_encabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenidohtml ::= FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contenidohtml ::= ICUERPO list_atts MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // contenidohtml ::= IENCABEZADO MAYQ contenidoencabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // raiz ::= MENQ IHTML MAYQ MENQ contenidohtml 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= raiz 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		RESULT = start_val;
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_HTML$parser.done_parsing();
          return CUP$AS_HTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

