
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 21 15:14:12 CST 2018
//----------------------------------------------------

package Analizadores;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 21 15:14:12 CST 2018
  */
public class AS_HTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_HTML() {super();}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\052" +
    "\002\000\002\003\010\000\002\053\002\000\002\004\006" +
    "\000\002\054\002\000\002\004\007\000\002\004\004\000" +
    "\002\006\004\000\002\006\010\000\002\055\002\000\002" +
    "\006\013\000\002\013\005\000\002\013\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\010" +
    "\000\002\017\010\000\002\022\007\000\002\014\010\000" +
    "\002\056\002\000\002\014\013\000\002\057\002\000\002" +
    "\012\025\000\002\010\011\000\002\010\010\000\002\020" +
    "\005\000\002\020\004\000\002\060\002\000\002\021\007" +
    "\000\002\061\002\000\002\021\011\000\002\062\002\000" +
    "\002\021\011\000\002\063\002\000\002\021\011\000\002" +
    "\064\002\000\002\021\011\000\002\021\006\000\002\065" +
    "\002\000\002\021\011\000\002\066\002\000\002\021\011" +
    "\000\002\067\002\000\002\021\011\000\002\070\002\000" +
    "\002\021\011\000\002\021\004\000\002\040\006\000\002" +
    "\040\005\000\002\041\005\000\002\041\004\000\002\047" +
    "\006\000\002\042\006\000\002\042\005\000\002\043\005" +
    "\000\002\043\004\000\002\044\006\000\002\044\006\000" +
    "\002\046\006\000\002\046\005\000\002\045\006\000\002" +
    "\045\005\000\002\023\006\000\002\023\005\000\002\025" +
    "\002\000\002\025\003\000\002\026\005\000\002\026\004" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\027\005\000\002\030" +
    "\007\000\002\031\005\000\002\032\005\000\002\033\005" +
    "\000\002\034\005\000\002\035\005\000\002\036\005\000" +
    "\002\051\004\000\002\051\003\000\002\050\003\000\002" +
    "\050\010\000\002\050\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\075\006\001\002\000\004\002\u0100\001" +
    "\002\000\004\002\000\001\002\000\004\027\007\001\002" +
    "\000\004\074\010\001\002\000\004\075\011\001\002\000" +
    "\010\030\uffff\031\uffff\052\uffff\001\002\000\010\030\014" +
    "\031\015\052\013\001\002\000\004\074\377\001\002\000" +
    "\004\074\316\001\002\000\024\074\uffbe\103\026\104\024" +
    "\105\040\106\025\107\030\110\032\111\031\112\033\001" +
    "\002\000\004\002\ufffe\001\002\000\024\074\uffbd\103\026" +
    "\104\024\105\040\106\025\107\030\110\032\111\031\112" +
    "\033\001\002\000\004\020\uffb5\001\002\000\004\020\313" +
    "\001\002\000\004\020\uffb6\001\002\000\004\020\uffb4\001" +
    "\002\000\004\021\307\001\002\000\004\021\305\001\002" +
    "\000\004\021\303\001\002\000\004\020\uffb8\001\002\000" +
    "\004\021\301\001\002\000\004\021\277\001\002\000\004" +
    "\021\275\001\002\000\004\021\273\001\002\000\004\020" +
    "\uffb3\001\002\000\004\020\uffb7\001\002\000\004\020\uffb9" +
    "\001\002\000\004\020\uffba\001\002\000\004\021\271\001" +
    "\002\000\004\074\042\001\002\000\004\075\ufffb\001\002" +
    "\000\004\075\045\001\002\000\004\002\ufffa\001\002\000" +
    "\032\033\053\034\062\035\057\036\060\037\050\040\055" +
    "\044\054\045\064\046\063\050\051\051\056\054\264\001" +
    "\002\000\004\075\047\001\002\000\032\033\053\034\062" +
    "\035\057\036\060\037\050\040\055\044\054\045\064\046" +
    "\063\050\051\051\056\054\061\001\002\000\024\074\uffbe" +
    "\103\026\104\024\105\040\106\025\107\030\110\032\111" +
    "\031\112\033\001\002\000\024\074\uffbe\103\026\104\024" +
    "\105\040\106\025\107\030\110\032\111\031\112\033\001" +
    "\002\000\004\075\uffe5\001\002\000\024\074\uffbe\103\026" +
    "\104\024\105\040\106\025\107\030\110\032\111\031\112" +
    "\033\001\002\000\024\074\uffbe\103\026\104\024\105\040" +
    "\106\025\107\030\110\032\111\031\112\033\001\002\000" +
    "\024\074\uffbe\103\026\104\024\105\040\106\025\107\030" +
    "\110\032\111\031\112\033\001\002\000\004\074\127\001" +
    "\002\000\024\074\uffbe\103\026\104\024\105\040\106\025" +
    "\107\030\110\032\111\031\112\033\001\002\000\024\074" +
    "\uffbe\103\026\104\024\105\040\106\025\107\030\110\032" +
    "\111\031\112\033\001\002\000\004\074\107\001\002\000" +
    "\024\074\uffbe\103\026\104\024\105\040\106\025\107\030" +
    "\110\032\111\031\112\033\001\002\000\024\074\uffbe\103" +
    "\026\104\024\105\040\106\025\107\030\110\032\111\031" +
    "\112\033\001\002\000\024\074\uffbe\103\026\104\024\105" +
    "\040\106\025\107\030\110\032\111\031\112\033\001\002" +
    "\000\004\074\066\001\002\000\004\075\uffd6\001\002\000" +
    "\004\075\070\001\002\000\004\070\071\001\002\000\004" +
    "\074\072\001\002\000\004\075\uffd5\001\002\000\004\074" +
    "\074\001\002\000\004\075\uffd4\001\002\000\004\075\076" +
    "\001\002\000\004\071\077\001\002\000\004\074\100\001" +
    "\002\000\004\075\uffd3\001\002\000\004\074\102\001\002" +
    "\000\004\075\uffe1\001\002\000\004\075\104\001\002\000" +
    "\004\057\105\001\002\000\004\074\106\001\002\000\004" +
    "\075\uffe0\001\002\000\004\075\110\001\002\000\004\052" +
    "\111\001\002\000\004\074\112\001\002\000\004\002\uffe7" +
    "\001\002\000\004\074\114\001\002\000\004\075\uffdd\001" +
    "\002\000\004\075\116\001\002\000\004\061\117\001\002" +
    "\000\004\074\120\001\002\000\004\075\uffdc\001\002\000" +
    "\004\074\122\001\002\000\004\075\uffdf\001\002\000\004" +
    "\075\124\001\002\000\004\060\125\001\002\000\004\074" +
    "\126\001\002\000\004\075\uffde\001\002\000\004\075\uffd0" +
    "\001\002\000\004\074\131\001\002\000\004\075\133\001" +
    "\002\000\004\075\222\001\002\000\006\041\137\063\136" +
    "\001\002\000\004\075\uffd9\001\002\000\004\075\uffcc\001" +
    "\002\000\004\074\221\001\002\000\024\074\uffbe\103\026" +
    "\104\024\105\040\106\025\107\030\110\032\111\031\112" +
    "\033\001\002\000\004\074\141\001\002\000\004\075\144" +
    "\001\002\000\004\075\215\001\002\000\004\075\uffcb\001" +
    "\002\000\010\042\146\043\150\064\147\001\002\000\004" +
    "\075\uffc7\001\002\000\024\074\uffbe\103\026\104\024\105" +
    "\040\106\025\107\030\110\032\111\031\112\033\001\002" +
    "\000\004\074\202\001\002\000\024\074\uffbe\103\026\104" +
    "\024\105\040\106\025\107\030\110\032\111\031\112\033" +
    "\001\002\000\004\074\152\001\002\000\012\012\155\035" +
    "\153\036\160\075\157\001\002\000\024\074\uffbe\103\026" +
    "\104\024\105\040\106\025\107\030\110\032\111\031\112" +
    "\033\001\002\000\004\075\uffc5\001\002\000\012\012\uffa8" +
    "\035\uffa8\036\uffa8\075\uffa8\001\002\000\012\012\uffa9\035" +
    "\uffa9\036\uffa9\075\uffa9\001\002\000\004\066\173\001\002" +
    "\000\024\074\uffbe\103\026\104\024\105\040\106\025\107" +
    "\030\110\032\111\031\112\033\001\002\000\012\012\155" +
    "\035\153\036\160\075\163\001\002\000\012\012\uffaa\035" +
    "\uffaa\036\uffaa\075\uffaa\001\002\000\004\066\164\001\002" +
    "\000\004\074\165\001\002\000\004\075\uffc2\001\002\000" +
    "\004\074\167\001\002\000\004\075\170\001\002\000\004" +
    "\061\171\001\002\000\004\074\172\001\002\000\012\012" +
    "\uffa7\035\uffa7\036\uffa7\075\uffa7\001\002\000\004\074\174" +
    "\001\002\000\004\075\uffc1\001\002\000\004\074\176\001" +
    "\002\000\004\075\177\001\002\000\004\060\200\001\002" +
    "\000\004\074\201\001\002\000\012\012\uffa6\035\uffa6\036" +
    "\uffa6\075\uffa6\001\002\000\004\075\uffc9\001\002\000\004" +
    "\074\204\001\002\000\012\012\155\035\153\036\160\075" +
    "\206\001\002\000\004\075\uffc6\001\002\000\004\065\213" +
    "\001\002\000\012\012\155\035\153\036\160\075\210\001" +
    "\002\000\004\065\211\001\002\000\004\074\212\001\002" +
    "\000\004\075\uffc4\001\002\000\004\074\214\001\002\000" +
    "\004\075\uffc3\001\002\000\010\042\146\043\150\064\217" +
    "\001\002\000\004\075\uffc8\001\002\000\004\074\220\001" +
    "\002\000\004\075\uffca\001\002\000\004\075\uffce\001\002" +
    "\000\006\041\137\063\224\001\002\000\004\075\uffcd\001" +
    "\002\000\004\074\225\001\002\000\004\075\uffcf\001\002" +
    "\000\004\074\227\001\002\000\004\075\uffd8\001\002\000" +
    "\004\075\231\001\002\000\004\067\232\001\002\000\004" +
    "\074\233\001\002\000\004\075\uffd7\001\002\000\004\074" +
    "\235\001\002\000\004\075\uffe3\001\002\000\004\075\237" +
    "\001\002\000\032\033\053\034\062\035\057\036\060\037" +
    "\050\040\055\044\054\045\064\046\063\050\051\051\056" +
    "\056\245\001\002\000\004\075\242\001\002\000\004\075" +
    "\uffe2\001\002\000\032\033\053\034\062\035\057\036\060" +
    "\037\050\040\055\044\054\045\064\046\063\050\051\051" +
    "\056\056\243\001\002\000\004\074\244\001\002\000\004" +
    "\075\uffc0\001\002\000\004\074\247\001\002\000\004\075" +
    "\uffe4\001\002\000\004\075\uffbf\001\002\000\004\074\251" +
    "\001\002\000\004\075\uffd2\001\002\000\004\075\253\001" +
    "\002\000\004\073\254\001\002\000\004\074\255\001\002" +
    "\000\004\075\uffd1\001\002\000\004\074\257\001\002\000" +
    "\004\075\uffdb\001\002\000\004\075\261\001\002\000\004" +
    "\062\262\001\002\000\004\074\263\001\002\000\004\075" +
    "\uffda\001\002\000\004\074\265\001\002\000\004\075\266" +
    "\001\002\000\004\052\267\001\002\000\004\074\270\001" +
    "\002\000\004\002\uffe6\001\002\000\004\114\272\001\002" +
    "\000\004\020\uffb0\001\002\000\004\114\274\001\002\000" +
    "\004\020\uffab\001\002\000\004\114\276\001\002\000\004" +
    "\020\uffad\001\002\000\004\114\300\001\002\000\004\020" +
    "\uffac\001\002\000\004\114\302\001\002\000\004\020\uffae" +
    "\001\002\000\004\114\304\001\002\000\004\020\uffb2\001" +
    "\002\000\004\114\306\001\002\000\004\020\uffaf\001\002" +
    "\000\004\114\310\001\002\000\004\023\311\001\002\000" +
    "\004\024\312\001\002\000\004\020\uffb1\001\002\000\024" +
    "\074\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110" +
    "\uffbb\111\uffbb\112\uffbb\001\002\000\004\020\315\001\002" +
    "\000\024\074\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107" +
    "\uffbc\110\uffbc\111\uffbc\112\uffbc\001\002\000\004\075\ufffd" +
    "\001\002\000\004\075\321\001\002\000\004\002\ufffc\001" +
    "\002\000\012\032\332\053\364\076\330\100\325\001\002" +
    "\000\004\075\323\001\002\000\012\032\332\053\327\076" +
    "\330\100\325\001\002\000\004\002\ufff8\001\002\000\024" +
    "\074\uffbe\103\026\104\024\105\040\106\025\107\030\110" +
    "\032\111\031\112\033\001\002\000\004\075\ufff1\001\002" +
    "\000\004\074\346\001\002\000\024\074\uffbe\103\026\104" +
    "\024\105\040\106\025\107\030\110\032\111\031\112\033" +
    "\001\002\000\004\075\ufff0\001\002\000\004\074\335\001" +
    "\002\000\004\075\ufff2\001\002\000\004\075\ufff4\001\002" +
    "\000\004\075\336\001\002\000\004\055\337\001\002\000" +
    "\004\074\340\001\002\000\004\075\uffed\001\002\000\004" +
    "\074\342\001\002\000\004\075\343\001\002\000\004\077" +
    "\344\001\002\000\004\074\345\001\002\000\004\075\uffef" +
    "\001\002\000\004\075\347\001\002\000\006\031\351\052" +
    "\350\001\002\000\004\074\356\001\002\000\024\074\uffbe" +
    "\103\026\104\024\105\040\106\025\107\030\110\032\111" +
    "\031\112\033\001\002\000\004\074\353\001\002\000\004" +
    "\075\uffeb\001\002\000\004\075\045\001\002\000\004\002" +
    "\uffea\001\002\000\004\002\uffec\001\002\000\004\074\360" +
    "\001\002\000\004\075\361\001\002\000\004\101\362\001" +
    "\002\000\004\074\363\001\002\000\004\075\uffee\001\002" +
    "\000\004\074\366\001\002\000\004\075\ufff3\001\002\000" +
    "\004\075\367\001\002\000\006\031\371\052\370\001\002" +
    "\000\004\074\376\001\002\000\024\074\ufff6\103\ufff6\104" +
    "\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6" +
    "\001\002\000\024\074\uffbe\103\026\104\024\105\040\106" +
    "\025\107\030\110\032\111\031\112\033\001\002\000\004" +
    "\074\374\001\002\000\004\075\045\001\002\000\004\002" +
    "\ufff5\001\002\000\004\002\ufff7\001\002\000\004\002\ufff9" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\011\001\001\000\004\004" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\024\020\025\040\026\016\027\036\030\035\031\026\032" +
    "\034\033\021\034\017\035\022\036\033\001\001\000\002" +
    "\001\001\000\024\024\313\027\036\030\035\031\026\032" +
    "\034\033\021\034\017\035\022\036\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\042\001\001\000\006" +
    "\010\043\020\045\001\001\000\002\001\001\000\004\021" +
    "\245\001\001\000\002\001\001\000\004\021\051\001\001" +
    "\000\030\024\020\025\255\026\016\027\036\030\035\031" +
    "\026\032\034\033\021\034\017\035\022\036\033\001\001" +
    "\000\030\024\020\025\247\026\016\027\036\030\035\031" +
    "\026\032\034\033\021\034\017\035\022\036\033\001\001" +
    "\000\002\001\001\000\030\024\020\025\233\026\016\027" +
    "\036\030\035\031\026\032\034\033\021\034\017\035\022" +
    "\036\033\001\001\000\030\024\020\025\225\026\016\027" +
    "\036\030\035\031\026\032\034\033\021\034\017\035\022" +
    "\036\033\001\001\000\030\024\020\025\127\026\016\027" +
    "\036\030\035\031\026\032\034\033\021\034\017\035\022" +
    "\036\033\001\001\000\002\001\001\000\030\024\020\025" +
    "\120\026\016\027\036\030\035\031\026\032\034\033\021" +
    "\034\017\035\022\036\033\001\001\000\030\024\020\025" +
    "\112\026\016\027\036\030\035\031\026\032\034\033\021" +
    "\034\017\035\022\036\033\001\001\000\002\001\001\000" +
    "\030\024\020\025\100\026\016\027\036\030\035\031\026" +
    "\032\034\033\021\034\017\035\022\036\033\001\001\000" +
    "\030\024\020\025\072\026\016\027\036\030\035\031\026" +
    "\032\034\033\021\034\017\035\022\036\033\001\001\000" +
    "\030\024\020\025\064\026\016\027\036\030\035\031\026" +
    "\032\034\033\021\034\017\035\022\036\033\001\001\000" +
    "\002\001\001\000\004\066\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\133\041\131\001\001\000\002\001\001\000\004\047\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\024\020\025\137\026\016\027\036\030\035" +
    "\031\026\032\034\033\021\034\017\035\022\036\033\001" +
    "\001\000\002\001\001\000\006\042\142\043\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\144\001" +
    "\001\000\002\001\001\000\030\024\020\025\202\026\016" +
    "\027\036\030\035\031\026\032\034\033\021\034\017\035" +
    "\022\036\033\001\001\000\002\001\001\000\030\024\020" +
    "\025\150\026\016\027\036\030\035\031\026\032\034\033" +
    "\021\034\017\035\022\036\033\001\001\000\002\001\001" +
    "\000\010\045\153\050\155\051\160\001\001\000\030\024" +
    "\020\025\174\026\016\027\036\030\035\031\026\032\034" +
    "\033\021\034\017\035\022\036\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\024\020\025\165\026\016\027\036\030\035\031" +
    "\026\032\034\033\021\034\017\035\022\036\033\001\001" +
    "\000\004\050\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\046\204\050\155\051\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\235\001\001\000\006\020\237\023\240\001\001\000\004" +
    "\021\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\316\001\001\000\006\006\317\013\321\001\001" +
    "\000\002\001\001\000\012\015\364\016\332\017\325\022" +
    "\330\001\001\000\004\014\323\001\001\000\012\015\333" +
    "\016\332\017\325\022\330\001\001\000\002\001\001\000" +
    "\030\024\020\025\356\026\016\027\036\030\035\031\026" +
    "\032\034\033\021\034\017\035\022\036\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\024\020\025\340" +
    "\026\016\027\036\030\035\031\026\032\034\033\021\034" +
    "\017\035\022\036\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\024\020\025\351\026" +
    "\016\027\036\030\035\031\026\032\034\033\021\034\017" +
    "\035\022\036\033\001\001\000\002\001\001\000\004\056" +
    "\353\001\001\000\006\010\354\020\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\371\001\001" +
    "\000\030\024\020\025\372\026\016\027\036\030\035\031" +
    "\026\032\034\033\021\034\017\035\022\036\033\001\001" +
    "\000\002\001\001\000\006\010\374\020\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_HTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_HTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_HTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public NodoDOM crearNodo(String nombre,String valor,int linea,int columna){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }

    //este metodo crear un nuevo nodo, lo agrega a la raiz actual y luego cambia la raizactual por el nuevo nodo creado
    public void m1(String nombre,String valor,int linea,int columna){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        action_obj.tmpN.add(nuevo);
        action_obj.tmpN=nuevo;         //despues de crear el nuevo nodo se deja en la variable tmpN
    }


    //este metodo crear un nuevo nodo y simplemente se lo agrega a la raiz actual sin cambiarla
    public void m2(String nombre,String valor,int linea,int columna,NodoDOM lst_attr){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        action_obj.tmpN.add(nuevo);
        action_obj.last=nuevo;

        if(lst_attr!=null){agregarPropiedades(lst_attr,nuevo.propiedades);}
 
        if(nombre.equals("panel")){
            if(action_obj.pilaPanel.isEmpty()){
                action_obj.gCuerpo=action_obj.tmpN;
            }
            action_obj.tmpN=nuevo;
            push(nuevo); // se agrega a la pila de paneles
        }
    }

    //este metodo hace tmpN=last
    public void Tadd(NodoDOM nodo){
        action_obj.tmpN.add(nodo);
    }

    //este metodo agrega un panel al la cima de la pila
    public void push(NodoDOM panel){
        action_obj.pilaPanel.push(panel);
    }

    public void pop(){
        action_obj.pilaPanel.pop();
        if(action_obj.pilaPanel.isEmpty()){
            action_obj.tmpN=action_obj.gCuerpo;
        }else{
            action_obj.tmpN=action_obj.pilaPanel.pop();
            action_obj.pilaPanel.push(action_obj.tmpN);
        }
    }

    //Este metodo retorna la RAIZ del arbol  generado 
    public NodoDOM getRoot(){
        return action_obj.root;
    }
    
    public ArrayList<Propiedad> agregarPropiedades(NodoDOM lista_attr,ArrayList<Propiedad> propiedades){        

        for (NodoDOM atributo: lista_attr.hijos) {
            propiedades.add(new Propiedad(atributo.nombre.toLowerCase(), atributo.valor));
        }
        return propiedades;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_HTML$actions {


    //se declaran variables globales etc.
    public int Index=1;
    public NodoDOM root;
    public NodoDOM tmpN ;
    public NodoDOM last ;
    public NodoDOM gCuerpo ;
    public Stack<NodoDOM> pilaPanel = new Stack<>() ; // se guarda el ultimo panel

  private final AS_HTML parser;

  /** Constructor */
  CUP$AS_HTML$actions(AS_HTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_HTML$do_action(
    int                        CUP$AS_HTML$act_num,
    java_cup.runtime.lr_parser CUP$AS_HTML$parser,
    java.util.Stack            CUP$AS_HTML$stack,
    int                        CUP$AS_HTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_HTML$result;

      /* select the action based on the action number */
      switch (CUP$AS_HTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cont_celda ::= IIMAGEN list_atts MAYQ MENQ FIMAGEN MAYQ 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;
		 RESULT = parser.crearNodo("imagen","",x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("cont_celda",38, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cont_celda ::= IBOTON list_atts MAYQ MENQ FBOTON MAYQ 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;
		 RESULT = parser.crearNodo("boton","",x.getLinea(),x.getColumna());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("cont_celda",38, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cont_celda ::= I_D 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("cont_celda",38, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // contenidos_celdas ::= cont_celda 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ct","",x.linea,x.columna);  RESULT.add(x);  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidos_celdas",39, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // contenidos_celdas ::= contenidos_celdas cont_celda 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM y = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 x.add(y);  RESULT = x ; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidos_celdas",39, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // att_alineado ::= ALINEADO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("alineado",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alineado",28, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // att_ancho ::= ANCHO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ancho",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ancho",27, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // att_alto ::= ALTO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("alto",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alto",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // att_grupo ::= GRUPO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("grupo",y.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_grupo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // att_id ::= ID IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("id",y.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_id",24, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // att_valor ::= VALOR IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("valor",y.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_valor",23, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // att_click ::= CLICK IGUAL STRING_LITERAL APAR CPAR 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		 RESULT = parser.crearNodo("click",y.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_click",22, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // att_ruta ::= RUTA IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ruta",y.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ruta",21, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // atributo ::= att_alineado 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // atributo ::= att_ancho 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // atributo ::= att_alto 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // atributo ::= att_grupo 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atributo ::= att_id 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atributo ::= att_valor 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atributo ::= att_click 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // atributo ::= att_ruta 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // list_atts2 ::= atributo PYC 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 
                                RESULT = parser.crearNodo("propiedades","",0,0); 
                                RESULT.add(x);
                            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",20, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // list_atts2 ::= list_atts2 atributo PYC 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM y = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                                x.add(y);
                                RESULT=x;    
                            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",20, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // list_atts ::= list_atts2 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		   RESULT = x;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",19, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // list_atts ::= 
            {
              NodoDOM RESULT =null;
		    RESULT = parser.crearNodo("propiedades","",0,0);   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",19, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contenidopanel ::= MENQ FPANEL MAYQ 
            {
              NodoDOM RESULT =null;
		 parser.pop(); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidopanel",17, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contenidopanel ::= etiquetas_cuerpo MENQ FPANEL MAYQ 
            {
              NodoDOM RESULT =null;
		 parser.pop(); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidopanel",17, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenidoct ::= MENQ FCT MAYQ 
            {
              NodoDOM RESULT =null;
		RESULT = parser.crearNodo("ct","",0,0);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoct",35, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // contenidoct ::= contenidos_celdas MENQ FCT MAYQ 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		  RESULT = x; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoct",35, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenidocb ::= MENQ FCB MAYQ 
            {
              NodoDOM RESULT =null;
		RESULT = parser.crearNodo("cb","",0,0);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocb",36, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenidocb ::= contenidos_celdas MENQ FCB MAYQ 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		  RESULT = x; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocb",36, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // et_cb_ct ::= ICT list_atts MAYQ contenidoct 
            {
              NodoDOM RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		x.linea=y.getLinea(); x.columna=y.getColumna();    RESULT = x; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cb_ct",34, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // et_cb_ct ::= ICB list_atts MAYQ contenidocb 
            {
              NodoDOM RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		x.linea=y.getLinea(); x.columna=y.getColumna();    RESULT = x; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cb_ct",34, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // etiquetasfila ::= MENQ et_cb_ct 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("fil_t","",0,0); RESULT.add(x); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetasfila",33, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // etiquetasfila ::= etiquetasfila MENQ et_cb_ct 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM y = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 x.add(y); RESULT=x; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetasfila",33, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenidofila ::= MENQ FFIL_T MAYQ 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("fil_t","",0,0); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidofila",32, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidofila ::= etiquetasfila MENQ FFIL_T MAYQ 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		 RESULT=x; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidofila",32, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // et_fila ::= IFIL_T list_atts MAYQ contenidofila 
            {
              NodoDOM RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 x.linea=y.getLinea(); x.columna=y.getColumna();  RESULT=x; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_fila",37, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // etiquetastabla ::= MENQ et_fila 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		  RESULT = parser.crearNodo("tabla","",0,0); RESULT.add(x); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetastabla",31, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // etiquetastabla ::= etiquetastabla MENQ et_fila 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM y = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 x.add(y); RESULT = x;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetastabla",31, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenidotabla ::= MENQ FTABLA MAYQ 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("tabla","",0,0); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidotabla",30, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenidotabla ::= etiquetastabla MENQ FTABLA MAYQ 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		 RESULT = x; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidotabla",30, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // et_cuerpo ::= ISALTOF MAYQ 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		parser.m2("salto","",x.getLinea(),x.getColumna(),null);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // et_cuerpo ::= ISPINNER list_atts MAYQ NT$14 MENQ FSPINNER MAYQ 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$14 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("spinner","",x.getLinea(),x.getColumna(),LT);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // et_cuerpo ::= ICAJA list_atts MAYQ NT$13 MENQ FCAJA MAYQ 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$13 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("caja","",x.getLinea(),x.getColumna(),LT);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // et_cuerpo ::= ICAJA_TEXTO list_atts MAYQ NT$12 MENQ FCAJA_TEXTO MAYQ 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$12 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("caja_texto","",x.getLinea(),x.getColumna(),LT);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // et_cuerpo ::= ITEXTO_A list_atts MAYQ NT$11 MENQ FTEXTO_A MAYQ 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("texto_a","",x.getLinea(),x.getColumna(),LT);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // et_cuerpo ::= ITABLA list_atts MAYQ contenidotabla 
            {
              NodoDOM RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 x.linea=y.getLinea(); x.columna=y.getColumna(); parser.Tadd(x); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // et_cuerpo ::= IENLACE list_atts MAYQ NT$10 MENQ FENLACE MAYQ 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$10 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("enlace","",x.getLinea(),x.getColumna(),LT);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // et_cuerpo ::= IBOTON list_atts MAYQ NT$9 MENQ FBOTON MAYQ 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("boton","",x.getLinea(),x.getColumna(),LT);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // et_cuerpo ::= IIMAGEN list_atts MAYQ NT$8 MENQ FIMAGEN MAYQ 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("imagen","",x.getLinea(),x.getColumna(),LT);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // et_cuerpo ::= ITEXTO list_atts MAYQ NT$7 MENQ FTEXTO MAYQ 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$7 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("texto","",x.getLinea(),x.getColumna(),LT);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // et_cuerpo ::= IPANEL list_atts MAYQ NT$6 contenidopanel 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("panel","",x.getLinea(),x.getColumna(),LT); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // etiquetas_cuerpo ::= MENQ et_cuerpo 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",14, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // etiquetas_cuerpo ::= etiquetas_cuerpo MENQ et_cuerpo 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",14, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contenidocuerpo ::= MENQ FCUERPO MAYQ MENQ FHTML MAYQ 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contenidocuerpo ::= etiquetas_cuerpo MENQ FCUERPO MAYQ MENQ FHTML MAYQ 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contenidocss ::= FCSS MAYQ MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ FCSS MAYQ MENQ FENCABEZADO MAYQ MENQ ICUERPO list_atts MAYQ NT$5 contenidocuerpo 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocss",8, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-18)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$5 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
 parser.m1("cuerpo","",x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fin_encabezado ::= MENQ FENCABEZADO MAYQ MENQ ICUERPO list_atts MAYQ NT$4 contenidocuerpo 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("fin_encabezado",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-8)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
 parser.m1("cuerpo","",x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fin_encabezado ::= MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("fin_encabezado",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiquetatitulo ::= ITITULO MAYQ MENQ FTITULO MAYQ 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("titulo","",0,0); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetatitulo",16, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiquetacjs ::= ICSS list_atts MAYQ MENQ FCSS MAYQ 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("ccss","",0,0); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetacjs",13, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiquetacss ::= ICJS list_atts MAYQ MENQ FCJS MAYQ 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("cjs","",0,0); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetacss",12, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // et_encabezado ::= etiquetatitulo 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // et_encabezado ::= etiquetacjs 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // et_encabezado ::= etiquetacss 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiquetas_encabezado ::= MENQ et_encabezado 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 last.add(x); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_encabezado",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiquetas_encabezado ::= etiquetas_encabezado MENQ et_encabezado 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 last.add(x); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_encabezado",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenidoencabezado ::= MENQ FENCABEZADO MAYQ MENQ ICUERPO NT$3 list_atts MAYQ contenidocuerpo 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-8)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
 parser.m1("cuerpo","",x.getLinea(),x.getColumna()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenidoencabezado ::= MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenidoencabezado ::= etiquetas_encabezado fin_encabezado 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenidohtml ::= FHTML MAYQ 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenidohtml ::= ICUERPO list_atts MAYQ NT$2 contenidocuerpo 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
parser.m1("cuerpo","",x.getLinea(),x.getColumna());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenidohtml ::= IENCABEZADO MAYQ NT$1 contenidoencabezado 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("encabezado","",x.getLinea(),x.getColumna(),null);
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // raiz ::= MENQ IHTML MAYQ MENQ NT$0 contenidohtml 
            {
              NodoDOM RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoDOM) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
 root = parser.crearNodo("chtml","",x.getLinea(),x.getColumna());  tmpN=root; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= raiz 
            {
              NodoDOM RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM start_val = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		RESULT = start_val;
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_HTML$parser.done_parsing();
          return CUP$AS_HTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

