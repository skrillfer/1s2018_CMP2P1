
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 10 00:03:27 CST 2018
//----------------------------------------------------

package Analizadores;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 10 00:03:27 CST 2018
  */
public class AS_HTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_HTML() {super();}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\006\004\000\002\006\010\000\002\006\011\000" +
    "\002\013\005\000\002\013\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\007\000\002\017" +
    "\007\000\002\022\007\000\002\014\010\000\002\014\011" +
    "\000\002\012\023\000\002\010\011\000\002\010\010\000" +
    "\002\020\005\000\002\020\004\000\002\021\005\000\002" +
    "\021\007\000\002\021\007\000\002\021\007\000\002\021" +
    "\007\000\002\021\007\000\002\021\007\000\002\021\007" +
    "\000\002\021\007\000\002\021\007\000\002\021\003\000" +
    "\002\023\006\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\075\006\001\002\000\004\002\202\001" +
    "\002\000\004\002\000\001\002\000\004\027\007\001\002" +
    "\000\004\074\010\001\002\000\004\075\011\001\002\000" +
    "\010\030\013\031\014\052\012\001\002\000\004\074\201" +
    "\001\002\000\004\074\127\001\002\000\004\074\016\001" +
    "\002\000\004\002\uffff\001\002\000\004\075\020\001\002" +
    "\000\004\002\ufffd\001\002\000\032\033\026\034\035\035" +
    "\032\036\033\037\023\040\030\044\027\045\037\046\036" +
    "\050\024\051\031\054\122\001\002\000\004\075\022\001" +
    "\002\000\032\033\026\034\035\035\032\036\033\037\023" +
    "\040\030\044\027\045\037\046\036\050\024\051\031\054" +
    "\034\001\002\000\004\074\116\001\002\000\004\074\112" +
    "\001\002\000\004\075\uffeb\001\002\000\004\074\100\001" +
    "\002\000\004\074\074\001\002\000\004\074\070\001\002" +
    "\000\004\075\uffdf\001\002\000\004\074\064\001\002\000" +
    "\004\074\060\001\002\000\004\074\054\001\002\000\004" +
    "\074\050\001\002\000\004\074\044\001\002\000\004\074" +
    "\040\001\002\000\004\075\041\001\002\000\004\070\042" +
    "\001\002\000\004\074\043\001\002\000\004\075\uffe2\001" +
    "\002\000\004\075\045\001\002\000\004\071\046\001\002" +
    "\000\004\074\047\001\002\000\004\075\uffe1\001\002\000" +
    "\004\075\051\001\002\000\004\057\052\001\002\000\004" +
    "\074\053\001\002\000\004\075\uffe8\001\002\000\004\075" +
    "\055\001\002\000\004\052\056\001\002\000\004\074\057" +
    "\001\002\000\004\002\uffed\001\002\000\004\075\061\001" +
    "\002\000\004\061\062\001\002\000\004\074\063\001\002" +
    "\000\004\075\uffe6\001\002\000\004\075\065\001\002\000" +
    "\004\060\066\001\002\000\004\074\067\001\002\000\004" +
    "\075\uffe7\001\002\000\004\075\071\001\002\000\004\063" +
    "\072\001\002\000\004\074\073\001\002\000\004\075\uffe4" +
    "\001\002\000\004\075\075\001\002\000\004\067\076\001" +
    "\002\000\004\074\077\001\002\000\004\075\uffe3\001\002" +
    "\000\004\075\101\001\002\000\032\033\026\034\035\035" +
    "\032\036\033\037\023\040\030\044\027\045\037\046\036" +
    "\050\024\051\031\056\107\001\002\000\004\075\104\001" +
    "\002\000\004\075\uffe9\001\002\000\032\033\026\034\035" +
    "\035\032\036\033\037\023\040\030\044\027\045\037\046" +
    "\036\050\024\051\031\056\105\001\002\000\004\074\106" +
    "\001\002\000\004\075\uffde\001\002\000\004\074\111\001" +
    "\002\000\004\075\uffea\001\002\000\004\075\uffdd\001\002" +
    "\000\004\075\113\001\002\000\004\073\114\001\002\000" +
    "\004\074\115\001\002\000\004\075\uffe0\001\002\000\004" +
    "\075\117\001\002\000\004\062\120\001\002\000\004\074" +
    "\121\001\002\000\004\075\uffe5\001\002\000\004\074\123" +
    "\001\002\000\004\075\124\001\002\000\004\052\125\001" +
    "\002\000\004\074\126\001\002\000\004\002\uffec\001\002" +
    "\000\004\075\131\001\002\000\004\002\ufffe\001\002\000" +
    "\012\032\142\053\170\076\140\100\135\001\002\000\004" +
    "\075\133\001\002\000\012\032\142\053\137\076\140\100" +
    "\135\001\002\000\004\002\ufffb\001\002\000\004\074\164" +
    "\001\002\000\004\075\ufff5\001\002\000\004\074\155\001" +
    "\002\000\004\074\151\001\002\000\004\075\ufff4\001\002" +
    "\000\004\074\145\001\002\000\004\075\ufff8\001\002\000" +
    "\004\075\ufff6\001\002\000\004\075\146\001\002\000\004" +
    "\055\147\001\002\000\004\074\150\001\002\000\004\075" +
    "\ufff1\001\002\000\004\075\152\001\002\000\004\077\153" +
    "\001\002\000\004\074\154\001\002\000\004\075\ufff3\001" +
    "\002\000\004\075\156\001\002\000\006\031\160\052\157" +
    "\001\002\000\004\074\163\001\002\000\004\074\161\001" +
    "\002\000\004\075\020\001\002\000\004\002\uffef\001\002" +
    "\000\004\002\ufff0\001\002\000\004\075\165\001\002\000" +
    "\004\101\166\001\002\000\004\074\167\001\002\000\004" +
    "\075\ufff2\001\002\000\004\074\172\001\002\000\004\075" +
    "\ufff7\001\002\000\004\075\173\001\002\000\006\031\175" +
    "\052\174\001\002\000\004\074\200\001\002\000\004\074" +
    "\176\001\002\000\004\075\020\001\002\000\004\002\ufff9" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\016\020\020\001\001\000\002\001\001\000" +
    "\004\021\107\001\001\000\002\001\001\000\004\021\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\101\023\102\001\001\000\004\021\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\127" +
    "\013\131\001\001\000\002\001\001\000\012\015\170\016" +
    "\143\017\135\022\140\001\001\000\004\014\133\001\001" +
    "\000\012\015\142\016\143\017\135\022\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\161\020\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\176" +
    "\020\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_HTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_HTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_HTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_HTML$actions {


    //se declaran variables globales etc.
    //GestorC3D gs = new GestorC3D();
    

  private final AS_HTML parser;

  /** Constructor */
  CUP$AS_HTML$actions(AS_HTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_HTML$do_action(
    int                        CUP$AS_HTML$act_num,
    java_cup.runtime.lr_parser CUP$AS_HTML$parser,
    java.util.Stack            CUP$AS_HTML$stack,
    int                        CUP$AS_HTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_HTML$result;

      /* select the action based on the action number */
      switch (CUP$AS_HTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contenidopanel ::= MENQ FPANEL MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidopanel",17, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // contenidopanel ::= etiquetas_cuerpo MENQ FPANEL MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidopanel",17, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // et_cuerpo ::= ISALTOF 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // et_cuerpo ::= ISPINNER MAYQ MENQ FSPINNER MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // et_cuerpo ::= ICAJA MAYQ MENQ FCAJA MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // et_cuerpo ::= ICAJA_TEXTO MAYQ MENQ FCAJA_TEXTO MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // et_cuerpo ::= ITEXTO_A MAYQ MENQ FTEXTO_A MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // et_cuerpo ::= ITABLA MAYQ MENQ FTABLA MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // et_cuerpo ::= IENLACE MAYQ MENQ FENLACE MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // et_cuerpo ::= IBOTON MAYQ MENQ FBOTON MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // et_cuerpo ::= IIMAGEN MAYQ MENQ FIMAGEN MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // et_cuerpo ::= ITEXTO MAYQ MENQ FTEXTO MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // et_cuerpo ::= IPANEL MAYQ contenidopanel 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiquetas_cuerpo ::= MENQ et_cuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",14, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // etiquetas_cuerpo ::= etiquetas_cuerpo MENQ et_cuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",14, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contenidocuerpo ::= MENQ FCUERPO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contenidocuerpo ::= etiquetas_cuerpo MENQ FCUERPO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contenidocss ::= FCSS MAYQ MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ FCSS MAYQ MENQ FENCABEZADO MAYQ MENQ ICUERPO MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocss",8, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-16)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fin_encabezado ::= MENQ FENCABEZADO MAYQ MENQ ICUERPO MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("fin_encabezado",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fin_encabezado ::= MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("fin_encabezado",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiquetatitulo ::= ITITULO MAYQ MENQ FTITULO MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetatitulo",16, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiquetacjs ::= ICSS MAYQ MENQ FCSS MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetacjs",13, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiquetacss ::= ICJS MAYQ MENQ FCJS MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetacss",12, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // et_encabezado ::= etiquetatitulo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // et_encabezado ::= etiquetacjs 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // et_encabezado ::= etiquetacss 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiquetas_encabezado ::= MENQ et_encabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_encabezado",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiquetas_encabezado ::= etiquetas_encabezado MENQ et_encabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_encabezado",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenidoencabezado ::= MENQ FENCABEZADO MAYQ MENQ ICUERPO MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenidoencabezado ::= MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenidoencabezado ::= etiquetas_encabezado fin_encabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenidohtml ::= FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contenidohtml ::= ICUERPO MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // contenidohtml ::= IENCABEZADO MAYQ contenidoencabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // raiz ::= MENQ IHTML MAYQ MENQ contenidohtml 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= raiz 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		RESULT = start_val;
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_HTML$parser.done_parsing();
          return CUP$AS_HTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

