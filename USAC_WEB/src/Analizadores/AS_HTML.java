
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 14 22:42:56 CST 2018
//----------------------------------------------------

package Analizadores;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 14 22:42:56 CST 2018
  */
public class AS_HTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_HTML() {super();}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\052" +
    "\002\000\002\003\010\000\002\053\002\000\002\004\006" +
    "\000\002\054\002\000\002\004\007\000\002\004\004\000" +
    "\002\006\004\000\002\006\010\000\002\055\002\000\002" +
    "\006\013\000\002\013\005\000\002\013\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\010" +
    "\000\002\017\010\000\002\022\007\000\002\014\010\000" +
    "\002\014\012\000\002\012\024\000\002\010\011\000\002" +
    "\010\010\000\002\020\005\000\002\020\004\000\002\021" +
    "\006\000\002\021\010\000\002\021\010\000\002\021\010" +
    "\000\002\021\010\000\002\021\006\000\002\021\010\000" +
    "\002\021\010\000\002\021\010\000\002\021\010\000\002" +
    "\021\003\000\002\040\006\000\002\040\005\000\002\041" +
    "\005\000\002\041\004\000\002\047\006\000\002\042\006" +
    "\000\002\042\005\000\002\043\005\000\002\043\004\000" +
    "\002\044\006\000\002\044\006\000\002\046\006\000\002" +
    "\046\005\000\002\045\006\000\002\045\005\000\002\023" +
    "\006\000\002\023\005\000\002\025\002\000\002\025\003" +
    "\000\002\026\005\000\002\026\004\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\027\005\000\002\030\007\000\002\031\005" +
    "\000\002\032\005\000\002\033\005\000\002\034\005\000" +
    "\002\035\005\000\002\036\005\000\002\051\004\000\002" +
    "\051\003\000\002\050\003\000\002\050\010\000\002\050" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\004\075\006\001\002\000\004\002\365\001" +
    "\002\000\004\002\000\001\002\000\004\027\007\001\002" +
    "\000\004\074\010\001\002\000\004\075\011\001\002\000" +
    "\010\030\uffff\031\uffff\052\uffff\001\002\000\010\030\014" +
    "\031\015\052\013\001\002\000\004\074\364\001\002\000" +
    "\004\074\304\001\002\000\024\074\uffc9\103\026\104\024" +
    "\105\037\106\025\107\030\110\032\111\031\112\033\001" +
    "\002\000\004\002\ufffe\001\002\000\024\074\uffc8\103\026" +
    "\104\024\105\037\106\025\107\030\110\032\111\031\112" +
    "\033\001\002\000\004\020\uffc0\001\002\000\004\020\301" +
    "\001\002\000\004\020\uffc1\001\002\000\004\020\uffbf\001" +
    "\002\000\004\021\275\001\002\000\004\021\273\001\002" +
    "\000\004\021\271\001\002\000\004\020\uffc3\001\002\000" +
    "\004\021\267\001\002\000\004\021\265\001\002\000\004" +
    "\021\263\001\002\000\004\021\261\001\002\000\004\020" +
    "\uffbe\001\002\000\004\020\uffc2\001\002\000\004\020\uffc4" +
    "\001\002\000\004\021\257\001\002\000\004\020\uffc5\001" +
    "\002\000\004\074\042\001\002\000\004\075\ufffb\001\002" +
    "\000\004\075\045\001\002\000\004\002\ufffa\001\002\000" +
    "\032\033\053\034\062\035\057\036\060\037\050\040\055" +
    "\044\054\045\064\046\063\050\051\051\056\054\252\001" +
    "\002\000\004\075\047\001\002\000\032\033\053\034\062" +
    "\035\057\036\060\037\050\040\055\044\054\045\064\046" +
    "\063\050\051\051\056\054\061\001\002\000\024\074\uffc9" +
    "\103\026\104\024\105\037\106\025\107\030\110\032\111" +
    "\031\112\033\001\002\000\024\074\uffc9\103\026\104\024" +
    "\105\037\106\025\107\030\110\032\111\031\112\033\001" +
    "\002\000\004\075\uffe7\001\002\000\024\074\uffc9\103\026" +
    "\104\024\105\037\106\025\107\030\110\032\111\031\112" +
    "\033\001\002\000\024\074\uffc9\103\026\104\024\105\037" +
    "\106\025\107\030\110\032\111\031\112\033\001\002\000" +
    "\024\074\uffc9\103\026\104\024\105\037\106\025\107\030" +
    "\110\032\111\031\112\033\001\002\000\004\075\uffdb\001" +
    "\002\000\024\074\uffc9\103\026\104\024\105\037\106\025" +
    "\107\030\110\032\111\031\112\033\001\002\000\024\074" +
    "\uffc9\103\026\104\024\105\037\106\025\107\030\110\032" +
    "\111\031\112\033\001\002\000\004\074\104\001\002\000" +
    "\024\074\uffc9\103\026\104\024\105\037\106\025\107\030" +
    "\110\032\111\031\112\033\001\002\000\024\074\uffc9\103" +
    "\026\104\024\105\037\106\025\107\030\110\032\111\031" +
    "\112\033\001\002\000\024\074\uffc9\103\026\104\024\105" +
    "\037\106\025\107\030\110\032\111\031\112\033\001\002" +
    "\000\004\074\066\001\002\000\004\075\067\001\002\000" +
    "\004\070\070\001\002\000\004\074\071\001\002\000\004" +
    "\075\uffde\001\002\000\004\074\073\001\002\000\004\075" +
    "\074\001\002\000\004\071\075\001\002\000\004\074\076" +
    "\001\002\000\004\075\uffdd\001\002\000\004\074\100\001" +
    "\002\000\004\075\101\001\002\000\004\057\102\001\002" +
    "\000\004\074\103\001\002\000\004\075\uffe4\001\002\000" +
    "\004\075\105\001\002\000\004\052\106\001\002\000\004" +
    "\074\107\001\002\000\004\002\uffe9\001\002\000\004\074" +
    "\111\001\002\000\004\075\112\001\002\000\004\061\113" +
    "\001\002\000\004\074\114\001\002\000\004\075\uffe2\001" +
    "\002\000\004\074\116\001\002\000\004\075\117\001\002" +
    "\000\004\060\120\001\002\000\004\074\121\001\002\000" +
    "\004\075\uffe3\001\002\000\004\074\123\001\002\000\004" +
    "\075\125\001\002\000\004\075\214\001\002\000\006\041" +
    "\131\063\130\001\002\000\004\075\uffe0\001\002\000\004" +
    "\075\uffd7\001\002\000\004\074\213\001\002\000\024\074" +
    "\uffc9\103\026\104\024\105\037\106\025\107\030\110\032" +
    "\111\031\112\033\001\002\000\004\074\133\001\002\000" +
    "\004\075\136\001\002\000\004\075\207\001\002\000\004" +
    "\075\uffd6\001\002\000\010\042\140\043\142\064\141\001" +
    "\002\000\004\075\uffd2\001\002\000\024\074\uffc9\103\026" +
    "\104\024\105\037\106\025\107\030\110\032\111\031\112" +
    "\033\001\002\000\004\074\174\001\002\000\024\074\uffc9" +
    "\103\026\104\024\105\037\106\025\107\030\110\032\111" +
    "\031\112\033\001\002\000\004\074\144\001\002\000\012" +
    "\012\147\035\145\036\152\075\151\001\002\000\024\074" +
    "\uffc9\103\026\104\024\105\037\106\025\107\030\110\032" +
    "\111\031\112\033\001\002\000\004\075\uffd0\001\002\000" +
    "\012\012\uffb3\035\uffb3\036\uffb3\075\uffb3\001\002\000\012" +
    "\012\uffb4\035\uffb4\036\uffb4\075\uffb4\001\002\000\004\066" +
    "\165\001\002\000\024\074\uffc9\103\026\104\024\105\037" +
    "\106\025\107\030\110\032\111\031\112\033\001\002\000" +
    "\012\012\147\035\145\036\152\075\155\001\002\000\012" +
    "\012\uffb5\035\uffb5\036\uffb5\075\uffb5\001\002\000\004\066" +
    "\156\001\002\000\004\074\157\001\002\000\004\075\uffcd" +
    "\001\002\000\004\074\161\001\002\000\004\075\162\001" +
    "\002\000\004\061\163\001\002\000\004\074\164\001\002" +
    "\000\012\012\uffb2\035\uffb2\036\uffb2\075\uffb2\001\002\000" +
    "\004\074\166\001\002\000\004\075\uffcc\001\002\000\004" +
    "\074\170\001\002\000\004\075\171\001\002\000\004\060" +
    "\172\001\002\000\004\074\173\001\002\000\012\012\uffb1" +
    "\035\uffb1\036\uffb1\075\uffb1\001\002\000\004\075\uffd4\001" +
    "\002\000\004\074\176\001\002\000\012\012\147\035\145" +
    "\036\152\075\200\001\002\000\004\075\uffd1\001\002\000" +
    "\004\065\205\001\002\000\012\012\147\035\145\036\152" +
    "\075\202\001\002\000\004\065\203\001\002\000\004\074" +
    "\204\001\002\000\004\075\uffcf\001\002\000\004\074\206" +
    "\001\002\000\004\075\uffce\001\002\000\010\042\140\043" +
    "\142\064\211\001\002\000\004\075\uffd3\001\002\000\004" +
    "\074\212\001\002\000\004\075\uffd5\001\002\000\004\075" +
    "\uffd9\001\002\000\006\041\131\063\216\001\002\000\004" +
    "\075\uffd8\001\002\000\004\074\217\001\002\000\004\075" +
    "\uffda\001\002\000\004\074\221\001\002\000\004\075\222" +
    "\001\002\000\004\067\223\001\002\000\004\074\224\001" +
    "\002\000\004\075\uffdf\001\002\000\004\074\226\001\002" +
    "\000\004\075\227\001\002\000\032\033\053\034\062\035" +
    "\057\036\060\037\050\040\055\044\054\045\064\046\063" +
    "\050\051\051\056\056\235\001\002\000\004\075\232\001" +
    "\002\000\004\075\uffe5\001\002\000\032\033\053\034\062" +
    "\035\057\036\060\037\050\040\055\044\054\045\064\046" +
    "\063\050\051\051\056\056\233\001\002\000\004\074\234" +
    "\001\002\000\004\075\uffcb\001\002\000\004\074\237\001" +
    "\002\000\004\075\uffe6\001\002\000\004\075\uffca\001\002" +
    "\000\004\074\241\001\002\000\004\075\242\001\002\000" +
    "\004\073\243\001\002\000\004\074\244\001\002\000\004" +
    "\075\uffdc\001\002\000\004\074\246\001\002\000\004\075" +
    "\247\001\002\000\004\062\250\001\002\000\004\074\251" +
    "\001\002\000\004\075\uffe1\001\002\000\004\074\253\001" +
    "\002\000\004\075\254\001\002\000\004\052\255\001\002" +
    "\000\004\074\256\001\002\000\004\002\uffe8\001\002\000" +
    "\004\114\260\001\002\000\004\020\uffbb\001\002\000\004" +
    "\114\262\001\002\000\004\020\uffb6\001\002\000\004\114" +
    "\264\001\002\000\004\020\uffb8\001\002\000\004\114\266" +
    "\001\002\000\004\020\uffb7\001\002\000\004\114\270\001" +
    "\002\000\004\020\uffb9\001\002\000\004\114\272\001\002" +
    "\000\004\020\uffbd\001\002\000\004\114\274\001\002\000" +
    "\004\020\uffba\001\002\000\004\114\276\001\002\000\004" +
    "\023\277\001\002\000\004\024\300\001\002\000\004\020" +
    "\uffbc\001\002\000\024\074\uffc6\103\uffc6\104\uffc6\105\uffc6" +
    "\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\001\002\000" +
    "\004\020\303\001\002\000\024\074\uffc7\103\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\001" +
    "\002\000\004\075\ufffd\001\002\000\004\075\307\001\002" +
    "\000\004\002\ufffc\001\002\000\012\032\320\053\351\076" +
    "\316\100\313\001\002\000\004\075\311\001\002\000\012" +
    "\032\320\053\315\076\316\100\313\001\002\000\004\002" +
    "\ufff8\001\002\000\024\074\uffc9\103\026\104\024\105\037" +
    "\106\025\107\030\110\032\111\031\112\033\001\002\000" +
    "\004\075\ufff1\001\002\000\004\074\334\001\002\000\024" +
    "\074\uffc9\103\026\104\024\105\037\106\025\107\030\110" +
    "\032\111\031\112\033\001\002\000\004\075\ufff0\001\002" +
    "\000\004\074\323\001\002\000\004\075\ufff2\001\002\000" +
    "\004\075\ufff4\001\002\000\004\075\324\001\002\000\004" +
    "\055\325\001\002\000\004\074\326\001\002\000\004\075" +
    "\uffed\001\002\000\004\074\330\001\002\000\004\075\331" +
    "\001\002\000\004\077\332\001\002\000\004\074\333\001" +
    "\002\000\004\075\uffef\001\002\000\004\075\335\001\002" +
    "\000\006\031\337\052\336\001\002\000\004\074\343\001" +
    "\002\000\024\074\uffc9\103\026\104\024\105\037\106\025" +
    "\107\030\110\032\111\031\112\033\001\002\000\004\074" +
    "\341\001\002\000\004\075\045\001\002\000\004\002\uffeb" +
    "\001\002\000\004\002\uffec\001\002\000\004\074\345\001" +
    "\002\000\004\075\346\001\002\000\004\101\347\001\002" +
    "\000\004\074\350\001\002\000\004\075\uffee\001\002\000" +
    "\004\074\353\001\002\000\004\075\ufff3\001\002\000\004" +
    "\075\354\001\002\000\006\031\356\052\355\001\002\000" +
    "\004\074\363\001\002\000\024\074\ufff6\103\ufff6\104\ufff6" +
    "\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6\001" +
    "\002\000\024\074\uffc9\103\026\104\024\105\037\106\025" +
    "\107\030\110\032\111\031\112\033\001\002\000\004\074" +
    "\361\001\002\000\004\075\045\001\002\000\004\002\ufff5" +
    "\001\002\000\004\002\ufff7\001\002\000\004\002\ufff9\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\011\001\001\000\004\004" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\024\020\025\040\026\016\027\037\030\035\031\026\032" +
    "\034\033\021\034\017\035\022\036\033\001\001\000\002" +
    "\001\001\000\024\024\301\027\037\030\035\031\026\032" +
    "\034\033\021\034\017\035\022\036\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\042\001\001\000\006" +
    "\010\043\020\045\001\001\000\002\001\001\000\004\021" +
    "\235\001\001\000\002\001\001\000\004\021\051\001\001" +
    "\000\030\024\020\025\244\026\016\027\037\030\035\031" +
    "\026\032\034\033\021\034\017\035\022\036\033\001\001" +
    "\000\030\024\020\025\237\026\016\027\037\030\035\031" +
    "\026\032\034\033\021\034\017\035\022\036\033\001\001" +
    "\000\002\001\001\000\030\024\020\025\224\026\016\027" +
    "\037\030\035\031\026\032\034\033\021\034\017\035\022" +
    "\036\033\001\001\000\030\024\020\025\217\026\016\027" +
    "\037\030\035\031\026\032\034\033\021\034\017\035\022" +
    "\036\033\001\001\000\030\024\020\025\121\026\016\027" +
    "\037\030\035\031\026\032\034\033\021\034\017\035\022" +
    "\036\033\001\001\000\002\001\001\000\030\024\020\025" +
    "\114\026\016\027\037\030\035\031\026\032\034\033\021" +
    "\034\017\035\022\036\033\001\001\000\030\024\020\025" +
    "\107\026\016\027\037\030\035\031\026\032\034\033\021" +
    "\034\017\035\022\036\033\001\001\000\002\001\001\000" +
    "\030\024\020\025\076\026\016\027\037\030\035\031\026" +
    "\032\034\033\021\034\017\035\022\036\033\001\001\000" +
    "\030\024\020\025\071\026\016\027\037\030\035\031\026" +
    "\032\034\033\021\034\017\035\022\036\033\001\001\000" +
    "\030\024\020\025\064\026\016\027\037\030\035\031\026" +
    "\032\034\033\021\034\017\035\022\036\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\125\041\123\001\001\000\002\001" +
    "\001\000\004\047\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\024\020\025\131\026" +
    "\016\027\037\030\035\031\026\032\034\033\021\034\017" +
    "\035\022\036\033\001\001\000\002\001\001\000\006\042" +
    "\134\043\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\136\001\001\000\002\001\001\000\030\024" +
    "\020\025\174\026\016\027\037\030\035\031\026\032\034" +
    "\033\021\034\017\035\022\036\033\001\001\000\002\001" +
    "\001\000\030\024\020\025\142\026\016\027\037\030\035" +
    "\031\026\032\034\033\021\034\017\035\022\036\033\001" +
    "\001\000\002\001\001\000\010\045\145\050\147\051\152" +
    "\001\001\000\030\024\020\025\166\026\016\027\037\030" +
    "\035\031\026\032\034\033\021\034\017\035\022\036\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\024\020\025\157\026\016" +
    "\027\037\030\035\031\026\032\034\033\021\034\017\035" +
    "\022\036\033\001\001\000\004\050\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\176\050\147\051\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\227" +
    "\023\230\001\001\000\004\021\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\304\001\001\000" +
    "\006\006\305\013\307\001\001\000\002\001\001\000\012" +
    "\015\351\016\320\017\313\022\316\001\001\000\004\014" +
    "\311\001\001\000\012\015\321\016\320\017\313\022\316" +
    "\001\001\000\002\001\001\000\030\024\020\025\343\026" +
    "\016\027\037\030\035\031\026\032\034\033\021\034\017" +
    "\035\022\036\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\024\020\025\326\026\016\027\037\030\035" +
    "\031\026\032\034\033\021\034\017\035\022\036\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\024\020\025\337\026\016\027\037\030\035\031" +
    "\026\032\034\033\021\034\017\035\022\036\033\001\001" +
    "\000\002\001\001\000\006\010\341\020\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\356\001" +
    "\001\000\030\024\020\025\357\026\016\027\037\030\035" +
    "\031\026\032\034\033\021\034\017\035\022\036\033\001" +
    "\001\000\002\001\001\000\006\010\361\020\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_HTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_HTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_HTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public NodoDOM crearNodo(String nombre,String valor,int linea,int columna){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }

    //este metodo crear un nuevo nodo, lo agrega a la raiz actual y luego cambia la raizactual por el nuevo nodo creado
    public void m1(String nombre,String valor,int linea,int columna){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        action_obj.tmpN.add(nuevo);
        action_obj.tmpN=nuevo;         //despues de crear el nuevo nodo se deja en la variable tmpN
    }


    //este metodo crear un nuevo nodo y simplemente se lo agrega a la raiz actual sin cambiarla
    public void m2(String nombre,String valor,int linea,int columna){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        action_obj.tmpN.add(nuevo);
        action_obj.last=nuevo;
    }

    //Este metodo retorna la RAIZ del arbol  generado 
    public NodoDOM getRoot(){
        return action_obj.root;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_HTML$actions {


    //se declaran variables globales etc.
    public int Index=1;
    public NodoDOM root;
    public NodoDOM tmpN ;
    public NodoDOM last ;

  private final AS_HTML parser;

  /** Constructor */
  CUP$AS_HTML$actions(AS_HTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_HTML$do_action(
    int                        CUP$AS_HTML$act_num,
    java_cup.runtime.lr_parser CUP$AS_HTML$parser,
    java.util.Stack            CUP$AS_HTML$stack,
    int                        CUP$AS_HTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_HTML$result;

      /* select the action based on the action number */
      switch (CUP$AS_HTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cont_celda ::= IIMAGEN list_atts MAYQ MENQ FIMAGEN MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("cont_celda",38, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cont_celda ::= IBOTON list_atts MAYQ MENQ FBOTON MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("cont_celda",38, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cont_celda ::= I_D 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("cont_celda",38, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // contenidos_celdas ::= cont_celda 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidos_celdas",39, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // contenidos_celdas ::= contenidos_celdas cont_celda 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidos_celdas",39, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // att_alineado ::= ALINEADO IGUAL STRING_LITERAL 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alineado",28, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // att_ancho ::= ANCHO IGUAL STRING_LITERAL 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ancho",27, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // att_alto ::= ALTO IGUAL STRING_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 System.out.println(a.getCadena()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alto",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // att_grupo ::= GRUPO IGUAL STRING_LITERAL 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_grupo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // att_id ::= ID IGUAL STRING_LITERAL 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_id",24, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // att_valor ::= VALOR IGUAL STRING_LITERAL 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_valor",23, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // att_click ::= CLICK IGUAL STRING_LITERAL APAR CPAR 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_click",22, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // att_ruta ::= RUTA IGUAL STRING_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 System.out.println(a.getCadena()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ruta",21, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // atributo ::= att_alineado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // atributo ::= att_ancho 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atributo ::= att_alto 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atributo ::= att_grupo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atributo ::= att_id 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atributo ::= att_valor 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributo ::= att_click 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atributo ::= att_ruta 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",18, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list_atts2 ::= atributo PYC 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",20, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list_atts2 ::= list_atts2 atributo PYC 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",20, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list_atts ::= list_atts2 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",19, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_atts ::= 
            {
              Nodo RESULT =null;
		 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",19, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidopanel ::= MENQ FPANEL MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidopanel",17, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenidopanel ::= etiquetas_cuerpo MENQ FPANEL MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidopanel",17, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenidoct ::= MENQ FCT MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoct",35, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenidoct ::= contenidos_celdas MENQ FCT MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoct",35, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenidocb ::= MENQ FCB MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocb",36, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenidocb ::= contenidos_celdas MENQ FCB MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocb",36, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // et_cb_ct ::= ICT list_atts MAYQ contenidoct 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cb_ct",34, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // et_cb_ct ::= ICB list_atts MAYQ contenidocb 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cb_ct",34, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetasfila ::= MENQ et_cb_ct 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetasfila",33, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetasfila ::= etiquetasfila MENQ et_cb_ct 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetasfila",33, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contenidofila ::= MENQ FFIL_T MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidofila",32, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // contenidofila ::= etiquetasfila MENQ FFIL_T MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidofila",32, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // et_fila ::= IFIL_T list_atts MAYQ contenidofila 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_fila",37, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // etiquetastabla ::= MENQ et_fila 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetastabla",31, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // etiquetastabla ::= etiquetastabla MENQ et_fila 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetastabla",31, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contenidotabla ::= MENQ FTABLA MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidotabla",30, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // contenidotabla ::= etiquetastabla MENQ FTABLA MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidotabla",30, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // et_cuerpo ::= ISALTOF 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // et_cuerpo ::= ISPINNER list_atts MAYQ MENQ FSPINNER MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // et_cuerpo ::= ICAJA list_atts MAYQ MENQ FCAJA MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // et_cuerpo ::= ICAJA_TEXTO list_atts MAYQ MENQ FCAJA_TEXTO MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // et_cuerpo ::= ITEXTO_A list_atts MAYQ MENQ FTEXTO_A MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // et_cuerpo ::= ITABLA list_atts MAYQ contenidotabla 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // et_cuerpo ::= IENLACE list_atts MAYQ MENQ FENLACE MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // et_cuerpo ::= IBOTON list_atts MAYQ MENQ FBOTON MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // et_cuerpo ::= IIMAGEN list_atts MAYQ MENQ FIMAGEN MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // et_cuerpo ::= ITEXTO list_atts MAYQ MENQ FTEXTO MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // et_cuerpo ::= IPANEL list_atts MAYQ contenidopanel 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // etiquetas_cuerpo ::= MENQ et_cuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",14, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // etiquetas_cuerpo ::= etiquetas_cuerpo MENQ et_cuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",14, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contenidocuerpo ::= MENQ FCUERPO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contenidocuerpo ::= etiquetas_cuerpo MENQ FCUERPO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-6)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contenidocss ::= FCSS MAYQ MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ FCSS MAYQ MENQ FENCABEZADO MAYQ MENQ ICUERPO list_atts MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocss",8, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-17)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fin_encabezado ::= MENQ FENCABEZADO MAYQ MENQ ICUERPO list_atts MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("fin_encabezado",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-7)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fin_encabezado ::= MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("fin_encabezado",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiquetatitulo ::= ITITULO MAYQ MENQ FTITULO MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetatitulo",16, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiquetacjs ::= ICSS list_atts MAYQ MENQ FCSS MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetacjs",13, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiquetacss ::= ICJS list_atts MAYQ MENQ FCJS MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetacss",12, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // et_encabezado ::= etiquetatitulo 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // et_encabezado ::= etiquetacjs 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // et_encabezado ::= etiquetacss 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_encabezado",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiquetas_encabezado ::= MENQ et_encabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_encabezado",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiquetas_encabezado ::= etiquetas_encabezado MENQ et_encabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_encabezado",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenidoencabezado ::= MENQ FENCABEZADO MAYQ MENQ ICUERPO NT$3 list_atts MAYQ contenidocuerpo 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-8)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
parser.m1("cuerpo","",x.getLinea(),x.getColumna());
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenidoencabezado ::= MENQ FENCABEZADO MAYQ MENQ FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenidoencabezado ::= etiquetas_encabezado fin_encabezado 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidoencabezado",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenidohtml ::= FHTML MAYQ 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenidohtml ::= ICUERPO list_atts MAYQ NT$2 contenidocuerpo 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
parser.m2("cuerpo","",x.getLinea(),x.getColumna());
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenidohtml ::= IENCABEZADO MAYQ NT$1 contenidoencabezado 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidohtml",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
parser.m2("encabezado","",x.getLinea(),x.getColumna());
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // raiz ::= MENQ IHTML MAYQ MENQ NT$0 contenidohtml 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-4)).value;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-5)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
 root = parser.crearNodo("chtml","",x.getLinea(),x.getColumna());  tmpN=root; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= raiz 
            {
              Nodo RESULT =null;

              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		RESULT = start_val;
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_HTML$parser.done_parsing();
          return CUP$AS_HTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

