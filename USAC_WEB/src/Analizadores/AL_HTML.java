/* The following code was generated by JFlex 1.4.3 on 12/02/18 08:23 AM */


package Analizadores;
import Estructuras.*;
import java.util.LinkedList;
import java_cup.runtime.*;

import Errores.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/02/18 08:23 AM from the specification file
 * <tt>src/Analizadores/Lex_HTML.flex</tt>
 */
public class AL_HTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\30"+
    "\1\10\1\0\1\6\2\0\1\11\1\24\1\25\1\16\1\14\1\0"+
    "\1\15\1\5\1\17\4\36\4\13\2\4\1\0\1\22\1\20\1\23"+
    "\1\21\2\0\1\50\1\51\1\37\1\53\1\47\1\44\1\63\1\40"+
    "\1\45\1\55\1\6\1\43\1\42\1\46\1\54\1\61\1\6\1\60"+
    "\1\56\1\41\1\57\1\104\1\6\1\62\1\6\1\52\1\0\1\12"+
    "\2\0\1\64\1\0\1\70\1\31\1\71\1\66\1\100\1\34\1\105"+
    "\1\77\1\73\1\6\1\74\1\72\1\6\1\33\1\65\1\76\1\103"+
    "\1\35\1\101\1\32\1\67\1\75\3\6\1\102\1\26\1\7\1\27"+
    "\1\0\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0"+
    "\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0"+
    "\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0"+
    "\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6\25\7"+
    "\12\4\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\4\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0"+
    "\12\4\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6"+
    "\1\0\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\4\1\0\7\6\1\0\7\6"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\4\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\12\4\2\7\3\6\1\7"+
    "\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\4\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\4\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\2\0\1\6\6\0\1\7\16\0\12\4\11\0\1\6\7\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\1\0\2\6\6\0\2\6\2\7\2\0\12\4\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"+
    "\1\6\1\0\2\6\2\7\2\0\12\4\1\0\2\6\17\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0"+
    "\12\4\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"+
    "\4\0\10\6\10\7\1\0\12\4\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"+
    "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\12\4\2\0\4\6\40\0\1\6\27\0\2\7\6\0"+
    "\12\4\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"+
    "\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7"+
    "\11\0\1\7\71\0\53\6\24\7\1\6\12\4\6\0\6\6\4\7"+
    "\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7"+
    "\1\6\1\7\12\4\4\7\2\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6"+
    "\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6"+
    "\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6"+
    "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6"+
    "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7"+
    "\3\0\1\6\3\0\2\6\1\7\2\0\12\4\41\0\3\7\2\0"+
    "\12\4\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0"+
    "\35\6\3\0\14\7\4\0\14\7\12\0\12\4\36\6\2\0\5\6"+
    "\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\4\46\0\27\6"+
    "\5\7\4\0\65\6\12\7\1\0\35\7\2\0\1\7\12\4\6\0"+
    "\12\4\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\4"+
    "\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\4\54\6\16\7"+
    "\14\0\44\6\24\7\10\0\12\4\3\0\3\6\12\4\44\6\122\0"+
    "\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6"+
    "\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7"+
    "\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6"+
    "\25\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6"+
    "\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6"+
    "\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0"+
    "\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7"+
    "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"+
    "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6"+
    "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\4\2\6\24\0\57\6"+
    "\1\7\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0"+
    "\11\6\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0"+
    "\12\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6"+
    "\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\4\6\0\22\7"+
    "\6\6\3\0\1\6\4\0\12\4\34\6\10\7\2\0\27\6\15\7"+
    "\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\4\46\0"+
    "\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\4\6\0"+
    "\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6"+
    "\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6"+
    "\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6"+
    "\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0"+
    "\12\4\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0"+
    "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0"+
    "\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\4\7\0"+
    "\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\1\0\1\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\3\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\23\5\2\23\1\24\1\2"+
    "\1\25\2\26\1\27\1\2\1\0\1\1\1\30\4\5"+
    "\1\31\1\5\1\32\11\5\1\33\23\5\1\34\1\26"+
    "\1\25\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\40\5\5\1\46\7\5\1\47\26\5"+
    "\1\40\1\5\1\50\1\51\1\5\1\52\1\5\1\53"+
    "\4\5\1\0\4\5\1\54\13\5\1\55\4\5\1\56"+
    "\1\57\1\60\3\5\1\61\1\62\1\63\11\0\3\5"+
    "\1\64\1\5\1\65\6\5\1\66\1\67\1\5\1\70"+
    "\2\5\1\71\1\5\1\72\1\73\1\5\2\0\1\74"+
    "\1\0\1\75\14\0\1\76\1\5\1\77\2\5\1\100"+
    "\1\101\1\102\1\0\5\5\1\103\3\0\1\104\14\0"+
    "\2\5\1\105\1\0\1\106\1\107\3\5\1\110\1\0"+
    "\1\111\14\0\1\5\1\112\1\0\1\113\2\5\1\114"+
    "\3\0\1\115\1\116\1\117\3\0\1\120\2\0\1\121"+
    "\1\5\1\122\1\123\1\124\1\0\1\125\1\126\1\0"+
    "\1\127\1\0\1\130\1\131\1\0\1\132\1\0\1\133"+
    "\1\0\1\134\4\0\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\322\0\u01a4"+
    "\0\u01ea\0\u0230\0\322\0\322\0\322\0\322\0\322\0\u0276"+
    "\0\322\0\322\0\322\0\322\0\322\0\322\0\322\0\u02bc"+
    "\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec"+
    "\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c"+
    "\0\u0762\0\u07a8\0\322\0\u0118\0\u015e\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\322\0\u0906\0\u01ea\0\u01ea\0\322\0\u094c\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0230\0\u0a64\0\u0230\0\u0aaa\0\u0af0\0\u0b36"+
    "\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0230\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\322\0\322\0\322\0\322\0\322\0\322"+
    "\0\u1252\0\322\0\322\0\322\0\322\0\322\0\u1298\0\u12de"+
    "\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u0230\0\u143c\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u0230\0\u1626\0\u166c\0\u16b2"+
    "\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2"+
    "\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\322\0\u1c2a\0\u0230\0\u0230\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u0230\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u0230\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274"+
    "\0\u0230\0\u22ba\0\u2300\0\u2346\0\u238c\0\u0230\0\u0230\0\u0230"+
    "\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u0230\0\u0230\0\u24ea\0\u2530"+
    "\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760"+
    "\0\u27a6\0\u27ec\0\u0230\0\u2832\0\u0230\0\u2878\0\u28be\0\u2904"+
    "\0\u294a\0\u2990\0\u29d6\0\u0230\0\u0230\0\u2a1c\0\u0230\0\u2a62"+
    "\0\u2aa8\0\u0230\0\u2aee\0\u0230\0\u0230\0\u2b34\0\u2b7a\0\u2bc0"+
    "\0\322\0\u2c06\0\322\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u0230"+
    "\0\u2f94\0\u0230\0\u2fda\0\u3020\0\u0230\0\u0230\0\u0230\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u0230\0\u320a\0\u3250"+
    "\0\u3296\0\322\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a"+
    "\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a"+
    "\0\u0230\0\u36b0\0\u0230\0\u0230\0\u36f6\0\u373c\0\u3782\0\322"+
    "\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2"+
    "\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u0230"+
    "\0\u3be2\0\u0230\0\u3c28\0\u3c6e\0\322\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\322\0\322\0\u3dcc\0\u3e12\0\u3e58\0\322\0\u3e9e"+
    "\0\u3ee4\0\322\0\u3f2a\0\322\0\u0230\0\u0230\0\u3f70\0\322"+
    "\0\322\0\u3fb6\0\322\0\u3ffc\0\322\0\322\0\u4042\0\u0230"+
    "\0\u4088\0\322\0\u40ce\0\322\0\u4114\0\u415a\0\u41a0\0\u41e6"+
    "\0\322\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\2\4\1\10\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\4"+
    "\3\12\1\30\1\31\1\10\1\32\1\12\1\33\2\12"+
    "\1\34\1\35\1\12\1\36\1\37\1\40\1\12\1\41"+
    "\1\42\1\12\1\43\2\12\1\44\1\12\1\45\2\12"+
    "\1\46\2\12\1\47\1\12\1\50\1\12\1\51\6\12"+
    "\1\52\1\12\1\53\1\54\1\55\16\53\1\4\6\53"+
    "\1\56\55\53\1\57\1\60\1\61\5\57\1\62\1\57"+
    "\1\63\73\57\110\0\1\7\104\0\1\7\110\0\1\10"+
    "\1\64\5\0\1\10\22\0\1\10\53\0\1\65\6\0"+
    "\1\65\22\0\1\65\53\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\55\12\30\0\1\66\61\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\34\12\1\67\20\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\36\12\1\70"+
    "\16\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\6\12\1\71\1\72\1\73\6\12\1\74\1\75\3\12"+
    "\1\76\1\12\1\77\17\12\1\100\6\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\14\12\1\101\1\12"+
    "\1\102\1\103\35\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\14\12\1\104\40\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\2\12\1\105\6\12\1\106"+
    "\23\12\1\107\17\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\15\12\1\110\37\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\2\12\1\111\36\12\1\112"+
    "\13\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\23\12\1\113\10\12\1\114\20\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\34\12\1\115\20\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\30\12\1\116"+
    "\24\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\1\12\1\117\15\12\1\120\10\12\1\121\24\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\17\12\1\122"+
    "\35\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\4\12\1\123\50\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\47\12\1\124\5\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\40\12\1\125\1\126\5\12"+
    "\1\127\5\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\51\12\1\130\3\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\37\12\1\131\15\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\34\12\1\132\20\12"+
    "\21\0\1\133\64\0\1\57\2\0\5\57\1\0\1\57"+
    "\1\0\73\57\2\0\1\134\104\0\1\134\104\0\2\135"+
    "\1\0\5\135\1\136\1\137\1\140\1\141\15\135\1\142"+
    "\1\143\1\144\1\145\1\146\1\147\47\135\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\2\12\1\150\52\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\1\12"+
    "\1\151\53\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\25\12\1\152\27\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\10\12\1\153\44\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\24\12\1\154\30\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\25\12"+
    "\1\155\27\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\16\12\1\156\36\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\37\12\1\157\15\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\10\12\1\160\44\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\31\12"+
    "\1\161\23\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\20\12\1\162\34\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\12\12\1\163\2\12\1\164\37\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\1\12"+
    "\1\165\53\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\17\12\1\166\35\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\6\12\1\167\3\12\1\170\42\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\40\12"+
    "\1\171\14\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\1\12\1\172\40\12\1\173\12\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\10\12\1\174\44\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\34\12"+
    "\1\175\20\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\36\12\1\176\16\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\6\12\1\177\46\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\4\12\1\200\50\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\12\12"+
    "\1\201\42\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\14\12\1\202\40\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\15\12\1\203\37\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\36\12\1\204\16\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\4\12"+
    "\1\205\50\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\50\12\1\206\4\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\42\12\1\207\12\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\2\12\1\210\52\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\52\12"+
    "\1\211\2\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\41\12\1\212\13\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\42\12\1\213\12\12\13\0\1\214"+
    "\22\0\1\214\62\0\1\141\22\0\1\141\53\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\35\12\1\215\17\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\37\12"+
    "\1\216\15\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\25\12\1\217\27\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\11\12\1\220\43\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\17\12\1\221\35\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\27\12"+
    "\1\222\25\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\4\12\1\223\50\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\26\12\1\224\26\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\10\12\1\225\44\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\12\12"+
    "\1\226\42\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\33\12\1\227\21\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\1\0\1\230\13\0\55\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\32\12\1\231\22\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\17\12"+
    "\1\232\35\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\17\12\1\233\35\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\46\12\1\234\6\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\34\12\1\235\20\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\2\12"+
    "\1\236\52\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\23\12\1\237\31\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\41\12\1\240\13\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\1\241\54\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\14\12\1\242"+
    "\40\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\42\12\1\243\12\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\10\12\1\244\44\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\15\12\1\245\37\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\16\12\1\246"+
    "\36\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\45\12\1\247\7\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\47\12\1\250\5\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\50\12\1\251\4\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\40\12\1\252"+
    "\14\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\1\12\1\253\53\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\36\12\1\254\16\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\34\12\1\255\20\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\35\12\1\256"+
    "\17\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\34\12\1\257\20\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\12\12\1\260\42\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\33\12\1\261\21\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\30\12\1\262"+
    "\24\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\12\12\1\263\42\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\23\12\1\264\31\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\17\12\1\265\35\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\10\12\1\266"+
    "\44\12\37\0\1\267\1\0\1\270\2\0\1\271\1\272"+
    "\1\0\1\273\1\0\1\274\2\0\1\275\1\0\1\276"+
    "\2\0\1\277\30\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\16\12\1\300\36\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\20\12\1\301\34\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\6\12\1\302\46\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\34\12"+
    "\1\303\20\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\47\12\1\304\5\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\15\12\1\305\37\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\47\12\1\306\5\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\41\12"+
    "\1\307\13\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\23\12\1\310\31\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\2\12\1\311\52\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\23\12\1\312\31\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\15\12"+
    "\1\313\37\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\12\12\1\314\42\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\34\12\1\315\20\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\40\12\1\316\14\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\43\12"+
    "\1\317\11\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\4\12\1\320\50\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\42\12\1\321\12\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\4\12\1\322\50\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\10\12"+
    "\1\323\44\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\23\12\1\324\31\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\23\12\1\325\31\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\33\12\1\326\21\12"+
    "\37\0\1\327\1\330\1\331\6\0\1\332\1\333\3\0"+
    "\1\334\1\0\1\335\73\0\1\336\1\0\1\337\1\340"+
    "\102\0\1\341\102\0\1\342\111\0\1\343\113\0\1\344"+
    "\112\0\1\345\105\0\1\346\74\0\1\347\41\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\15\12\1\350\37\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\16\12"+
    "\1\351\36\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\16\12\1\352\36\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\37\12\1\353\15\12\4\0\1\12"+
    "\1\0\2\12\3\0\1\12\15\0\37\12\1\354\15\12"+
    "\4\0\1\12\1\0\2\12\3\0\1\12\15\0\47\12"+
    "\1\355\5\12\4\0\1\12\1\0\2\12\3\0\1\12"+
    "\15\0\15\12\1\356\37\12\4\0\1\12\1\0\2\12"+
    "\3\0\1\12\15\0\54\12\1\357\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\1\0\1\360\13\0\55\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\16\12\1\361"+
    "\36\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\46\12\1\362\6\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\37\12\1\363\15\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\47\12\1\364\5\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\16\12\1\365"+
    "\36\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\17\12\1\366\35\12\56\0\1\367\70\0\1\370\121\0"+
    "\1\371\106\0\1\372\76\0\1\373\77\0\1\374\126\0"+
    "\1\375\74\0\1\376\77\0\1\377\112\0\1\u0100\74\0"+
    "\1\u0101\3\0\1\u0102\103\0\1\u0103\103\0\1\u0104\113\0"+
    "\1\u0105\106\0\1\u0106\43\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\21\12\1\u0107\33\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\35\12\1\u0108\17\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\2\12\1\u0109"+
    "\52\12\44\0\1\u010a\45\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\27\12\1\u010b\25\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\37\12\1\u010c\15\12\4\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\35\12\1\u010d"+
    "\17\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\4\12\1\u010e\50\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\31\12\1\u010f\23\12\56\0\1\u0110\71\0"+
    "\1\u0111\113\0\1\u0112\115\0\1\u0113\104\0\1\u0114\67\0"+
    "\1\u0115\107\0\1\u0116\126\0\1\u0117\104\0\1\u0118\72\0"+
    "\1\u0119\105\0\1\u011a\111\0\1\u011b\76\0\1\u011c\106\0"+
    "\1\u011d\106\0\1\u011e\42\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\17\12\1\u011f\35\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\34\12\1\u0120\20\12\45\0"+
    "\1\u0121\44\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\34\12\1\u0122\20\12\4\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\35\12\1\u0123\17\12\4\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\10\12\1\u0124\44\12\43\0"+
    "\1\u0125\126\0\1\u0126\102\0\1\u0127\67\0\1\u0128\116\0"+
    "\1\u0129\101\0\1\u012a\76\0\1\u012b\113\0\1\u012c\107\0"+
    "\1\u012d\73\0\1\u012e\114\0\1\u012f\113\0\1\u0130\77\0"+
    "\1\u0131\102\0\1\u0132\46\0\1\12\1\0\2\12\3\0"+
    "\1\12\15\0\22\12\1\u0133\32\12\46\0\1\u0134\43\0"+
    "\1\12\1\0\2\12\3\0\1\12\15\0\37\12\1\u0135"+
    "\15\12\4\0\1\12\1\0\2\12\3\0\1\12\15\0"+
    "\23\12\1\u0136\31\12\41\0\1\u0137\120\0\1\u0138\105\0"+
    "\1\u0139\115\0\1\u013a\67\0\1\u013b\106\0\1\u013c\105\0"+
    "\1\u013d\104\0\1\u013e\106\0\1\u013f\42\0\1\12\1\0"+
    "\2\12\3\0\1\12\15\0\23\12\1\u0140\31\12\47\0"+
    "\1\u0141\106\0\1\u0142\107\0\1\u0143\113\0\1\u0144\107\0"+
    "\1\u0145\73\0\1\u0146\76\0\1\u0147\117\0\1\u0148\106\0"+
    "\1\u0149\105\0\1\u014a\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16940];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\11\2\1\1\11\3\1\5\11\1\1"+
    "\7\11\23\1\1\11\6\1\1\11\1\1\1\0\1\1"+
    "\1\11\44\1\6\11\1\1\5\11\45\1\1\11\13\1"+
    "\1\0\36\1\11\0\27\1\2\0\1\11\1\0\1\11"+
    "\14\0\10\1\1\0\6\1\3\0\1\11\14\0\3\1"+
    "\1\0\5\1\1\11\1\0\1\1\14\0\2\1\1\0"+
    "\3\1\1\11\3\0\1\1\2\11\3\0\1\11\2\0"+
    "\1\11\1\1\1\11\2\1\1\0\2\11\1\0\1\11"+
    "\1\0\2\11\1\0\1\1\1\0\1\11\1\0\1\11"+
    "\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();

static LinkedList<Erro_r> listaErrores= new LinkedList();

  public void adderror(int fila, int columna, String valor){
       Erro_r n = new Erro_r(fila,columna,valor,"");
       listaErrores.add(n);
  }

/*public void agregar(String Token,String Lexema,int Fila, int Columna){
  Simbolo simbolo= new Simbolo(Token,Lexema,Fila,Columna);
  TablaSimbolos.add(simbolo);	
}
  

public LinkedList<Simbolo> retornarTablaSimbolos(){
     return AnalizadorLexico.TablaSimbolos;
}*/

public LinkedList<Erro_r> retornarErrores(){       
	return AnalizadorLexico.listaErrores;
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AL_HTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AL_HTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2308) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { return new Symbol(sym.FCT, new token(yycolumn, yyline, yytext()));
          }
        case 95: break;
        case 93: 
          { return new Symbol(sym.FCAJA_TEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 96: break;
        case 6: 
          { yybegin(STRING); string.setLength(0);
          }
        case 97: break;
        case 62: 
          { return new Symbol(sym.IIMAGEN, new token(yycolumn, yyline, yytext()));
          }
        case 98: break;
        case 80: 
          { return new Symbol(sym.FBOTON, new token(yycolumn, yyline, yytext()));
          }
        case 99: break;
        case 39: 
          { return new Symbol(sym.INT, new token(yycolumn, yyline, yytext()));
          }
        case 100: break;
        case 68: 
          { return new Symbol(sym.FCJS, new token(yycolumn, yyline, yytext()));
          }
        case 101: break;
        case 94: 
          { return new Symbol(sym.FENCABEZADO, new token(yycolumn, yyline, yytext()));
          }
        case 102: break;
        case 75: 
          { return new Symbol(sym.CENT, new token(yycolumn, yyline, yytext()));
          }
        case 103: break;
        case 91: 
          { return new Symbol(sym.FTEXTO_A, new token(yycolumn, yyline, yytext()));
          }
        case 104: break;
        case 42: 
          { return new Symbol(sym.ICAJA, new token(yycolumn, yyline, yytext()));
          }
        case 105: break;
        case 5: 
          { return new Symbol(sym.I_D, new token(yycolumn, yyline, yytext()));
          }
        case 106: break;
        case 25: 
          { return new Symbol(sym.ICT, new token(yycolumn, yyline, yytext()));
          }
        case 107: break;
        case 71: 
          { return new Symbol(sym.DER, new token(yycolumn, yyline, yytext()));
          }
        case 108: break;
        case 56: 
          { return new Symbol(sym.CLICK, new token(yycolumn, yyline, yytext()));
          }
        case 109: break;
        case 24: 
          { yybegin(COMENTARIO);
          }
        case 110: break;
        case 34: 
          { string.append( '\t' );
          }
        case 111: break;
        case 65: 
          { return new Symbol(sym.IOPCION, new token(yycolumn, yyline, yytext()));
          }
        case 112: break;
        case 49: 
          { return new Symbol(sym.ITEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 113: break;
        case 44: 
          { return new Symbol(sym.ALTO, new token(yycolumn, yyline, yytext()));
          }
        case 114: break;
        case 4: 
          { return new Symbol(sym.NUM, new token(yycolumn, yyline, yytext()));
          }
        case 115: break;
        case 73: 
          { return new Symbol(sym.FCAJA, new token(yycolumn, yyline, yytext()));
          }
        case 116: break;
        case 23: 
          { yybegin(YYINITIAL); return new Symbol(sym.STRING_LITERAL, new token(yycolumn, yyline, string.toString()));
          }
        case 117: break;
        case 88: 
          { return new Symbol(sym.FENLACE, new token(yycolumn, yyline, yytext()));
          }
        case 118: break;
        case 45: 
          { return new Symbol(sym.CCSS, new token(yycolumn, yyline, yytext()));
          }
        case 119: break;
        case 2: 
          { adderror(yyline,yycolumn,yytext());
          }
        case 120: break;
        case 85: 
          { return new Symbol(sym.FCUERPO, new token(yycolumn, yyline, yytext()));
          }
        case 121: break;
        case 35: 
          { string.append( '\n' );
          }
        case 122: break;
        case 40: 
          { return new Symbol(sym.RUTA, new token(yycolumn, yyline, yytext()));
          }
        case 123: break;
        case 8: 
          { return new Symbol(sym.MENOS, new token(yycolumn, yyline, yytext()));
          }
        case 124: break;
        case 48: 
          { return new Symbol(sym.IHTML, new token(yycolumn, yyline, yytext()));
          }
        case 125: break;
        case 41: 
          { return new Symbol(sym.ICSS, new token(yycolumn, yyline, yytext()));
          }
        case 126: break;
        case 86: 
          { return new Symbol(sym.FTITULO, new token(yycolumn, yyline, yytext()));
          }
        case 127: break;
        case 27: 
          { return new Symbol(sym.ID, new token(yycolumn, yyline, yytext()));
          }
        case 128: break;
        case 9: 
          { return new Symbol(sym.POR, new token(yycolumn, yyline, yytext()));
          }
        case 129: break;
        case 43: 
          { return new Symbol(sym.CHAR, new token(yycolumn, yyline, yytext()));
          }
        case 130: break;
        case 81: 
          { return new Symbol(sym.FPANEL, new token(yycolumn, yyline, yytext()));
          }
        case 131: break;
        case 76: 
          { return new Symbol(sym.FHTML, new token(yycolumn, yyline, yytext()));
          }
        case 132: break;
        case 14: 
          { return new Symbol(sym.IGUAL, new token(yycolumn, yyline, yytext()));
          }
        case 133: break;
        case 52: 
          { return new Symbol(sym.ANCHO, new token(yycolumn, yyline, yytext()));
          }
        case 134: break;
        case 82: 
          { return new Symbol(sym.ISALTOF, new token(yycolumn, yyline, yytext()));
          }
        case 135: break;
        case 20: 
          { System.out.println ("Una linea de comentario");
          }
        case 136: break;
        case 84: 
          { return new Symbol(sym.ICAJA_TEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 137: break;
        case 53: 
          { return new Symbol(sym.IBOTON, new token(yycolumn, yyline, yytext()));
          }
        case 138: break;
        case 69: 
          { return new Symbol(sym.BOOLEAN, new token(yycolumn, yyline, yytext()));
          }
        case 139: break;
        case 47: 
          { return new Symbol(sym.FONDO, new token(yycolumn, yyline, yytext()));
          }
        case 140: break;
        case 50: 
          { return new Symbol(sym.ITABLA, new token(yycolumn, yyline, yytext()));
          }
        case 141: break;
        case 66: 
          { return new Symbol(sym.STRING, new token(yycolumn, yyline, yytext()));
          }
        case 142: break;
        case 90: 
          { return new Symbol(sym.IENCABEZADO, new token(yycolumn, yyline, yytext()));
          }
        case 143: break;
        case 38: 
          { return new Symbol(sym.ICJS, new token(yycolumn, yyline, yytext()));
          }
        case 144: break;
        case 37: 
          { string.append( '\r' );
          }
        case 145: break;
        case 33: 
          { string.append( '\b' );
          }
        case 146: break;
        case 79: 
          { return new Symbol(sym.FFIL_T, new token(yycolumn, yyline, yytext()));
          }
        case 147: break;
        case 70: 
          { return new Symbol(sym.ISPINNER, new token(yycolumn, yyline, yytext()));
          }
        case 148: break;
        case 55: 
          { return new Symbol(sym.GRUPO, new token(yycolumn, yyline, yytext()));
          }
        case 149: break;
        case 89: 
          { return new Symbol(sym.FOPCION, new token(yycolumn, yyline, yytext()));
          }
        case 150: break;
        case 87: 
          { return new Symbol(sym.FIMAGEN, new token(yycolumn, yyline, yytext()));
          }
        case 151: break;
        case 1: 
          { return new Symbol(sym.DECIMAL, new token(yycolumn, yyline, yytext()));
          }
        case 152: break;
        case 11: 
          { return new Symbol(sym.MENQ, new token(yycolumn, yyline, yytext()));
          }
        case 153: break;
        case 22: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 154: break;
        case 13: 
          { return new Symbol(sym.PYC, new token(yycolumn, yyline, yytext()));
          }
        case 155: break;
        case 83: 
          { return new Symbol(sym.IZQ, new token(yycolumn, yyline, yytext()));
          }
        case 156: break;
        case 29: 
          { string.append( '\"' );
          }
        case 157: break;
        case 30: 
          { string.append( '\'' );
          }
        case 158: break;
        case 31: 
          { string.append( '\\' );
          }
        case 159: break;
        case 74: 
          { return new Symbol(sym.ALINEADO, new token(yycolumn, yyline, yytext()));
          }
        case 160: break;
        case 28: 
          { yybegin(YYINITIAL);
          }
        case 161: break;
        case 17: 
          { return new Symbol(sym.ALLA, new token(yycolumn, yyline, yytext()));
          }
        case 162: break;
        case 12: 
          { return new Symbol(sym.MAYQ, new token(yycolumn, yyline, yytext()));
          }
        case 163: break;
        case 72: 
          { return new Symbol(sym.FCSS, new token(yycolumn, yyline, yytext()));
          }
        case 164: break;
        case 46: 
          { return new Symbol(sym.VOID, new token(yycolumn, yyline, yytext()));
          }
        case 165: break;
        case 77: 
          { return new Symbol(sym.FTEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 166: break;
        case 18: 
          { return new Symbol(sym.CLLA, new token(yycolumn, yyline, yytext()));
          }
        case 167: break;
        case 10: 
          { return new Symbol(sym.DIV, new token(yycolumn, yyline, yytext()));
          }
        case 168: break;
        case 36: 
          { string.append( '\f' );
          }
        case 169: break;
        case 54: 
          { return new Symbol(sym.IPANEL, new token(yycolumn, yyline, yytext()));
          }
        case 170: break;
        case 92: 
          { return new Symbol(sym.FSPINNER, new token(yycolumn, yyline, yytext()));
          }
        case 171: break;
        case 59: 
          { return new Symbol(sym.ITITULO, new token(yycolumn, yyline, yytext()));
          }
        case 172: break;
        case 67: 
          { return new Symbol(sym.ITEXTO_A, new token(yycolumn, yyline, yytext()));
          }
        case 173: break;
        case 7: 
          { return new Symbol(sym.MAS, new token(yycolumn, yyline, yytext()));
          }
        case 174: break;
        case 61: 
          { return new Symbol(sym.FCB, new token(yycolumn, yyline, yytext()));
          }
        case 175: break;
        case 63: 
          { return new Symbol(sym.IENLACE, new token(yycolumn, yyline, yytext()));
          }
        case 176: break;
        case 58: 
          { return new Symbol(sym.ICUERPO, new token(yycolumn, yyline, yytext()));
          }
        case 177: break;
        case 21: 
          { string.append( yytext() );
          }
        case 178: break;
        case 15: 
          { return new Symbol(sym.APAR, new token(yycolumn, yyline, yytext()));
          }
        case 179: break;
        case 3: 
          { /* ignorar */
          }
        case 180: break;
        case 32: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
          }
        case 181: break;
        case 64: 
          { return new Symbol(sym.DOUBLE, new token(yycolumn, yyline, yytext()));
          }
        case 182: break;
        case 57: 
          { return new Symbol(sym.VALOR, new token(yycolumn, yyline, yytext()));
          }
        case 183: break;
        case 16: 
          { return new Symbol(sym.CPAR, new token(yycolumn, yyline, yytext()));
          }
        case 184: break;
        case 78: 
          { return new Symbol(sym.FTABLA, new token(yycolumn, yyline, yytext()));
          }
        case 185: break;
        case 51: 
          { return new Symbol(sym.IFIL_T, new token(yycolumn, yyline, yytext()));
          }
        case 186: break;
        case 19: 
          { 
          }
        case 187: break;
        case 26: 
          { return new Symbol(sym.ICB, new token(yycolumn, yyline, yytext()));
          }
        case 188: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
