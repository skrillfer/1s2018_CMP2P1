/* The following code was generated by JFlex 1.4.3 on 12/02/18 07:12 PM */


package Analizadores;
import Estructuras.*;
import java.util.LinkedList;
import java_cup.runtime.*;

import Errores.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/02/18 07:12 PM from the specification file
 * <tt>src/Analizadores/Lex_HTML.flex</tt>
 */
public class AL_HTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\0"+
    "\1\10\1\0\1\6\3\0\1\22\1\11\1\17\1\16\1\0\1\14"+
    "\1\5\1\13\12\4\1\0\1\20\1\12\1\21\1\15\2\0\1\36"+
    "\1\37\1\25\1\41\1\35\1\32\1\51\1\26\1\33\1\43\1\6"+
    "\1\31\1\30\1\34\1\42\1\47\1\6\1\46\1\44\1\27\1\45"+
    "\1\76\1\6\1\50\1\6\1\40\4\0\1\52\1\0\1\62\1\77"+
    "\1\63\1\56\1\72\1\53\1\100\1\71\1\65\1\6\1\66\1\64"+
    "\1\6\1\55\1\54\1\70\1\75\1\57\1\73\1\61\1\60\1\67"+
    "\3\6\1\74\1\23\1\7\1\24\1\0\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0"+
    "\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6"+
    "\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6"+
    "\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6"+
    "\4\0\13\7\5\0\53\6\25\7\12\4\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\4\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\131\6\13\7\1\6\16\0\12\4\41\6\11\7\2\6\4\0"+
    "\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7"+
    "\22\0\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0"+
    "\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0"+
    "\12\4\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\4\4\6\7\0\1\6"+
    "\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6"+
    "\7\0\12\4\2\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\4\1\0\1\6\17\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\4\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7"+
    "\16\0\12\4\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7"+
    "\2\0\12\4\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0"+
    "\12\4\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0"+
    "\1\7\10\0\2\6\2\7\2\0\12\4\12\0\6\6\2\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\4"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\4\2\0\4\6"+
    "\40\0\1\6\27\0\2\7\6\0\12\4\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0"+
    "\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7"+
    "\1\6\12\4\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\15\6\14\7\1\6\1\7\12\4\4\7\2\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\4\41\0\3\7\2\0\12\4\6\0\130\6\10\0\51\6"+
    "\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\4\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6"+
    "\2\7\6\0\12\4\46\0\27\6\5\7\4\0\65\6\12\7\1\0"+
    "\35\7\2\0\1\7\12\4\6\0\12\4\15\0\1\6\130\0\5\7"+
    "\57\6\21\7\7\6\4\0\12\4\21\0\11\7\14\0\3\7\36\6"+
    "\15\7\2\6\12\4\54\6\16\7\14\0\44\6\24\7\10\0\12\4"+
    "\3\0\3\6\12\4\44\6\122\0\3\7\1\0\25\7\4\6\1\7"+
    "\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0"+
    "\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0"+
    "\1\6\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0"+
    "\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0"+
    "\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0"+
    "\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0"+
    "\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7"+
    "\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0"+
    "\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0"+
    "\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0"+
    "\20\6\12\4\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6"+
    "\7\0\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6"+
    "\1\0\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6"+
    "\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6"+
    "\21\7\13\0\12\4\6\0\22\7\6\6\3\0\1\6\4\0\12\4"+
    "\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6"+
    "\16\7\16\0\1\6\12\4\46\0\51\6\16\7\11\0\3\6\1\7"+
    "\10\6\2\7\2\0\12\4\6\0\27\6\3\0\1\6\1\7\4\0"+
    "\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7"+
    "\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0"+
    "\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0"+
    "\43\6\10\7\1\0\2\7\2\0\12\4\6\0\u2ba4\6\14\0\27\6"+
    "\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7"+
    "\4\0\1\6\13\0\12\4\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\7\1\0\1\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\3\3\1\4\1\2\1\5\1\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\23\5\1\0\1\1\1\0"+
    "\1\22\1\0\2\5\1\23\1\5\1\24\11\5\1\25"+
    "\25\5\1\0\3\5\1\26\10\5\1\27\27\5\1\0"+
    "\1\30\1\5\1\31\1\5\1\32\4\5\1\0\4\5"+
    "\1\33\14\5\1\34\1\35\4\5\1\36\1\0\1\37"+
    "\3\5\1\40\1\41\1\42\11\0\3\5\1\43\1\5"+
    "\1\44\6\5\1\45\1\46\1\47\1\5\1\50\2\5"+
    "\1\51\1\0\1\5\1\52\1\53\1\5\2\0\1\54"+
    "\1\0\1\55\14\0\1\56\1\5\1\57\2\5\1\60"+
    "\1\61\1\0\1\5\1\62\3\5\1\0\1\5\1\63"+
    "\3\0\1\64\14\0\2\5\1\65\1\0\1\66\1\67"+
    "\2\5\1\70\1\5\1\71\1\0\1\72\14\0\1\5"+
    "\1\73\1\0\1\74\2\5\1\75\3\0\1\76\1\77"+
    "\1\100\3\0\1\101\2\0\1\102\1\5\1\103\1\104"+
    "\1\105\1\0\1\106\1\107\1\0\1\110\1\0\1\111"+
    "\1\112\1\0\1\113\1\0\1\114\1\0\1\115\4\0"+
    "\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\202\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\202\0\u0249\0\202\0\202\0\202\0\202"+
    "\0\202\0\202\0\202\0\202\0\202\0\202\0\u028a\0\u02cb"+
    "\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3"+
    "\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db"+
    "\0\u071c\0\u0186\0\u0186\0\u0208\0\202\0\u075d\0\u079e\0\u07df"+
    "\0\u01c7\0\u0820\0\u01c7\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u01c7\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34"+
    "\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u01c7\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u01c7"+
    "\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2"+
    "\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da"+
    "\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2"+
    "\0\u01c7\0\u1923\0\u1964\0\u19a5\0\u01c7\0\u19e6\0\u1a27\0\u1a68"+
    "\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u01c7\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u01c7\0\u01c7\0\u1f3b\0\u1f7c\0\u1fbd"+
    "\0\u1ffe\0\u01c7\0\u203f\0\u01c7\0\u2080\0\u20c1\0\u2102\0\u2143"+
    "\0\u01c7\0\u01c7\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u01c7\0\u2490"+
    "\0\u01c7\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u01c7"+
    "\0\u01c7\0\u01c7\0\u2657\0\u01c7\0\u2698\0\u26d9\0\u01c7\0\u271a"+
    "\0\u275b\0\u01c7\0\u01c7\0\u279c\0\u27dd\0\u281e\0\202\0\u285f"+
    "\0\202\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26"+
    "\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u01c7\0\u2bac\0\u01c7"+
    "\0\u2bed\0\u2c2e\0\u01c7\0\u01c7\0\u2c6f\0\u2cb0\0\u01c7\0\u2cf1"+
    "\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u01c7\0\u2e36\0\u2e77\0\u2eb8"+
    "\0\202\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f"+
    "\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u01c7"+
    "\0\u3287\0\u01c7\0\u01c7\0\u32c8\0\u3309\0\202\0\u334a\0\202"+
    "\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552"+
    "\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u01c7"+
    "\0\u375a\0\u01c7\0\u379b\0\u37dc\0\202\0\u381d\0\u385e\0\u389f"+
    "\0\u38e0\0\202\0\202\0\u3921\0\u3962\0\u39a3\0\202\0\u39e4"+
    "\0\u3a25\0\202\0\u3a66\0\202\0\u01c7\0\u01c7\0\u3aa7\0\202"+
    "\0\202\0\u3ae8\0\202\0\u3b29\0\202\0\202\0\u3b6a\0\u01c7"+
    "\0\u3bab\0\202\0\u3bec\0\202\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0"+
    "\0\202\0\202";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\11\1\30"+
    "\2\11\1\31\1\32\1\11\1\33\1\34\1\35\1\11"+
    "\1\36\1\37\1\11\1\40\2\11\1\41\1\11\1\42"+
    "\1\11\1\43\2\11\1\44\1\45\3\11\1\46\1\11"+
    "\1\47\1\11\1\50\6\11\1\51\2\11\1\3\1\4"+
    "\1\5\1\6\75\3\103\0\1\6\77\0\1\6\103\0"+
    "\1\7\1\52\77\0\1\53\100\0\1\11\1\0\2\11"+
    "\15\0\54\11\10\54\1\55\1\0\10\54\1\0\56\54"+
    "\13\0\1\56\71\0\1\11\1\0\2\11\15\0\1\57"+
    "\1\60\1\61\6\11\1\62\1\63\3\11\1\64\1\11"+
    "\1\65\23\11\1\66\7\11\4\0\1\11\1\0\2\11"+
    "\15\0\6\11\1\67\1\11\1\70\1\71\42\11\4\0"+
    "\1\11\1\0\2\11\15\0\6\11\1\72\45\11\4\0"+
    "\1\11\1\0\2\11\15\0\3\11\1\73\24\11\1\74"+
    "\1\75\22\11\4\0\1\11\1\0\2\11\15\0\7\11"+
    "\1\76\44\11\4\0\1\11\1\0\2\11\15\0\30\11"+
    "\1\77\6\11\1\100\14\11\4\0\1\11\1\0\2\11"+
    "\15\0\15\11\1\101\11\11\1\102\24\11\4\0\1\11"+
    "\1\0\2\11\15\0\27\11\1\103\24\11\4\0\1\11"+
    "\1\0\2\11\15\0\22\11\1\104\31\11\4\0\1\11"+
    "\1\0\2\11\15\0\11\11\1\105\10\11\1\106\11\11"+
    "\1\107\17\11\4\0\1\11\1\0\2\11\15\0\11\11"+
    "\1\110\42\11\4\0\1\11\1\0\2\11\15\0\32\11"+
    "\1\111\21\11\4\0\1\11\1\0\2\11\15\0\27\11"+
    "\1\112\24\11\4\0\1\11\1\0\2\11\15\0\45\11"+
    "\1\113\6\11\4\0\1\11\1\0\2\11\15\0\33\11"+
    "\1\114\20\11\4\0\1\11\1\0\2\11\15\0\36\11"+
    "\1\115\1\116\5\11\1\117\6\11\4\0\1\11\1\0"+
    "\2\11\15\0\47\11\1\120\4\11\4\0\1\11\1\0"+
    "\2\11\15\0\35\11\1\121\16\11\4\0\1\11\1\0"+
    "\2\11\15\0\27\11\1\122\24\11\13\0\1\123\71\0"+
    "\1\11\1\0\2\11\15\0\17\11\1\124\34\11\4\0"+
    "\1\11\1\0\2\11\15\0\2\11\1\125\51\11\4\0"+
    "\1\11\1\0\2\11\15\0\16\11\1\126\35\11\4\0"+
    "\1\11\1\0\2\11\15\0\17\11\1\127\34\11\4\0"+
    "\1\11\1\0\2\11\15\0\10\11\1\130\43\11\4\0"+
    "\1\11\1\0\2\11\15\0\35\11\1\131\16\11\4\0"+
    "\1\11\1\0\2\11\15\0\2\11\1\132\51\11\4\0"+
    "\1\11\1\0\2\11\15\0\23\11\1\133\30\11\4\0"+
    "\1\11\1\0\2\11\15\0\12\11\1\134\41\11\4\0"+
    "\1\11\1\0\2\11\15\0\4\11\1\135\2\11\1\136"+
    "\44\11\4\0\1\11\1\0\2\11\15\0\11\11\1\137"+
    "\42\11\4\0\1\11\1\0\2\11\15\0\34\11\1\140"+
    "\17\11\4\0\1\11\1\0\2\11\15\0\1\141\3\11"+
    "\1\142\47\11\4\0\1\11\1\0\2\11\15\0\36\11"+
    "\1\143\15\11\4\0\1\11\1\0\2\11\15\0\34\11"+
    "\1\144\3\11\1\145\13\11\4\0\1\11\1\0\2\11"+
    "\15\0\2\11\1\146\51\11\4\0\1\11\1\0\2\11"+
    "\15\0\27\11\1\147\24\11\4\0\1\11\1\0\2\11"+
    "\15\0\33\11\1\150\20\11\4\0\1\11\1\0\2\11"+
    "\15\0\1\151\53\11\4\0\1\11\1\0\2\11\15\0"+
    "\4\11\1\152\47\11\4\0\1\11\1\0\2\11\15\0"+
    "\6\11\1\153\45\11\4\0\1\11\1\0\2\11\15\0"+
    "\32\11\1\154\21\11\4\0\1\11\1\0\2\11\15\0"+
    "\7\11\1\155\44\11\4\0\1\11\1\0\2\11\15\0"+
    "\33\11\1\156\20\11\4\0\1\11\1\0\2\11\15\0"+
    "\30\11\1\157\23\11\4\0\1\11\1\0\2\11\15\0"+
    "\32\11\1\160\21\11\4\0\1\11\1\0\2\11\15\0"+
    "\34\11\1\161\17\11\4\0\1\11\1\0\2\11\15\0"+
    "\46\11\1\162\5\11\4\0\1\11\1\0\2\11\15\0"+
    "\40\11\1\163\13\11\4\0\1\11\1\0\2\11\15\0"+
    "\30\11\1\164\23\11\4\0\1\11\1\0\2\11\15\0"+
    "\50\11\1\165\3\11\4\0\1\11\1\0\2\11\15\0"+
    "\37\11\1\166\14\11\4\0\1\11\1\0\2\11\15\0"+
    "\40\11\1\167\13\11\14\0\1\170\70\0\1\11\1\0"+
    "\2\11\15\0\17\11\1\171\34\11\4\0\1\11\1\0"+
    "\2\11\15\0\3\11\1\172\50\11\4\0\1\11\1\0"+
    "\2\11\15\0\11\11\1\173\42\11\4\0\1\11\1\0"+
    "\2\11\15\0\21\11\1\174\32\11\4\0\1\11\1\0"+
    "\2\11\15\0\32\11\1\175\21\11\4\0\1\11\1\0"+
    "\2\11\15\0\20\11\1\176\33\11\4\0\1\11\1\0"+
    "\2\11\15\0\2\11\1\177\51\11\4\0\1\11\1\0"+
    "\2\11\15\0\4\11\1\200\47\11\4\0\1\11\1\0"+
    "\2\11\15\0\25\11\1\201\26\11\4\0\1\11\1\0"+
    "\2\11\4\0\1\202\10\0\54\11\4\0\1\11\1\0"+
    "\2\11\15\0\24\11\1\203\27\11\4\0\1\11\1\0"+
    "\2\11\15\0\11\11\1\204\42\11\4\0\1\11\1\0"+
    "\2\11\15\0\11\11\1\205\42\11\4\0\1\11\1\0"+
    "\2\11\15\0\44\11\1\206\7\11\4\0\1\11\1\0"+
    "\2\11\15\0\27\11\1\207\24\11\4\0\1\11\1\0"+
    "\2\11\15\0\30\11\1\210\23\11\4\0\1\11\1\0"+
    "\2\11\15\0\15\11\1\211\36\11\4\0\1\11\1\0"+
    "\2\11\15\0\37\11\1\212\14\11\4\0\1\11\1\0"+
    "\2\11\15\0\52\11\1\213\1\11\4\0\1\11\1\0"+
    "\2\11\15\0\6\11\1\214\45\11\4\0\1\11\1\0"+
    "\2\11\15\0\2\11\1\215\51\11\4\0\1\11\1\0"+
    "\2\11\15\0\7\11\1\216\44\11\4\0\1\11\1\0"+
    "\2\11\15\0\40\11\1\217\13\11\4\0\1\11\1\0"+
    "\2\11\15\0\10\11\1\220\43\11\4\0\1\11\1\0"+
    "\2\11\15\0\43\11\1\221\10\11\4\0\1\11\1\0"+
    "\2\11\15\0\31\11\1\222\22\11\4\0\1\11\1\0"+
    "\2\11\15\0\45\11\1\223\6\11\4\0\1\11\1\0"+
    "\2\11\15\0\35\11\1\224\16\11\4\0\1\11\1\0"+
    "\2\11\15\0\46\11\1\225\5\11\4\0\1\11\1\0"+
    "\2\11\15\0\36\11\1\226\15\11\4\0\1\11\1\0"+
    "\2\11\15\0\34\11\1\227\17\11\4\0\1\11\1\0"+
    "\2\11\15\0\33\11\1\230\20\11\4\0\1\11\1\0"+
    "\2\11\15\0\27\11\1\231\24\11\4\0\1\11\1\0"+
    "\2\11\15\0\31\11\1\232\22\11\14\170\1\233\64\170"+
    "\4\0\1\11\1\0\2\11\15\0\4\11\1\234\47\11"+
    "\4\0\1\11\1\0\2\11\15\0\25\11\1\235\26\11"+
    "\4\0\1\11\1\0\2\11\15\0\22\11\1\236\31\11"+
    "\4\0\1\11\1\0\2\11\15\0\4\11\1\237\47\11"+
    "\4\0\1\11\1\0\2\11\15\0\15\11\1\240\36\11"+
    "\4\0\1\11\1\0\2\11\15\0\11\11\1\241\42\11"+
    "\4\0\1\11\1\0\2\11\15\0\2\11\1\242\51\11"+
    "\25\0\1\243\1\0\1\244\2\0\1\245\1\246\1\0"+
    "\1\247\1\0\1\250\2\0\1\251\1\0\1\252\2\0"+
    "\1\253\35\0\1\11\1\0\2\11\15\0\10\11\1\254"+
    "\43\11\4\0\1\11\1\0\2\11\15\0\12\11\1\255"+
    "\41\11\4\0\1\11\1\0\2\11\15\0\1\256\53\11"+
    "\4\0\1\11\1\0\2\11\15\0\27\11\1\257\24\11"+
    "\4\0\1\11\1\0\2\11\15\0\45\11\1\260\6\11"+
    "\4\0\1\11\1\0\2\11\15\0\7\11\1\261\44\11"+
    "\4\0\1\11\1\0\2\11\15\0\45\11\1\262\6\11"+
    "\4\0\1\11\1\0\2\11\15\0\37\11\1\263\14\11"+
    "\4\0\1\11\1\0\2\11\15\0\15\11\1\264\36\11"+
    "\4\0\1\11\1\0\2\11\15\0\15\11\1\265\36\11"+
    "\4\0\1\11\1\0\2\11\15\0\7\11\1\266\44\11"+
    "\4\0\1\11\1\0\2\11\15\0\30\11\1\267\23\11"+
    "\4\0\1\11\1\0\2\11\15\0\4\11\1\270\47\11"+
    "\4\0\1\11\1\0\2\11\15\0\27\11\1\271\24\11"+
    "\4\0\1\11\1\0\2\11\15\0\27\11\1\272\24\11"+
    "\4\0\1\11\1\0\2\11\15\0\36\11\1\273\15\11"+
    "\4\0\1\11\1\0\2\11\15\0\41\11\1\274\12\11"+
    "\4\0\1\11\1\0\2\11\15\0\32\11\1\275\21\11"+
    "\4\0\1\11\1\0\2\11\15\0\40\11\1\276\13\11"+
    "\4\0\1\11\1\0\2\11\15\0\32\11\1\277\21\11"+
    "\13\170\1\300\1\233\64\170\4\0\1\11\1\0\2\11"+
    "\15\0\2\11\1\301\51\11\4\0\1\11\1\0\2\11"+
    "\15\0\15\11\1\302\36\11\4\0\1\11\1\0\2\11"+
    "\15\0\15\11\1\303\36\11\4\0\1\11\1\0\2\11"+
    "\15\0\25\11\1\304\26\11\25\0\1\305\1\306\1\307"+
    "\6\0\1\310\1\311\3\0\1\312\1\0\1\313\66\0"+
    "\1\314\1\0\1\315\1\316\75\0\1\317\75\0\1\320"+
    "\104\0\1\321\106\0\1\322\105\0\1\323\100\0\1\324"+
    "\67\0\1\325\46\0\1\11\1\0\2\11\15\0\7\11"+
    "\1\326\44\11\4\0\1\11\1\0\2\11\15\0\10\11"+
    "\1\327\43\11\4\0\1\11\1\0\2\11\15\0\10\11"+
    "\1\330\43\11\4\0\1\11\1\0\2\11\15\0\35\11"+
    "\1\331\16\11\4\0\1\11\1\0\2\11\15\0\35\11"+
    "\1\332\16\11\4\0\1\11\1\0\2\11\15\0\45\11"+
    "\1\333\6\11\4\0\1\11\1\0\2\11\15\0\7\11"+
    "\1\334\44\11\4\0\1\11\1\0\2\11\4\0\1\335"+
    "\10\0\54\11\4\0\1\11\1\0\2\11\15\0\10\11"+
    "\1\336\43\11\4\0\1\11\1\0\2\11\15\0\53\11"+
    "\1\337\4\0\1\11\1\0\2\11\15\0\44\11\1\340"+
    "\7\11\4\0\1\11\1\0\2\11\15\0\35\11\1\341"+
    "\16\11\4\0\1\11\1\0\2\11\15\0\45\11\1\342"+
    "\6\11\13\170\1\343\1\233\64\170\4\0\1\11\1\0"+
    "\2\11\15\0\10\11\1\344\43\11\4\0\1\11\1\0"+
    "\2\11\15\0\11\11\1\345\42\11\44\0\1\346\63\0"+
    "\1\347\114\0\1\350\101\0\1\351\71\0\1\352\72\0"+
    "\1\353\121\0\1\354\67\0\1\355\72\0\1\356\105\0"+
    "\1\357\67\0\1\360\3\0\1\361\76\0\1\362\76\0"+
    "\1\363\106\0\1\364\101\0\1\365\50\0\1\11\1\0"+
    "\2\11\15\0\13\11\1\366\40\11\4\0\1\11\1\0"+
    "\2\11\15\0\31\11\1\367\22\11\4\0\1\11\1\0"+
    "\2\11\15\0\30\11\1\370\23\11\32\0\1\371\52\0"+
    "\1\11\1\0\2\11\15\0\21\11\1\372\32\11\4\0"+
    "\1\11\1\0\2\11\15\0\35\11\1\373\16\11\4\0"+
    "\1\11\1\0\2\11\15\0\31\11\1\374\22\11\4\0"+
    "\1\11\1\0\2\11\15\0\32\11\1\375\21\11\14\170"+
    "\1\233\1\376\63\170\4\0\1\11\1\0\2\11\15\0"+
    "\23\11\1\377\30\11\44\0\1\u0100\64\0\1\u0101\106\0"+
    "\1\u0102\110\0\1\u0103\77\0\1\u0104\62\0\1\u0105\102\0"+
    "\1\u0106\121\0\1\u0107\77\0\1\u0108\65\0\1\u0109\100\0"+
    "\1\u010a\104\0\1\u010b\71\0\1\u010c\101\0\1\u010d\101\0"+
    "\1\u010e\47\0\1\11\1\0\2\11\15\0\11\11\1\u010f"+
    "\42\11\4\0\1\11\1\0\2\11\15\0\27\11\1\u0110"+
    "\24\11\33\0\1\u0111\51\0\1\11\1\0\2\11\15\0"+
    "\27\11\1\u0112\24\11\4\0\1\11\1\0\2\11\15\0"+
    "\31\11\1\u0113\22\11\4\0\1\11\1\0\2\11\15\0"+
    "\2\11\1\u0114\51\11\31\0\1\u0115\121\0\1\u0116\75\0"+
    "\1\u0117\62\0\1\u0118\111\0\1\u0119\74\0\1\u011a\71\0"+
    "\1\u011b\106\0\1\u011c\102\0\1\u011d\66\0\1\u011e\107\0"+
    "\1\u011f\106\0\1\u0120\72\0\1\u0121\75\0\1\u0122\53\0"+
    "\1\11\1\0\2\11\15\0\14\11\1\u0123\37\11\34\0"+
    "\1\u0124\50\0\1\11\1\0\2\11\15\0\35\11\1\u0125"+
    "\16\11\4\0\1\11\1\0\2\11\15\0\15\11\1\u0126"+
    "\36\11\27\0\1\u0127\113\0\1\u0128\100\0\1\u0129\110\0"+
    "\1\u012a\62\0\1\u012b\101\0\1\u012c\100\0\1\u012d\77\0"+
    "\1\u012e\101\0\1\u012f\47\0\1\11\1\0\2\11\15\0"+
    "\15\11\1\u0130\36\11\35\0\1\u0131\101\0\1\u0132\102\0"+
    "\1\u0133\106\0\1\u0134\102\0\1\u0135\66\0\1\u0136\71\0"+
    "\1\u0137\112\0\1\u0138\101\0\1\u0139\100\0\1\u013a\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15665];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\2\1\1\11\4\1\1\11\1\1"+
    "\12\11\23\1\1\0\1\1\1\0\1\11\1\0\44\1"+
    "\1\0\44\1\1\0\11\1\1\0\30\1\1\0\7\1"+
    "\11\0\24\1\1\0\4\1\2\0\1\11\1\0\1\11"+
    "\14\0\7\1\1\0\5\1\1\0\2\1\3\0\1\11"+
    "\14\0\3\1\1\0\4\1\1\11\1\1\1\11\1\0"+
    "\1\1\14\0\2\1\1\0\3\1\1\11\3\0\1\1"+
    "\2\11\3\0\1\11\2\0\1\11\1\1\1\11\2\1"+
    "\1\0\2\11\1\0\1\11\1\0\2\11\1\0\1\1"+
    "\1\0\1\11\1\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();

static LinkedList<Erro_r> listaErrores= new LinkedList();

  public void adderror(int fila, int columna, String valor){
       Erro_r n = new Erro_r(fila,columna,valor,"");
       listaErrores.add(n);
  }

/*public void agregar(String Token,String Lexema,int Fila, int Columna){
  Simbolo simbolo= new Simbolo(Token,Lexema,Fila,Columna);
  TablaSimbolos.add(simbolo);	
}
  

public LinkedList<Simbolo> retornarTablaSimbolos(){
     return AnalizadorLexico.TablaSimbolos;
}*/

public LinkedList<Erro_r> retornarErrores(){       
	return AnalizadorLexico.listaErrores;
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AL_HTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AL_HTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2298) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 44: 
          { return new Symbol(sym.FCT, new token(yycolumn, yyline, yytext()));
          }
        case 80: break;
        case 78: 
          { return new Symbol(sym.FCAJA_TEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 81: break;
        case 46: 
          { return new Symbol(sym.IIMAGEN, new token(yycolumn, yyline, yytext()));
          }
        case 82: break;
        case 65: 
          { return new Symbol(sym.FBOTON, new token(yycolumn, yyline, yytext()));
          }
        case 83: break;
        case 23: 
          { return new Symbol(sym.INT, new token(yycolumn, yyline, yytext()));
          }
        case 84: break;
        case 52: 
          { return new Symbol(sym.FCJS, new token(yycolumn, yyline, yytext()));
          }
        case 85: break;
        case 79: 
          { return new Symbol(sym.FENCABEZADO, new token(yycolumn, yyline, yytext()));
          }
        case 86: break;
        case 60: 
          { return new Symbol(sym.CENT, new token(yycolumn, yyline, yytext()));
          }
        case 87: break;
        case 76: 
          { return new Symbol(sym.FTEXTO_A, new token(yycolumn, yyline, yytext()));
          }
        case 88: break;
        case 25: 
          { return new Symbol(sym.ICAJA, new token(yycolumn, yyline, yytext()));
          }
        case 89: break;
        case 5: 
          { return new Symbol(sym.I_D, new token(yycolumn, yyline, yytext()));
          }
        case 90: break;
        case 19: 
          { return new Symbol(sym.ICT, new token(yycolumn, yyline, yytext()));
          }
        case 91: break;
        case 55: 
          { return new Symbol(sym.DER, new token(yycolumn, yyline, yytext()));
          }
        case 92: break;
        case 40: 
          { return new Symbol(sym.CLICK, new token(yycolumn, yyline, yytext()));
          }
        case 93: break;
        case 49: 
          { return new Symbol(sym.IOPCION, new token(yycolumn, yyline, yytext()));
          }
        case 94: break;
        case 32: 
          { return new Symbol(sym.ITEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 95: break;
        case 18: 
          { return new Symbol(sym.STRING_LITERAL, new token(yycolumn, yyline, yytext()));
          }
        case 96: break;
        case 27: 
          { return new Symbol(sym.ALTO, new token(yycolumn, yyline, yytext()));
          }
        case 97: break;
        case 4: 
          { return new Symbol(sym.NUM, new token(yycolumn, yyline, yytext()));
          }
        case 98: break;
        case 58: 
          { return new Symbol(sym.FCAJA, new token(yycolumn, yyline, yytext()));
          }
        case 99: break;
        case 73: 
          { return new Symbol(sym.FENLACE, new token(yycolumn, yyline, yytext()));
          }
        case 100: break;
        case 29: 
          { return new Symbol(sym.CCSS, new token(yycolumn, yyline, yytext()));
          }
        case 101: break;
        case 2: 
          { adderror(yyline,yycolumn,yytext());
          }
        case 102: break;
        case 70: 
          { return new Symbol(sym.FCUERPO, new token(yycolumn, yyline, yytext()));
          }
        case 103: break;
        case 28: 
          { return new Symbol(sym.RUTA, new token(yycolumn, yyline, yytext()));
          }
        case 104: break;
        case 9: 
          { return new Symbol(sym.MENOS, new token(yycolumn, yyline, yytext()));
          }
        case 105: break;
        case 31: 
          { return new Symbol(sym.IHTML, new token(yycolumn, yyline, yytext()));
          }
        case 106: break;
        case 24: 
          { return new Symbol(sym.ICSS, new token(yycolumn, yyline, yytext()));
          }
        case 107: break;
        case 71: 
          { return new Symbol(sym.FTITULO, new token(yycolumn, yyline, yytext()));
          }
        case 108: break;
        case 21: 
          { return new Symbol(sym.ID, new token(yycolumn, yyline, yytext()));
          }
        case 109: break;
        case 12: 
          { return new Symbol(sym.POR, new token(yycolumn, yyline, yytext()));
          }
        case 110: break;
        case 26: 
          { return new Symbol(sym.CHAR, new token(yycolumn, yyline, yytext()));
          }
        case 111: break;
        case 66: 
          { return new Symbol(sym.FPANEL, new token(yycolumn, yyline, yytext()));
          }
        case 112: break;
        case 14: 
          { return new Symbol(sym.IGUAL, new token(yycolumn, yyline, yytext()));
          }
        case 113: break;
        case 35: 
          { return new Symbol(sym.ANCHO, new token(yycolumn, yyline, yytext()));
          }
        case 114: break;
        case 61: 
          { return new Symbol(sym.FHTML, new token(yycolumn, yyline, yytext()));
          }
        case 115: break;
        case 67: 
          { return new Symbol(sym.ISALTOF, new token(yycolumn, yyline, yytext()));
          }
        case 116: break;
        case 69: 
          { return new Symbol(sym.ICAJA_TEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 117: break;
        case 36: 
          { return new Symbol(sym.IBOTON, new token(yycolumn, yyline, yytext()));
          }
        case 118: break;
        case 53: 
          { return new Symbol(sym.BOOLEAN, new token(yycolumn, yyline, yytext()));
          }
        case 119: break;
        case 39: 
          { return new Symbol(sym.FONDO, new token(yycolumn, yyline, yytext()));
          }
        case 120: break;
        case 33: 
          { return new Symbol(sym.ITABLA, new token(yycolumn, yyline, yytext()));
          }
        case 121: break;
        case 50: 
          { return new Symbol(sym.STRING, new token(yycolumn, yyline, yytext()));
          }
        case 122: break;
        case 75: 
          { return new Symbol(sym.IENCABEZADO, new token(yycolumn, yyline, yytext()));
          }
        case 123: break;
        case 22: 
          { return new Symbol(sym.ICJS, new token(yycolumn, yyline, yytext()));
          }
        case 124: break;
        case 64: 
          { return new Symbol(sym.FFIL_T, new token(yycolumn, yyline, yytext()));
          }
        case 125: break;
        case 54: 
          { return new Symbol(sym.ISPINNER, new token(yycolumn, yyline, yytext()));
          }
        case 126: break;
        case 38: 
          { return new Symbol(sym.GRUPO, new token(yycolumn, yyline, yytext()));
          }
        case 127: break;
        case 74: 
          { return new Symbol(sym.FOPCION, new token(yycolumn, yyline, yytext()));
          }
        case 128: break;
        case 72: 
          { return new Symbol(sym.FIMAGEN, new token(yycolumn, yyline, yytext()));
          }
        case 129: break;
        case 1: 
          { return new Symbol(sym.DECIMAL, new token(yycolumn, yyline, yytext()));
          }
        case 130: break;
        case 7: 
          { return new Symbol(sym.MENQ, new token(yycolumn, yyline, yytext()));
          }
        case 131: break;
        case 13: 
          { return new Symbol(sym.PYC, new token(yycolumn, yyline, yytext()));
          }
        case 132: break;
        case 68: 
          { return new Symbol(sym.IZQ, new token(yycolumn, yyline, yytext()));
          }
        case 133: break;
        case 59: 
          { return new Symbol(sym.ALINEADO, new token(yycolumn, yyline, yytext()));
          }
        case 134: break;
        case 16: 
          { return new Symbol(sym.ALLA, new token(yycolumn, yyline, yytext()));
          }
        case 135: break;
        case 10: 
          { return new Symbol(sym.MAYQ, new token(yycolumn, yyline, yytext()));
          }
        case 136: break;
        case 57: 
          { return new Symbol(sym.FCSS, new token(yycolumn, yyline, yytext()));
          }
        case 137: break;
        case 30: 
          { return new Symbol(sym.VOID, new token(yycolumn, yyline, yytext()));
          }
        case 138: break;
        case 17: 
          { return new Symbol(sym.CLLA, new token(yycolumn, yyline, yytext()));
          }
        case 139: break;
        case 62: 
          { return new Symbol(sym.FTEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 140: break;
        case 8: 
          { return new Symbol(sym.DIV, new token(yycolumn, yyline, yytext()));
          }
        case 141: break;
        case 37: 
          { return new Symbol(sym.IPANEL, new token(yycolumn, yyline, yytext()));
          }
        case 142: break;
        case 77: 
          { return new Symbol(sym.FSPINNER, new token(yycolumn, yyline, yytext()));
          }
        case 143: break;
        case 43: 
          { return new Symbol(sym.ITITULO, new token(yycolumn, yyline, yytext()));
          }
        case 144: break;
        case 51: 
          { return new Symbol(sym.ITEXTO_A, new token(yycolumn, yyline, yytext()));
          }
        case 145: break;
        case 11: 
          { return new Symbol(sym.MAS, new token(yycolumn, yyline, yytext()));
          }
        case 146: break;
        case 45: 
          { return new Symbol(sym.FCB, new token(yycolumn, yyline, yytext()));
          }
        case 147: break;
        case 47: 
          { return new Symbol(sym.IENLACE, new token(yycolumn, yyline, yytext()));
          }
        case 148: break;
        case 42: 
          { return new Symbol(sym.ICUERPO, new token(yycolumn, yyline, yytext()));
          }
        case 149: break;
        case 15: 
          { return new Symbol(sym.APAR, new token(yycolumn, yyline, yytext()));
          }
        case 150: break;
        case 3: 
          { /* ignorar */
          }
        case 151: break;
        case 48: 
          { return new Symbol(sym.DOUBLE, new token(yycolumn, yyline, yytext()));
          }
        case 152: break;
        case 41: 
          { return new Symbol(sym.VALOR, new token(yycolumn, yyline, yytext()));
          }
        case 153: break;
        case 6: 
          { return new Symbol(sym.CPAR, new token(yycolumn, yyline, yytext()));
          }
        case 154: break;
        case 63: 
          { return new Symbol(sym.FTABLA, new token(yycolumn, yyline, yytext()));
          }
        case 155: break;
        case 34: 
          { return new Symbol(sym.IFIL_T, new token(yycolumn, yyline, yytext()));
          }
        case 156: break;
        case 56: 
          { 
          }
        case 157: break;
        case 20: 
          { return new Symbol(sym.ICB, new token(yycolumn, yyline, yytext()));
          }
        case 158: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
