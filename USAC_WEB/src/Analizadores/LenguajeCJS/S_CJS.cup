package Analizadores.LenguajeCJS; 

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;


action code {:
    //se declaran variables globales etc.
    //GestorC3D gs = new GestorC3D();
    public int Index=1;
    public Nodo root = new Nodo();
:}

parser code
{:
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }

    //Este metodo retorna la RAIZ del arbol  generado 
    public Nodo getRoot(){
        return action_obj.root;
    }
:}

terminal token COMA,MAS,MENOS,POR,DIV,POT,MOD,ADD,SUB,MENQ,MENIQ,MAYQ,MAYIQ,IG_IG,DIF,AND,OR,NOT,PYC,DSPTS,IGUAL,
APAR,CPAR,ALLA,CLLA,ACORCH,CCORCH,CONTEO,ATEXTO,SI,SINO,SELECCIONA,CASO,DEFECTO,PARA,MIENTRAS,
DETENER,IMPRIMIR,FUNCION,RETORNAR,MENSAJE,DOCUMENTO,OBTENER,OBSERVADOR,SETELEMENTO,STRING_LITERAL,
DIMV,NUM,DECIMAL,I_D,PTO,BOOLEAN_LITERAL,DATE_LITERAL,DATETIME_LITERAL,COMS;

non terminal Nodo programa,raiz,declara_var,asigna_var,asignacion,declara_vecF1,declara_vecF2,
asigna_vec,lista_valores,funcion_conteo,funcion_acadena,valor,Si,opcional,Sino,Selecciona,
lista_casos,caso_defecto,Para,dec_for,operador,instrucciones,Mientras,Detener,Imprimir,Retornar,
Mensaje,Instrucciones,funcion,parametros,lista_parametros,expr_l,expr_r,expr_a,simplificada,dato,
Lcontenido_cjs,contenido_cjs;

precedence left MAS, MENOS;
precedence left POR, DIV,MOD;
precedence left POT;
precedence left ADD,SUB;
precedence left APAR,CPAR;
precedence left IG_IG,MAYQ,MENQ,MAYIQ,MENIQ,DIF;
precedence left OR;
precedence left AND;
precedence right NOT;

start with programa;

programa ::= raiz:r          {:   root=r;   :};

raiz ::=    Lcontenido_cjs:a {:     RESULT=a;     :}; 

Lcontenido_cjs ::=  Lcontenido_cjs:x contenido_cjs:y{:
                        x.add(y);    
                        RESULT=x;
                    :}
                    |contenido_cjs:x{:
                        RESULT = parser.crearNodo("contenido","",0,0);  
                        RESULT.add(x);
                    :};

contenido_cjs ::= declara_var:r{:
                        RESULT = r; 
                  :}
                  |asignacion:r{:
                        RESULT = r; 
                  :}
                  |declara_vecF1:r{:
                        RESULT = r; 
                  :}
                  |declara_vecF2:r{:
                        RESULT = r; 
                  :}
                  |asigna_vec:r{:
                        RESULT = r; 
                  :}
                  |funcion:r{:
                        RESULT = r; 
                  :};

//***********************************DECLARACION DE VARIABLES********************

declara_var ::= DIMV:a I_D:b asigna_var:c PYC{:
                        RESULT = parser.crearNodo("declara_var","",a.getLinea(),a.getColumna());
                        RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));
                        RESULT.add(c);
                        
                :};

asigna_var  ::={:   RESULT = parser.crearNodo("asigna_var","",0,0);    :}
               |DSPTS expr_l:a{:
                    RESULT = parser.crearNodo("asigna_var","",a.linea,a.columna);
                    RESULT.add(a);   
                :};
//***********************************ASIGNACION ********************************
asignacion   ::= I_D:a DSPTS expr_l:b PYC {:
                    RESULT = parser.crearNodo("asignacion","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                    RESULT.add(b);    
                :};

//***********************************DECLARACION DE VECTORES********************
declara_vecF1   ::= DIMV I_D DSPTS ALLA lista_valores CLLA PYC;  // se crea el vector con valores

declara_vecF2   ::= DIMV I_D ALLA NUM CLLA PYC;// se declara el tamano del vector unidimensional

asigna_vec      ::= I_D DSPTS ALLA lista_valores CLLA PYC;

funcion_conteo  ::= I_D PTO CONTEO PYC;   // DEVUELVE VALOR

funcion_acadena ::= I_D PTO ATEXTO PYC;  // DEVUELVE VALOR

//****************************LISTA DE VALOREs**********************************

lista_valores ::= lista_valores COMA expr_l
                |expr_l;

valor       ::= dato:a {:
                    RESULT = a;
                    :};

//****************************SI-SINO*******************************************

Si     ::= SI APAR expr_l CPAR ALLA instrucciones CLLA opcional;

opcional ::= {::}
             |Sino;

Sino   ::= SINO ALLA instrucciones CLLA;

//**************************Selecciona *****************************************

Selecciona ::= SELECCIONA APAR expr_a CPAR ALLA lista_casos CLLA;

lista_casos ::=lista_casos caso_defecto
               |caso_defecto;
              

caso_defecto  ::= CASO valor DSPTS instrucciones
                |DEFECTO     DSPTS instrucciones;

//**************************Ciclo Para******************************************
Para     ::=   PARA APAR dec_for PYC expr_l PYC operador CPAR ALLA instrucciones CLLA; 


dec_for   ::=  I_D  DSPTS valor;


operador  ::= ADD | SUB;


//*************************Ciclo Mientras***************************************
Mientras ::= MIENTRAS APAR expr_l CPAR ALLA instrucciones CLLA;

//*************************Funcion Detener**************************************
Detener  ::= DETENER PYC;

//*************************Funcion Imprimir ************************************
Imprimir ::= IMPRIMIR APAR expr_l CPAR PYC;

//*************************Funcion Retornar ************************************
Retornar ::= RETORNAR expr_l PYC;

//*************************Funcion Mensaje *************************************
Mensaje  ::= MENSAJE APAR expr_l CPAR PYC;


//*************************Instrucciones****************************************
instrucciones  ::= {::}
                   |Instrucciones;

Instrucciones  ::= asignacion
                   |declara_vecF1
                   |declara_vecF2
                   |asigna_vec
                   |declara_var
                   |Si
                   |Selecciona
                   |Mientras
                   |Para
                   |Detener
                   |Imprimir
                   |Retornar
                   |Mensaje;

//************************Metodos y Funciones***********************************
funcion ::= FUNCION I_D APAR parametros CPAR ALLA instrucciones CLLA;


parametros ::= {:   RESULT = parser.crearNodo("parametros","",0,0);  :}
              |lista_parametros:x{:     RESULT=x;   :};

lista_parametros ::=lista_parametros:x COMA expr_a:y{:
                        x.add(y);
                        RESULT=x;
                    :}
                    |expr_a:x {:
                        RESULT = parser.crearNodo("parametros","",x.linea,x.columna);
                        RESULT.add(x);    
                    :};

//************************Expresiones Logicas***********************************
expr_l ::= expr_l:b AND:a expr_l:c     {:
                                          RESULT = parser.crearNodo("AND","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                       :}
          |expr_l:b OR:a  expr_l:c     {:
                                          RESULT = parser.crearNodo("OR","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                      :}
          |NOT:a expr_l:b             {:    
                                          RESULT = parser.crearNodo("NOT","",a.getLinea(),a.getColumna());
                                          RESULT.add(b);
                                      :}
          |expr_r:a                   {:  RESULT=a;   :};

//************************Expresiones Relacionales******************************
expr_r ::= expr_a:b MENQ:a expr_a:c {:
                                        RESULT = parser.crearNodo("MENQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    :}
          |expr_a:b MENIQ:a expr_a:c{:
                                        RESULT = parser.crearNodo("MENIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    :}
          |expr_a:b MAYQ:a expr_a:c {:
                                        RESULT = parser.crearNodo("MAYQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |expr_a:b MAYIQ:a expr_a:c{:
                                        RESULT = parser.crearNodo("MAYIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |expr_a:b IG_IG:a expr_a:c{:
                                        RESULT = parser.crearNodo("IG_IG","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |expr_a:b DIF:a expr_a:c  {:
                                        RESULT = parser.crearNodo("DIF","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |expr_a:r                {:  RESULT = r;  :};

//************************Expresiones Aritmeticas*******************************
expr_a ::= expr_a:b MAS:a expr_a:c    {:
                                        RESULT = parser.crearNodo("MAS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b MENOS:a expr_a:c  {:
                                        RESULT = parser.crearNodo("MENOS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b POR:a expr_a:c    {:
                                        RESULT = parser.crearNodo("POR","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b DIV:a expr_a:c    {:
                                        RESULT = parser.crearNodo("DIV","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b MOD:a expr_a:c    {:
                                        RESULT = parser.crearNodo("MOD","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b POT:a expr_a:c    {:
                                        RESULT = parser.crearNodo("POT","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |APAR expr_l:r CPAR     {:  RESULT=r;    :}
          |dato:r                 {:  RESULT=r;    :}
          //|acceso
          |simplificada;


simplificada ::= expr_a ADD
                |expr_a SUB;
          
dato ::= STRING_LITERAL:a {:
                            String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                            RESULT = parser.crearNodo("string",cad,a.getLinea(),a.getColumna()); 
                          :}
        |NUM:a                          {: RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    :}
        |DECIMAL:a                      {: RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    :}
        |COMS BOOLEAN_LITERAL:a  COMS   {: RESULT = parser.crearNodo("boolean",a.getCadena(),a.getLinea(),a.getColumna());   :}
        |COMS DATE_LITERAL:a     COMS   {: RESULT = parser.crearNodo("date",a.getCadena(),a.getLinea(),a.getColumna());      :}
        |COMS DATETIME_LITERAL:a COMS   {: RESULT = parser.crearNodo("datetime",a.getCadena(),a.getLinea(),a.getColumna());  :};
