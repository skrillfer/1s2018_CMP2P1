package Analizadores.LenguajeCJS; 

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;


action code {:
    //se declaran variables globales etc.
    //GestorC3D gs = new GestorC3D();
:}

terminal token COMA,MAS,MENOS,POR,DIV,POT,MOD,ADD,SUB,MENQ,MENIQ,MAYQ,MAYIQ,IG_IG,DIF,AND,OR,NOT,PYC,DSPTS,IGUAL,
APAR,CPAR,ALLA,CLLA,ACORCH,CCORCH,CONTEO,ATEXTO,SI,SINO,SELECCIONA,CASO,DEFECTO,PARA,MIENTRAS,
DETENER,IMPRIMIR,FUNCION,RETORNAR,MENSAJE,DOCUMENTO,OBTENER,OBSERVADOR,SETELEMENTO,STRING_LITERAL,
DIMV,NUM,DECIMAL,I_D,PTO;

non terminal Nodo programa,raiz,declara_var,asigna_var,asignacion,declara_vecF1,declara_vecF2,
asigna_vec,lista_valores,funcion_conteo,funcion_acadena,valor,Si,opcional,Sino,Selecciona,
lista_casos,caso_defecto,Para,dec_for,operador,instrucciones,Mientras,Detener,Imprimir,Retornar,
Mensaje,Instrucciones,funcion,parametros,lista_parametros,expr_l,expr_r,expr_a,simplificada,dato;

precedence left MAS, MENOS;
precedence left POR, DIV,MOD;
precedence left POT;
precedence left ADD,SUB;
precedence left APAR,CPAR;
precedence left IG_IG,MAYQ,MENQ,MAYIQ,MENIQ,DIF;
precedence left OR;
precedence left AND;
precedence right NOT;

start with programa;

programa ::= raiz;

raiz ::= STRING_LITERAL;


//***********************************DECLARACION DE VARIABLES********************

declara_var ::= DIMV I_D asigna_var PYC;

asigna_var  ::={::}
               |DSPTS valor;
//***********************************ASIGNACION ********************************
asignacion   ::= I_D DSPTS valor PYC;

//***********************************DECLARACION DE VECTORES********************
declara_vecF1   ::= DIMV I_D DSPTS ALLA lista_valores CLLA PYC;  // se crea el vector con valores

declara_vecF2   ::= DIMV I_D ALLA NUM CLLA PYC;// se declara el tamano del vector unidimensional

asigna_vec      ::= I_D DSPTS ALLA lista_valores CLLA PYC;

funcion_conteo  ::= I_D PTO CONTEO PYC;   // DEVUELVE VALOR

funcion_acadena ::= I_D PTO ATEXTO PYC;  // DEVUELVE VALOR

//****************************LISTA DE VALOREs**********************************

lista_valores ::= lista_valores COMA valor
                |valor;

valor       ::= dato;

//****************************SI-SINO*******************************************

Si     ::= SI APAR expr_l CPAR ALLA instrucciones CLLA opcional;

opcional ::= {::}
             |Sino;

Sino   ::= SINO ALLA instrucciones CLLA;

//**************************Selecciona *****************************************

Selecciona ::= SELECCIONA APAR expr_a CPAR ALLA lista_casos CLLA;

lista_casos ::=lista_casos caso_defecto
               |caso_defecto;
              

caso_defecto  ::= CASO valor DSPTS instrucciones
                |DEFECTO     DSPTS instrucciones;

//**************************Ciclo Para******************************************
Para     ::=   PARA APAR dec_for PYC expr_l PYC operador CPAR ALLA instrucciones CLLA; 


dec_for   ::=  I_D  DSPTS valor;


operador  ::= ADD | SUB;


//*************************Ciclo Mientras***************************************
Mientras ::= MIENTRAS APAR expr_l CPAR ALLA instrucciones CLLA;

//*************************Funcion Detener**************************************
Detener  ::= DETENER PYC;

//*************************Funcion Imprimir ************************************
Imprimir ::= IMPRIMIR APAR expr_l CPAR PYC;

//*************************Funcion Retornar ************************************
Retornar ::= RETORNAR expr_l PYC;

//*************************Funcion Mensaje *************************************
Mensaje  ::= MENSAJE APAR expr_l CPAR PYC;


//*************************Instrucciones****************************************
instrucciones  ::= {::}
                   |Instrucciones;

Instrucciones  ::= asignacion
                   |declara_vecF1
                   |declara_vecF2
                   |asigna_vec
                   |declara_var
                   |Si
                   |Selecciona
                   |Mientras
                   |Para
                   |Detener
                   |Imprimir
                   |Retornar
                   |Mensaje;

//************************Metodos y Funciones***********************************
funcion ::= FUNCION I_D APAR parametros CPAR ALLA instrucciones CLLA;


parametros ::= {::}
              |lista_parametros;

lista_parametros ::=lista_parametros COMA expr_a
                    |expr_a;

//************************Expresiones Logicas***********************************
expr_l ::= expr_l AND expr_l
          |expr_l OR  expr_l
          |NOT expr_l
          |expr_r;

//************************Expresiones Relacionales******************************
expr_r ::= expr_a MENQ expr_a
          |expr_a MENIQ expr_a
          |expr_a MAYQ expr_a
          |expr_a MAYIQ expr_a
          |expr_a IG_IG expr_a
          |expr_a DIF expr_a
          |expr_a;

//************************Expresiones Aritmeticas*******************************
expr_a ::= expr_a MAS expr_a
          |expr_a MENOS expr_a
          |expr_a POR expr_a
          |expr_a DIV expr_a
          |expr_a MOD expr_a
          |expr_a POT expr_a
          |APAR expr_l CPAR
          |dato
          //|acceso
          |simplificada;


simplificada ::= expr_a ADD
                |expr_a SUB;
          
dato ::= STRING_LITERAL
        |NUM
        |DECIMAL;
