package Analizadores.LenguajeCJS; 

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;


action code {:
    //se declaran variables globales etc.
    //GestorC3D gs = new GestorC3D();
    public int Index=1;
    public Nodo root = new Nodo();
    public String temporal="";
:}

parser code
{:
    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }

    //Este metodo retorna la RAIZ del arbol  generado 
    public Nodo getRoot(){
        return action_obj.root;
    }
:}

terminal token COMA,MAS,MENOS,POR,DIV,POT,MOD,ADD,SUB,MENQ,MENIQ,MAYQ,MAYIQ,IG_IG,DIF,AND,OR,NOT,PYC,DSPTS,IGUAL,
APAR,CPAR,ALLA,CLLA,ACORCH,CCORCH,CONTEO,ATEXTO,SI,SINO,SELECCIONA,CASO,DEFECTO,PARA,MIENTRAS,
DETENER,IMPRIMIR,FUNCION,RETORNAR,MENSAJE,DOCUMENTO,OBTENER,OBSERVADOR,SETELEMENTO,STRING_LITERAL,
DIMV,NUM,DECIMAL,I_D,PTO,BOOLEAN_LITERAL,DATE_LITERAL,DATETIME_LITERAL;

non terminal Nodo programa,raiz,declara_var,asigna_var,asignacionGlb,declara_vecF1,declara_vecF2,
asigna_vecGlbF1,asigna_vecGlbF2,lista_valores,funcion_conteo,funcion_acadena,valor,Si,opcional,Sino,Selecciona,
lista_casos,caso_defecto,Para,dec_for,operador,instrucciones,Mientras,Detener,Imprimir,Retornar,
Mensaje,Instrucciones,funcion,parametros,lista_parametros,expr_l,expr_r,expr_a,simplificada,dato,
Lcontenido_cjs,contenido_cjs,f_conteoG,f_acadenaG,sentencia,cont_selecciona,LlamadaFuncion,lista_envio,envio,
accesoAr,Accion_Obtener,Accion_Setear,PtoObtener,PtoSetElemento,PtoObservador,FuncionAnonima,sentencia2;

precedence left MAS, MENOS;
precedence left POR, DIV,MOD;
precedence left POT;
precedence left ADD,SUB;
precedence left APAR,CPAR;
precedence left IG_IG,MAYQ,MENQ,MAYIQ,MENIQ,DIF;
precedence left OR;
precedence left AND;
precedence right NOT;

start with programa;

programa ::= raiz:r          {:   root=r;   :};

raiz ::=    Lcontenido_cjs:a {:     RESULT=a;     :};
             

 

Lcontenido_cjs ::= Lcontenido_cjs:r  contenido_cjs:x{:
                        r.add(x);
                        RESULT=r;
                  :}
                  |contenido_cjs:x{:
                        RESULT = parser.crearNodo("contenido","",0,0);  
                        RESULT.add(x);
                  :};

contenido_cjs ::= declara_var:r         {:    RESULT = r;     :}
                  |declara_vecF1:r      {:    RESULT = r;     :}
                  |declara_vecF2:r      {:    RESULT = r;     :}
                  |asignacionGlb:r      {:    RESULT = r;     :}
                  |asigna_vecGlbF1:r    {:    RESULT = r;     :}
                  |asigna_vecGlbF2:r    {:    RESULT = r;     :}
                  |funcion:r            {:    RESULT = r;     :}
                  |sentencia2:r         {:    RESULT = r;     :};


//***********************************DECLARACION DE VARIABLES********************

declara_var ::= DIMV:a I_D:b asigna_var:c PYC{:
                        RESULT = parser.crearNodo("declara_var","",a.getLinea(),a.getColumna());
                        RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));
                        RESULT.add(c);
                        
                :};

asigna_var  ::={:   RESULT = parser.crearNodo("asigna_var","",0,0);    :}
               |DSPTS expr_l:a{:
                    RESULT = parser.crearNodo("asigna_var","",a.linea,a.columna);
                    RESULT.add(a);   
                :};
//***********************************ASIGNACION ********************************
asignacionGlb   ::= I_D:a DSPTS expr_l:b PYC {:
                    RESULT = parser.crearNodo("asignacionGlb","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                    RESULT.add(b);    
                :};

//***********************************DECLARACION DE VECTORES********************
declara_vecF1   ::= DIMV:a I_D:b DSPTS ALLA lista_valores:c CLLA PYC{:// se crea el vector con valores
                    RESULT = parser.crearNodo("declara_vecF1","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));   
                    RESULT.add(c);
                 :};  

declara_vecF2   ::= DIMV:a I_D:b ALLA expr_a:c CLLA PYC{:// se declara el tamano del vector unidimensional
                    RESULT = parser.crearNodo("declara_vecF2","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));
                    Nodo dim=parser.crearNodo("dimensiones","",c.linea,c.columna);
                    dim.add(c);
                    RESULT.add(dim);
                    
                 :};
  
asigna_vecGlbF1  ::= I_D:a DSPTS ALLA lista_valores:c CLLA PYC{:
                       RESULT = parser.crearNodo("asigna_vecGlbF1","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                       RESULT.add(c);
                    :};

asigna_vecGlbF2 ::= I_D:a ALLA expr_l:b CLLA DSPTS  expr_l:X PYC {:
                       RESULT = parser.crearNodo("asigna_vecGlbF2","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                       Nodo dim=parser.crearNodo("indice","",b.linea,b.columna);
                       dim.add(b);
                       RESULT.add(dim);
                       RESULT.add(X);
                    :}; 

funcion_conteo  ::= I_D:a PTO CONTEO  {:
                       RESULT = parser.crearNodo("funcion_Conteo","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna()));
                    :};   // DEVUELVE VALOR

funcion_acadena ::= I_D:a PTO ATEXTO APAR CPAR{:
                       RESULT = parser.crearNodo("funcion_aTexto","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna()));
                    :};  // DEVUELVE VALOR

//****************************LISTA DE VALOREs**********************************

lista_valores ::= lista_valores:Y COMA expr_a:X{:
                    Y.add(X);
                    RESULT=Y;
                :}
                |expr_a:X{:
                    RESULT = parser.crearNodo("valores","",X.linea,X.columna);
                    RESULT.add(X);
                :};

valor       ::= dato:a {:
                    RESULT = a;
                    :};

//****************************SI-SINO*******************************************

Si     ::= SI:w APAR expr_l:X CPAR ALLA instrucciones:Y CLLA opcional:Z
          {:
            RESULT = parser.crearNodo("si","",w.getLinea(),w.getColumna());
            RESULT.add(X);// se agrega la expresion
            RESULT.add(Y);// se agrega el conjunto de instrucciones
            RESULT.add(Z);// se agrega el SINO (opcional)

          :};

opcional ::= {: RESULT = parser.crearNodo("sentencias","",0,0);  :}
             |Sino:X {: RESULT=X;  :}; 

Sino   ::= SINO ALLA instrucciones:X CLLA {:
            RESULT=X; // se agrega el conjunto de instrucciones
            :};

//**************************Selecciona *****************************************

Selecciona ::= SELECCIONA:w APAR expr_l:X CPAR ALLA cont_selecciona:Y CLLA
            {:
                RESULT = parser.crearNodo("selecciona","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la EXPRESION
                RESULT.add(Y);// se agrega la lista de CASOS
            :};

cont_selecciona ::= {: RESULT = parser.crearNodo("casos","",0,0); :}
                    |lista_casos:X{: RESULT= X; :};


lista_casos ::=lista_casos:R caso_defecto:X{:
                R.add(X);
                RESULT = R;
            :}
               |caso_defecto:X{:
                RESULT = parser.crearNodo("casos","",X.linea,X.columna);
                RESULT.add(X);
            :};
              

caso_defecto  ::= CASO:w expr_a:X DSPTS instrucciones:Y {:
                    RESULT = parser.crearNodo("caso","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la EXPR
                    RESULT.add(Y);// se agregan las instrucciones
                :}
                |DEFECTO:w        DSPTS instrucciones:Y {:
                    RESULT = parser.crearNodo("defecto","",w.getLinea(),w.getColumna());
                    RESULT.add(Y);// se agregan las instrucciones
                :};

//**************************Ciclo Para******************************************
Para     ::=   PARA:w APAR dec_for:X PYC expr_l:Y PYC operador:Z CPAR ALLA instrucciones:O CLLA {:
                    RESULT = parser.crearNodo("para","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la declaracion FOR
                    RESULT.add(Y);// se agrega la CONDICION
                    RESULT.add(Z);// se agrega el OPERADOR
                    RESULT.add(O);// se agregan las instrucciones

               :}; 


dec_for   ::=  I_D:w  DSPTS expr_l:X{:
                    RESULT = parser.crearNodo("dec_for","",w.getLinea(),w.getColumna());
                    RESULT.add(parser.crearNodo("id",w.getCadena(),w.getLinea(),w.getColumna()));// se agrega el ID
                    RESULT.add(X);// se agrega el valor de la variable del for
               :};


operador  ::= ADD:w {:    RESULT = parser.crearNodo("operador","add",w.getLinea(),w.getColumna()); :} 
             |SUB:w {:    RESULT = parser.crearNodo("operador","sub",w.getLinea(),w.getColumna()); :};


//*************************Ciclo Mientras***************************************
Mientras ::= MIENTRAS:w APAR expr_l:X CPAR ALLA instrucciones:Y CLLA{:
                    RESULT = parser.crearNodo("mientras","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la CONDICION
                    RESULT.add(Y);// se agregan las instrucciones
            :};


//*************************Funcion Detener**************************************
Detener  ::= DETENER:w PYC {:RESULT = parser.crearNodo("detener","",w.getLinea(),w.getColumna());:};

//*************************Funcion Imprimir ************************************
Imprimir ::= IMPRIMIR:w APAR expr_l:X CPAR PYC{:
                RESULT = parser.crearNodo("imprimir","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la expresion a IMPRIMIR en la consola de salida
            :};

//*************************Funcion Retornar ************************************
Retornar ::= RETORNAR:w expr_l:X PYC{:
                RESULT = parser.crearNodo("retornar","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la expresion a retornar
            :};

//*************************Funcion Mensaje *************************************
Mensaje  ::= MENSAJE:w APAR expr_l:X CPAR PYC{:
                RESULT = parser.crearNodo("mensaje","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la expresion a MENSAJEAR
            :};


//*************************Instrucciones****************************************
instrucciones  ::= {:  RESULT = parser.crearNodo("sentencias","",0,0);  :}
                   |Instrucciones:X {: RESULT = X; :};

Instrucciones ::= Instrucciones:R sentencia:H {:  R.add(H); RESULT = R;  :}
                 |sentencia:H {: RESULT = parser.crearNodo("sentencias","",H.linea,H.columna);  RESULT.add(H); :};


sentencia2 ::=       Si:X                {: RESULT = X; :}
                   |Selecciona:X        {: RESULT = X; :}
                   |Mientras:X          {: RESULT = X; :}
                   |Para:X              {: RESULT = X; :}
                   |Detener:X           {: RESULT = X; :}
                   |Imprimir:X          {: RESULT = X; :}
                   |Retornar:X          {: RESULT = X; :}
                   |Mensaje:X           {: RESULT = X; :}
                   |LlamadaFuncion:X     PYC    {: RESULT = X; :}
                   |Accion_Setear:X      PYC    {: RESULT = X; :}
                   |Accion_Obtener:X     PYC    {: RESULT = X; :}
                   |funcion_conteo:a     PYC    {: RESULT = a;  :}
                   |funcion_acadena:a    PYC    {: RESULT = a;  :}  
                   |simplificada:r       PYC    {: r.valor=temporal;   RESULT = r;    temporal="";   :};


sentencia      ::= declara_vecF1:X      {: X.nombre="declara_vecF1_L"; RESULT= X;   :} 
                   |declara_vecF2:X     {: X.nombre="declara_vecF2_L"; RESULT= X;   :}
                   |declara_var:X       {: X.nombre="declara_var_L"; RESULT= X;     :}
                   |asigna_vecGlbF1:X   {: X.nombre="asigna_vecLocalF1"; RESULT= X;     :}
                   |asigna_vecGlbF2:X   {: X.nombre="asigna_vecLocalF2"; RESULT= X;     :}
                   |asignacionGlb:X     {: X.nombre="asignacionLocal";  RESULT= X;      :}
                   |Si:X                {: RESULT = X; :}
                   |Selecciona:X        {: RESULT = X; :}
                   |Mientras:X          {: RESULT = X; :}
                   |Para:X              {: RESULT = X; :}
                   |Detener:X           {: RESULT = X; :}
                   |Imprimir:X          {: RESULT = X; :}
                   |Retornar:X          {: RESULT = X; :}
                   |Mensaje:X           {: RESULT = X; :}
                   |LlamadaFuncion:X     PYC    {: RESULT = X; :}
                   |Accion_Setear:X      PYC    {: RESULT = X; :}
                   |Accion_Obtener:X     PYC    {: RESULT = X; :}
                   |funcion_conteo:a     PYC    {: RESULT = a;  :}
                   |funcion_acadena:a    PYC    {: RESULT = a;  :}  
                   |simplificada:r       PYC    {: r.valor=temporal;   RESULT = r;    temporal=""; :} ;
   




Accion_Obtener ::= DOCUMENTO:w  PtoObtener:h {:
                        RESULT = parser.crearNodo("Accion_Obtener","",w.getLinea(),w.getColumna());
                        RESULT.add(h);
                  :};


Accion_Setear  ::= Accion_Obtener:x PtoSetElemento:h{:
                        RESULT = parser.crearNodo("Accion_Setear","",x.linea,x.columna);
                        RESULT.add(x);
                        RESULT.add(h);
                  :}
                  |Accion_Obtener:x PtoObservador:h{:
                        RESULT = parser.crearNodo("Accion_Setear","",x.linea,x.columna);
                        RESULT.add(x);
                        RESULT.add(h);
                  :}
                  |I_D:w PtoSetElemento:h {:
                        RESULT = parser.crearNodo("Accion_Setear","",w.getLinea(),w.getColumna());
                        RESULT.add(parser.crearNodo("id_cmp",w.getCadena(),w.getLinea(),w.getColumna()));
                        RESULT.add(h);
                  :}
                  |I_D:w PtoObservador:h {:
                        RESULT = parser.crearNodo("Accion_Setear","",w.getLinea(),w.getColumna());
                        RESULT.add(parser.crearNodo("id_cmp",w.getCadena(),w.getLinea(),w.getColumna()));
                        RESULT.add(h);
                  :}
                  |DOCUMENTO:w PtoSetElemento:h{:
                        RESULT = parser.crearNodo("Accion_Setear","",w.getLinea(),w.getColumna());
                        RESULT.add(h);
                  :}
                  |DOCUMENTO:w PtoObservador:h{:
                        RESULT = parser.crearNodo("Accion_Setear","",w.getLinea(),w.getColumna());
                        RESULT.add(h);
                  :};


/*----------------------------------------------------------------------------*/
PtoObtener ::= PTO:w OBTENER APAR expr_l:x CPAR {:    
                        RESULT = parser.crearNodo("pto_obtener","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                 :};

PtoSetElemento ::= PTO:w SETELEMENTO APAR expr_l:x COMA expr_l:y CPAR {:    
                        RESULT = parser.crearNodo("pto_elemento","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                        RESULT.add(y);
                  :};


PtoObservador ::=  PTO:w OBSERVADOR  APAR expr_l:x COMA FuncionAnonima:y CPAR {:    
                        RESULT = parser.crearNodo("pto_observador","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                        RESULT.add(y);
                  :};


FuncionAnonima ::= FUNCION:w APAR CPAR ALLA instrucciones:x CLLA {:
                        RESULT = parser.crearNodo("f_anonima","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                  :}
                  |I_D:w APAR CPAR {:
                        RESULT = parser.crearNodo("f_anonima","id",w.getLinea(),w.getColumna());
                        RESULT.add(parser.crearNodo("id",w.getCadena(),w.getLinea(),w.getColumna()));
                  :};




//************************Metodos y Funciones***********************************
funcion ::= FUNCION:w I_D:x APAR parametros:y CPAR ALLA instrucciones:z CLLA 
           {:
                RESULT = parser.crearNodo("funcion","",w.getLinea(),w.getColumna()); // se crea la raiz FUNCION
                RESULT.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));// agrego el nombre 
                RESULT.add(y);//agrego los parametros
                RESULT.add(z);//agrego las instrucciones
           :};


parametros ::= {:   RESULT = parser.crearNodo("parametros","",0,0);  :}
              |lista_parametros:x{:     RESULT=x;   :};

lista_parametros ::=lista_parametros:x COMA I_D:y{:
                        Nodo param = parser.crearNodo("parametro","",y.getLinea(),y.getColumna());
                        param.add(parser.crearNodo("id",y.getCadena(),y.getLinea(),y.getColumna()));
                        x.add(param);
                        RESULT=x;
                    :}
                    |I_D:x {:
                        RESULT = parser.crearNodo("parametros","",x.getLinea(),x.getColumna());
                        Nodo param = parser.crearNodo("parametro","",x.getLinea(),x.getColumna());
                        param.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));
                        RESULT.add(param);    
                    :};

//************************Expresiones Logicas***********************************
expr_l ::= expr_l:b AND:a expr_l:c     {:
                                          RESULT = parser.crearNodo("AND","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                       :}
          |expr_l:b OR:a  expr_l:c     {:
                                          RESULT = parser.crearNodo("OR","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                      :}
          |NOT:a expr_l:b             {:    
                                          RESULT = parser.crearNodo("NOT","",a.getLinea(),a.getColumna());
                                          RESULT.add(b);
                                      :}
          |expr_r:a                   {:  RESULT=a;   :};

//************************Expresiones Relacionales******************************
expr_r ::= expr_a:b MENQ:a expr_a:c {:
                                        RESULT = parser.crearNodo("MENQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    :}
          |expr_a:b MENIQ:a expr_a:c{:
                                        RESULT = parser.crearNodo("MENIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    :}
          |expr_a:b MAYQ:a expr_a:c {:
                                        RESULT = parser.crearNodo("MAYQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |expr_a:b MAYIQ:a expr_a:c{:
                                        RESULT = parser.crearNodo("MAYIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |expr_a:b IG_IG:a expr_a:c{:
                                        RESULT = parser.crearNodo("IG_IG","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |expr_a:b DIF:a expr_a:c  {:
                                        RESULT = parser.crearNodo("DIF","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   :}
          |expr_a:r                {:  RESULT = r;  :};

//************************Expresiones Aritmeticas*******************************
expr_a ::= expr_a:b MAS:a expr_a:c    {:
                                        RESULT = parser.crearNodo("MAS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b MENOS:a expr_a:c  {:
                                        RESULT = parser.crearNodo("MENOS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b POR:a expr_a:c    {:
                                        RESULT = parser.crearNodo("POR","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b DIV:a expr_a:c    {:
                                        RESULT = parser.crearNodo("DIV","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b MOD:a expr_a:c    {:
                                        RESULT = parser.crearNodo("MOD","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |expr_a:b POT:a expr_a:c    {:
                                        RESULT = parser.crearNodo("POT","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      :}
          |APAR expr_l:r CPAR         {:  RESULT=r;    :}
          |MENOS:a expr_a:H               {:  RESULT = parser.crearNodo("unitario","",a.getLinea(),a.getColumna()); RESULT.add(H); :}
          |dato:r                     {:  RESULT=r;    :}
          |Accion_Obtener:r           {:  RESULT=r;    :}
          |accesoAr:r                 {:  RESULT=r;    :}
          |simplificada:r             {:  RESULT=r;    :};

accesoAr ::= I_D:f ALLA expr_l:a CLLA{:
                RESULT=parser.crearNodo("accesoAr",f.getCadena(),f.getLinea(),f.getColumna());
                RESULT.add(a);
                //RESULT.add(lista);
            :};

simplificada ::= expr_a:X ADD:w {: 
                                
                                if(X.nombre.equals("id")){
                                    temporal=X.valor;
                                }

                                RESULT = parser.crearNodo("ADD","",w.getLinea(),w.getColumna());
                                RESULT.add(X);
                              :}
                |expr_a:X SUB:w{:

                                if(X.nombre.equals("id")){
                                    temporal=X.valor;
                                }

                                RESULT = parser.crearNodo("SUB","",w.getLinea(),w.getColumna());
                                RESULT.add(X);
                               :};
          
dato ::= I_D:a                          {: RESULT = parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna());    :}
        |STRING_LITERAL:a {:
                            String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                            RESULT = parser.crearNodo("string",cad,a.getLinea(),a.getColumna()); 
                          :}
        |NUM:a                          {: RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    :}
        |DECIMAL:a                      {: RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    :}
        | BOOLEAN_LITERAL:a     {: 
                String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                RESULT = parser.crearNodo("boolean",cad,a.getLinea(),a.getColumna());   
        :}
        | DATE_LITERAL:a        {: 
                String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                RESULT = parser.crearNodo("date",cad,a.getLinea(),a.getColumna());      
        :}
        | DATETIME_LITERAL:a    {: 
                String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                RESULT = parser.crearNodo("datetime",cad,a.getLinea(),a.getColumna());  
        :}
        |funcion_conteo:a               {: RESULT = a;  :}
        |funcion_acadena:a              {: RESULT = a;  :}
        |LlamadaFuncion:a               {: RESULT = a;  :};


LlamadaFuncion ::= I_D:a APAR envio:H CPAR{:
                        RESULT = parser.crearNodo("llamadaFuncion","",a.getLinea(),a.getColumna());  
                        RESULT.add(parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna()));
                        RESULT.add(H);
                    :};


envio  ::= {: RESULT = parser.crearNodo("envios","",0,0); :}
           |lista_envio:X{: RESULT = X;  :};


lista_envio ::= lista_envio:R COMA expr_l:X{:
                    R.add(X);
                    RESULT = R;
                :}
                |expr_l:H{:
                    RESULT = parser.crearNodo("envios","",H.linea,H.columna);
                    RESULT.add(H);
                :};


