
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 18 01:06:16 CST 2018
//----------------------------------------------------

package Analizadores.LenguajeCJS;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 18 01:06:16 CST 2018
  */
public class AS_CJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_CJS() {super();}

  /** Constructor which sets the default scanner. */
  public AS_CJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_CJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\047\004\000\002\047\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\004\006\000\002\005\002\000\002\005\004\000\002\006" +
    "\006\000\002\007\011\000\002\010\010\000\002\011\010" +
    "\000\002\012\010\000\002\014\006\000\002\015\006\000" +
    "\002\013\005\000\002\013\003\000\002\016\003\000\002" +
    "\017\012\000\002\020\002\000\002\020\003\000\002\021" +
    "\006\000\002\022\011\000\002\023\004\000\002\023\003" +
    "\000\002\024\006\000\002\024\005\000\002\025\015\000" +
    "\002\026\005\000\002\027\003\000\002\027\003\000\002" +
    "\031\011\000\002\032\004\000\002\033\007\000\002\034" +
    "\005\000\002\035\007\000\002\030\002\000\002\030\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\012\000\002\040\002" +
    "\000\002\040\003\000\002\041\005\000\002\041\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\004\000\002" +
    "\042\003\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\003\000\002\044\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\003\000\002\044" +
    "\003\000\002\045\004\000\002\045\004\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\005\000" +
    "\002\046\005\000\002\046\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\010\052\020\062\011\065\021\001\002\000" +
    "\004\002\273\001\002\000\012\002\ufff6\052\ufff6\062\ufff6" +
    "\065\ufff6\001\002\000\012\002\ufffc\052\ufffc\062\ufffc\065" +
    "\ufffc\001\002\000\004\002\000\001\002\000\012\002\uffff" +
    "\052\020\062\011\065\021\001\002\000\004\065\255\001" +
    "\002\000\012\002\ufffa\052\ufffa\062\ufffa\065\ufffa\001\002" +
    "\000\012\002\ufff7\052\ufff7\062\ufff7\065\ufff7\001\002\000" +
    "\012\002\ufffb\052\ufffb\062\ufffb\065\ufffb\001\002\000\012" +
    "\002\ufff8\052\ufff8\062\ufff8\065\ufff8\001\002\000\012\002" +
    "\ufffd\052\ufffd\062\ufffd\065\ufffd\001\002\000\012\002\ufff9" +
    "\052\ufff9\062\ufff9\065\ufff9\001\002\000\004\065\122\001" +
    "\002\000\006\027\022\033\023\001\002\000\020\025\057" +
    "\031\027\033\111\061\031\063\024\064\032\072\026\001" +
    "\002\000\014\031\027\061\031\063\024\064\032\072\026" +
    "\001\002\000\064\002\uffad\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\026\uffad\027\uffad\032\uffad\034\uffad\052\uffad\062\uffad" +
    "\065\uffad\001\002\000\062\002\uffb2\004\uffb2\005\uffb2\006" +
    "\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\026\uffb2\032\uffb2\034\uffb2\052\uffb2\062\uffb2" +
    "\065\uffb2\001\002\000\010\067\103\070\104\071\105\001" +
    "\002\000\016\025\057\031\027\061\031\063\024\064\032" +
    "\072\026\001\002\000\062\002\uffb1\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\026\uffb1\032\uffb1\034\uffb1\052\uffb1\062\uffb1" +
    "\065\uffb1\001\002\000\064\002\uffae\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\026\uffae\027\uffae\032\uffae\034\uffae\052\uffae" +
    "\062\uffae\065\uffae\001\002\000\064\002\uffac\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\026\uffac\027\uffac\032\uffac\034\uffac" +
    "\052\uffac\062\uffac\065\uffac\001\002\000\024\005\040\006" +
    "\034\007\037\010\043\011\035\012\036\013\041\014\042" +
    "\034\044\001\002\000\014\031\027\061\031\063\024\064" +
    "\032\072\026\001\002\000\014\031\027\061\031\063\024" +
    "\064\032\072\026\001\002\000\014\031\027\061\031\063" +
    "\024\064\032\072\026\001\002\000\014\031\027\061\031" +
    "\063\024\064\032\072\026\001\002\000\014\031\027\061" +
    "\031\063\024\064\032\072\026\001\002\000\062\002\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\032\uffb0\034" +
    "\uffb0\052\uffb0\062\uffb0\065\uffb0\001\002\000\062\002\uffaf" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\032\uffaf\034" +
    "\uffaf\052\uffaf\062\uffaf\065\uffaf\001\002\000\014\031\027" +
    "\061\031\063\024\064\032\072\026\001\002\000\004\027" +
    "\045\001\002\000\014\031\027\061\031\063\024\064\032" +
    "\072\026\001\002\000\032\002\uffee\005\040\006\034\007" +
    "\037\010\043\011\035\012\036\013\041\014\042\052\uffee" +
    "\062\uffee\065\uffee\001\002\000\062\002\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\035\012\uffb6\013\041" +
    "\014\042\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\026\uffb6\032\uffb6\034\uffb6\052\uffb6" +
    "\062\uffb6\065\uffb6\001\002\000\062\002\uffb9\004\uffb9\005" +
    "\uffb9\006\uffb9\007\037\010\043\011\035\012\036\013\041" +
    "\014\042\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\026\uffb9\032\uffb9\034\uffb9\052\uffb9" +
    "\062\uffb9\065\uffb9\001\002\000\062\002\uffb7\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\011\035\012\uffb7\013\041" +
    "\014\042\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\026\uffb7\032\uffb7\034\uffb7\052\uffb7" +
    "\062\uffb7\065\uffb7\001\002\000\062\002\uffb5\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\035\012\uffb5\013\041" +
    "\014\042\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\026\uffb5\032\uffb5\034\uffb5\052\uffb5" +
    "\062\uffb5\065\uffb5\001\002\000\062\002\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\041" +
    "\014\042\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\026\uffb4\032\uffb4\034\uffb4\052\uffb4" +
    "\062\uffb4\065\uffb4\001\002\000\062\002\uffb8\004\uffb8\005" +
    "\uffb8\006\uffb8\007\037\010\043\011\035\012\036\013\041" +
    "\014\042\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\026\uffb8\032\uffb8\034\uffb8\052\uffb8" +
    "\062\uffb8\065\uffb8\001\002\000\012\023\uffc1\024\uffc1\026" +
    "\uffc1\032\uffc1\001\002\000\010\023\076\024\077\032\102" +
    "\001\002\000\016\025\057\031\027\061\031\063\024\064" +
    "\032\072\026\001\002\000\046\005\040\006\034\007\037" +
    "\010\043\011\035\012\036\013\041\014\042\015\061\016" +
    "\063\017\065\020\066\021\062\022\064\023\uffba\024\uffba" +
    "\026\uffba\032\uffba\001\002\000\014\031\027\061\031\063" +
    "\024\064\032\072\026\001\002\000\014\031\027\061\031" +
    "\063\024\064\032\072\026\001\002\000\014\031\027\061" +
    "\031\063\024\064\032\072\026\001\002\000\014\031\027" +
    "\061\031\063\024\064\032\072\026\001\002\000\014\031" +
    "\027\061\031\063\024\064\032\072\026\001\002\000\014" +
    "\031\027\061\031\063\024\064\032\072\026\001\002\000" +
    "\032\005\040\006\034\007\037\010\043\011\035\012\036" +
    "\013\041\014\042\023\uffbd\024\uffbd\026\uffbd\032\uffbd\001" +
    "\002\000\032\005\040\006\034\007\037\010\043\011\035" +
    "\012\036\013\041\014\042\023\uffbe\024\uffbe\026\uffbe\032" +
    "\uffbe\001\002\000\032\005\040\006\034\007\037\010\043" +
    "\011\035\012\036\013\041\014\042\023\uffbb\024\uffbb\026" +
    "\uffbb\032\uffbb\001\002\000\032\005\040\006\034\007\037" +
    "\010\043\011\035\012\036\013\041\014\042\023\uffbf\024" +
    "\uffbf\026\uffbf\032\uffbf\001\002\000\032\005\040\006\034" +
    "\007\037\010\043\011\035\012\036\013\041\014\042\023" +
    "\uffbc\024\uffbc\026\uffbc\032\uffbc\001\002\000\032\005\040" +
    "\006\034\007\037\010\043\011\035\012\036\013\041\014" +
    "\042\023\uffc0\024\uffc0\026\uffc0\032\uffc0\001\002\000\012" +
    "\023\uffc2\024\uffc2\026\uffc2\032\uffc2\001\002\000\016\025" +
    "\057\031\027\061\031\063\024\064\032\072\026\001\002" +
    "\000\016\025\057\031\027\061\031\063\024\064\032\072" +
    "\026\001\002\000\012\023\076\024\uffc3\026\uffc3\032\uffc3" +
    "\001\002\000\012\023\uffc4\024\uffc4\026\uffc4\032\uffc4\001" +
    "\002\000\062\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\026\uffb3\032\uffb3\034\uffb3\052\uffb3\062\uffb3\065\uffb3\001" +
    "\002\000\004\072\110\001\002\000\004\072\107\001\002" +
    "\000\004\072\106\001\002\000\064\002\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\026\uffa9\027\uffa9\032\uffa9\034\uffa9" +
    "\052\uffa9\062\uffa9\065\uffa9\001\002\000\064\002\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa\032\uffaa" +
    "\034\uffaa\052\uffaa\062\uffaa\065\uffaa\001\002\000\064\002" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\026\uffab\027\uffab" +
    "\032\uffab\034\uffab\052\uffab\062\uffab\065\uffab\001\002\000" +
    "\014\031\027\061\031\063\024\064\032\072\026\001\002" +
    "\000\010\023\076\024\077\026\113\001\002\000\012\002" +
    "\ufff2\052\ufff2\062\ufff2\065\ufff2\001\002\000\006\004\116" +
    "\034\117\001\002\000\026\004\uffea\005\040\006\034\007" +
    "\037\010\043\011\035\012\036\013\041\014\042\034\uffea" +
    "\001\002\000\014\031\027\061\031\063\024\064\032\072" +
    "\026\001\002\000\004\026\120\001\002\000\012\002\uffef" +
    "\052\uffef\062\uffef\065\uffef\001\002\000\026\004\uffeb\005" +
    "\040\006\034\007\037\010\043\011\035\012\036\013\041" +
    "\014\042\034\uffeb\001\002\000\004\031\123\001\002\000" +
    "\006\032\uffc8\065\126\001\002\000\004\032\131\001\002" +
    "\000\006\004\127\032\uffc7\001\002\000\006\004\uffc5\032" +
    "\uffc5\001\002\000\004\065\130\001\002\000\006\004\uffc6" +
    "\032\uffc6\001\002\000\004\033\132\001\002\000\026\034" +
    "\uffd6\041\152\043\140\046\146\047\155\050\154\051\143" +
    "\053\151\054\157\062\011\001\002\000\010\034\uffd1\044" +
    "\uffd1\045\uffd1\001\002\000\004\034\254\001\002\000\010" +
    "\034\uffd3\044\uffd3\045\uffd3\001\002\000\010\034\uffd2\044" +
    "\uffd2\045\uffd2\001\002\000\010\034\uffd4\044\uffd4\045\uffd4" +
    "\001\002\000\004\031\235\001\002\000\010\034\uffcc\044" +
    "\uffcc\045\uffcc\001\002\000\010\034\uffcf\044\uffcf\045\uffcf" +
    "\001\002\000\004\031\231\001\002\000\010\034\uffce\044" +
    "\uffce\045\uffce\001\002\000\010\034\uffcd\044\uffcd\045\uffcd" +
    "\001\002\000\004\031\211\001\002\000\010\034\uffd0\044" +
    "\uffd0\045\uffd0\001\002\000\010\034\uffcb\044\uffcb\045\uffcb" +
    "\001\002\000\016\025\057\031\027\061\031\063\024\064" +
    "\032\072\026\001\002\000\004\031\173\001\002\000\010" +
    "\034\uffd5\044\uffd5\045\uffd5\001\002\000\004\026\172\001" +
    "\002\000\004\031\164\001\002\000\010\034\uffca\044\uffca" +
    "\045\uffca\001\002\000\004\031\160\001\002\000\016\025" +
    "\057\031\027\061\031\063\024\064\032\072\026\001\002" +
    "\000\010\023\076\024\077\032\162\001\002\000\004\026" +
    "\163\001\002\000\010\034\uffd7\044\uffd7\045\uffd7\001\002" +
    "\000\016\025\057\031\027\061\031\063\024\064\032\072" +
    "\026\001\002\000\010\023\076\024\077\032\166\001\002" +
    "\000\004\033\167\001\002\000\026\034\uffd6\041\152\043" +
    "\140\046\146\047\155\050\154\051\143\053\151\054\157" +
    "\062\011\001\002\000\004\034\171\001\002\000\010\034" +
    "\uffdb\044\uffdb\045\uffdb\001\002\000\010\034\uffda\044\uffda" +
    "\045\uffda\001\002\000\016\025\057\031\027\061\031\063" +
    "\024\064\032\072\026\001\002\000\010\023\076\024\077" +
    "\032\175\001\002\000\004\033\176\001\002\000\026\034" +
    "\uffd6\041\152\043\140\046\146\047\155\050\154\051\143" +
    "\053\151\054\157\062\011\001\002\000\004\034\200\001" +
    "\002\000\012\034\uffe7\042\202\044\uffe7\045\uffe7\001\002" +
    "\000\010\034\uffe6\044\uffe6\045\uffe6\001\002\000\004\033" +
    "\204\001\002\000\010\034\uffe8\044\uffe8\045\uffe8\001\002" +
    "\000\026\034\uffd6\041\152\043\140\046\146\047\155\050" +
    "\154\051\143\053\151\054\157\062\011\001\002\000\004" +
    "\034\206\001\002\000\010\034\uffe5\044\uffe5\045\uffe5\001" +
    "\002\000\010\023\076\024\077\026\210\001\002\000\010" +
    "\034\uffd8\044\uffd8\045\uffd8\001\002\000\004\065\213\001" +
    "\002\000\004\026\217\001\002\000\004\027\214\001\002" +
    "\000\012\061\031\063\024\064\032\072\026\001\002\000" +
    "\006\026\uffe9\027\uffe9\001\002\000\004\026\uffde\001\002" +
    "\000\016\025\057\031\027\061\031\063\024\064\032\072" +
    "\026\001\002\000\010\023\076\024\077\026\221\001\002" +
    "\000\006\013\224\014\223\001\002\000\004\032\225\001" +
    "\002\000\004\032\uffdc\001\002\000\004\032\uffdd\001\002" +
    "\000\004\033\226\001\002\000\026\034\uffd6\041\152\043" +
    "\140\046\146\047\155\050\154\051\143\053\151\054\157" +
    "\062\011\001\002\000\004\034\230\001\002\000\010\034" +
    "\uffdf\044\uffdf\045\uffdf\001\002\000\016\025\057\031\027" +
    "\061\031\063\024\064\032\072\026\001\002\000\010\023" +
    "\076\024\077\032\233\001\002\000\004\026\234\001\002" +
    "\000\010\034\uffd9\044\uffd9\045\uffd9\001\002\000\014\031" +
    "\027\061\031\063\024\064\032\072\026\001\002\000\024" +
    "\005\040\006\034\007\037\010\043\011\035\012\036\013" +
    "\041\014\042\032\237\001\002\000\004\033\240\001\002" +
    "\000\006\044\244\045\242\001\002\000\010\034\253\044" +
    "\244\045\242\001\002\000\004\027\250\001\002\000\010" +
    "\034\uffe2\044\uffe2\045\uffe2\001\002\000\012\061\031\063" +
    "\024\064\032\072\026\001\002\000\004\027\246\001\002" +
    "\000\032\034\uffd6\041\152\043\140\044\uffd6\045\uffd6\046" +
    "\146\047\155\050\154\051\143\053\151\054\157\062\011" +
    "\001\002\000\010\034\uffe1\044\uffe1\045\uffe1\001\002\000" +
    "\032\034\uffd6\041\152\043\140\044\uffd6\045\uffd6\046\146" +
    "\047\155\050\154\051\143\053\151\054\157\062\011\001" +
    "\002\000\010\034\uffe0\044\uffe0\045\uffe0\001\002\000\010" +
    "\034\uffe3\044\uffe3\045\uffe3\001\002\000\010\034\uffe4\044" +
    "\uffe4\045\uffe4\001\002\000\012\002\uffc9\052\uffc9\062\uffc9" +
    "\065\uffc9\001\002\000\010\026\ufff4\027\256\033\260\001" +
    "\002\000\020\025\057\031\027\033\265\061\031\063\024" +
    "\064\032\072\026\001\002\000\004\026\264\001\002\000" +
    "\014\031\027\061\031\063\024\064\032\072\026\001\002" +
    "\000\024\005\040\006\034\007\037\010\043\011\035\012" +
    "\036\013\041\014\042\034\262\001\002\000\004\026\263" +
    "\001\002\000\020\002\ufff0\034\ufff0\044\ufff0\045\ufff0\052" +
    "\ufff0\062\ufff0\065\ufff0\001\002\000\020\002\ufff5\034\ufff5" +
    "\044\ufff5\045\ufff5\052\ufff5\062\ufff5\065\ufff5\001\002\000" +
    "\014\031\027\061\031\063\024\064\032\072\026\001\002" +
    "\000\010\023\076\024\077\026\ufff3\001\002\000\006\004" +
    "\116\034\270\001\002\000\004\026\271\001\002\000\020" +
    "\002\ufff1\034\ufff1\044\ufff1\045\ufff1\052\ufff1\062\ufff1\065" +
    "\ufff1\001\002\000\012\002\ufffe\052\ufffe\062\ufffe\065\ufffe" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\030\002\003\003\006\004\005\006\016\007" +
    "\013\010\011\011\014\012\012\037\004\047\007\050\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\005\006\016\007\013" +
    "\010\011\011\014\012\012\037\004\050\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\042\111" +
    "\043\054\044\057\045\027\046\024\001\001\000\010\044" +
    "\032\045\027\046\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\042\055\043\054\044" +
    "\057\045\027\046\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\053\045\027\046\024\001\001\000\010\044\052\045\027" +
    "\046\024\001\001\000\010\044\051\045\027\046\024\001" +
    "\001\000\010\044\050\045\027\046\024\001\001\000\010" +
    "\044\047\045\027\046\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\044\046\045\027\046\024\001\001" +
    "\000\002\001\001\000\010\044\045\045\027\046\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\042\074\043\054\044\057\045\027\046\024\001\001\000" +
    "\002\001\001\000\010\044\073\045\027\046\024\001\001" +
    "\000\010\044\072\045\027\046\024\001\001\000\010\044" +
    "\071\045\027\046\024\001\001\000\010\044\070\045\027" +
    "\046\024\001\001\000\010\044\067\045\027\046\024\001" +
    "\001\000\010\044\066\045\027\046\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\042\100\043\054\044\057\045\027\046\024\001" +
    "\001\000\014\042\077\043\054\044\057\045\027\046\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\113\044\114\045\027\046\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\044\120\045\027\046\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\123\041\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\135\007\136" +
    "\010\134\017\132\022\146\025\143\030\133\031\141\032" +
    "\144\033\140\034\147\035\155\036\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\042\206\043\054\044\057\045\027\046" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\042\160\043\054\044\057\045\027\046\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\042\164\043\054\044\057\045\027\046\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\135\007\136\010\134\017\132\022\146\025\143\030\167" +
    "\031\141\032\144\033\140\034\147\035\155\036\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\042\173\043\054\044\057\045\027\046\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\135" +
    "\007\136\010\134\017\132\022\146\025\143\030\176\031" +
    "\141\032\144\033\140\034\147\035\155\036\152\001\001" +
    "\000\002\001\001\000\006\020\202\021\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\135\007\136\010\134\017\132\022\146\025\143\030" +
    "\204\031\141\032\144\033\140\034\147\035\155\036\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\215\046\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\042\217" +
    "\043\054\044\057\045\027\046\024\001\001\000\002\001" +
    "\001\000\004\027\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\135\007\136\010\134\017\132\022\146\025\143\030\226" +
    "\031\141\032\144\033\140\034\147\035\155\036\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\042\231" +
    "\043\054\044\057\045\027\046\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\044\235" +
    "\045\027\046\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\240\024\242\001\001\000\004\024\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\244\046\214\001\001\000\002\001\001\000\034\004\135" +
    "\007\136\010\134\017\132\022\146\025\143\030\246\031" +
    "\141\032\144\033\140\034\147\035\155\036\152\001\001" +
    "\000\002\001\001\000\034\004\135\007\136\010\134\017" +
    "\132\022\146\025\143\030\250\031\141\032\144\033\140" +
    "\034\147\035\155\036\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\256\001\001\000\014\042\265\043\054\044\057\045" +
    "\027\046\024\001\001\000\002\001\001\000\010\044\260" +
    "\045\027\046\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\266" +
    "\044\114\045\027\046\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_CJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_CJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_CJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }

    //Este metodo retorna la RAIZ del arbol  generado 
    public Nodo getRoot(){
        return action_obj.root;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_CJS$actions {


    //se declaran variables globales etc.
    //GestorC3D gs = new GestorC3D();
    public int Index=1;
    public Nodo root = new Nodo();

  private final AS_CJS parser;

  /** Constructor */
  CUP$AS_CJS$actions(AS_CJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_CJS$do_action(
    int                        CUP$AS_CJS$act_num,
    java_cup.runtime.lr_parser CUP$AS_CJS$parser,
    java.util.Stack            CUP$AS_CJS$stack,
    int                        CUP$AS_CJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_CJS$result;

      /* select the action based on the action number */
      switch (CUP$AS_CJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dato ::= COMS DATETIME_LITERAL COMS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = parser.crearNodo("datetime",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dato ::= COMS DATE_LITERAL COMS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = parser.crearNodo("date",a.getCadena(),a.getLinea(),a.getColumna());      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dato ::= COMS BOOLEAN_LITERAL COMS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = parser.crearNodo("boolean",a.getCadena(),a.getLinea(),a.getColumna());   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dato ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dato ::= NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dato ::= STRING_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                            String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                            RESULT = parser.crearNodo("string",cad,a.getLinea(),a.getColumna()); 
                          
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simplificada ::= expr_a SUB 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("simplificada",35, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simplificada ::= expr_a ADD 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("simplificada",35, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_a ::= simplificada 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_a ::= dato 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_a ::= APAR expr_l CPAR 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_a ::= expr_a POT expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("POT","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_a ::= expr_a MOD expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MOD","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_a ::= expr_a DIV expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("DIV","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_a ::= expr_a POR expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("POR","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_a ::= expr_a MENOS expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MENOS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_a ::= expr_a MAS expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MAS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_r ::= expr_a 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT = r;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_r ::= expr_a DIF expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("DIF","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_r ::= expr_a IG_IG expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("IG_IG","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_r ::= expr_a MAYIQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MAYIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_r ::= expr_a MAYQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MAYQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_r ::= expr_a MENIQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MENIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_r ::= expr_a MENQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MENQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_l ::= expr_r 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=a;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_l ::= NOT expr_l 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    
                                          RESULT = parser.crearNodo("NOT","",a.getLinea(),a.getColumna());
                                          RESULT.add(b);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_l ::= expr_l OR expr_l 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("OR","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_l ::= expr_l AND expr_l 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("AND","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                       
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_parametros ::= I_D 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("parametros","",x.getLinea(),x.getColumna());
                        Nodo param = parser.crearNodo("parametro","",x.getLinea(),x.getColumna());
                        param.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));
                        RESULT.add(param);    
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_parametros",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_parametros ::= lista_parametros COMA I_D 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        Nodo param = parser.crearNodo("parametro","",y.getLinea(),y.getColumna());
                        param.add(parser.crearNodo("id",y.getCadena(),y.getLinea(),y.getColumna()));
                        x.add(param);
                        RESULT=x;
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_parametros",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros ::= lista_parametros 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		     RESULT=x;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("parametros","",0,0);  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funcion ::= FUNCION I_D APAR parametros CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo z = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                RESULT = parser.crearNodo("funcion","",w.getLinea(),w.getColumna()); // se crea la raiz FUNCION
                RESULT.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));// agrego el nombre 
                RESULT.add(y);//agrego los parametros
                RESULT.add(z);//agrego las instrucciones
           
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion",29, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instrucciones ::= Mensaje 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instrucciones ::= Retornar 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Instrucciones ::= Imprimir 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instrucciones ::= Detener 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instrucciones ::= Para 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instrucciones ::= Mientras 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Instrucciones ::= Selecciona 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instrucciones ::= Si 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instrucciones ::= declara_var 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instrucciones ::= declara_vecF2 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instrucciones ::= declara_vecF1 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instrucciones ::= Instrucciones 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("instrucciones",22, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instrucciones ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("instrucciones","",0,0);  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("instrucciones",22, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Mensaje ::= MENSAJE APAR expr_l CPAR PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Mensaje",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Retornar ::= RETORNAR expr_l PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Retornar",26, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Imprimir ::= IMPRIMIR APAR expr_l CPAR PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Imprimir",25, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Detener ::= DETENER PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Detener",24, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Mientras ::= MIENTRAS APAR expr_l CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Mientras",23, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operador ::= SUB 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("operador",21, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operador ::= ADD 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("operador",21, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_for ::= I_D DSPTS valor 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dec_for",20, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Para ::= PARA APAR dec_for PYC expr_l PYC operador CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Para",19, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // caso_defecto ::= DEFECTO DSPTS instrucciones 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("caso_defecto",18, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // caso_defecto ::= CASO valor DSPTS instrucciones 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("caso_defecto",18, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_casos ::= caso_defecto 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_casos",17, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_casos ::= lista_casos caso_defecto 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_casos",17, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Selecciona ::= SELECCIONA APAR expr_a CPAR ALLA lista_casos CLLA 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Selecciona",16, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Sino ::= SINO ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Sino",15, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opcional ::= Sino 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("opcional",14, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opcional ::= 
            {
              Nodo RESULT =null;
		
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("opcional",14, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Si ::= SI APAR expr_l CPAR ALLA instrucciones CLLA opcional 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Si",13, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= dato 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = a;
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_valores ::= expr_a 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("valores","",X.linea,X.columna);
                    RESULT.add(X);
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_valores",9, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_valores ::= lista_valores COMA expr_a 
            {
              Nodo RESULT =null;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    Y.add(X);
                    RESULT=Y;
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_valores",9, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion_acadena ::= I_D PTO ATEXTO PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion_acadena",11, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion_conteo ::= I_D PTO CONTEO PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion_conteo",10, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asigna_vecGlbF2 ::= I_D ALLA expr_a CLLA DSPTS expr_a 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                       RESULT = parser.crearNodo("asigna_vecGlbF2","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                       Nodo dim=parser.crearNodo("dimensiones","",b.linea,b.columna);
                       dim.add(b);
                       RESULT.add(dim);
                       RESULT.add(X);
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_vecGlbF2",8, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asigna_vecGlbF1 ::= I_D DSPTS ALLA lista_valores CLLA PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                       RESULT = parser.crearNodo("asigna_vecGlbF1","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                       Nodo dim=parser.crearNodo("dimensiones","",c.linea,c.columna);
                       dim.add(c);
                       RESULT.add(dim);
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_vecGlbF1",7, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declara_vecF2 ::= DIMV I_D ALLA expr_a CLLA PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		// se declara el tamano del vector unidimensional
                    RESULT = parser.crearNodo("declara_vecF2","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));
                    Nodo dim=parser.crearNodo("dimensiones","",c.linea,c.columna);
                    dim.add(c);
                    RESULT.add(dim);
                    
                 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_vecF2",6, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declara_vecF1 ::= DIMV I_D DSPTS ALLA lista_valores CLLA PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		// se crea el vector con valores
                    RESULT = parser.crearNodo("declara_vecF1","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));   
                    RESULT.add(c);
                 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_vecF1",5, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacionGlb ::= I_D DSPTS expr_l PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                    RESULT = parser.crearNodo("asignacion","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                    RESULT.add(b);    
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asignacionGlb",4, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asigna_var ::= DSPTS expr_l 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("asigna_var","",a.linea,a.columna);
                    RESULT.add(a);   
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_var",3, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asigna_var ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("asigna_var","",0,0);    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_var",3, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declara_var ::= DIMV I_D asigna_var PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                        RESULT = parser.crearNodo("declara_var","",a.getLinea(),a.getColumna());
                        RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));
                        RESULT.add(c);
                        
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_var",2, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenido_cjs ::= funcion 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenido_cjs ::= asigna_vecGlbF2 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenido_cjs ::= asigna_vecGlbF1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenido_cjs ::= asignacionGlb 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenido_cjs ::= declara_vecF2 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenido_cjs ::= declara_vecF1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenido_cjs ::= declara_var 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lcontenido_cjs ::= contenido_cjs 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("contenido","",0,0);  
                        RESULT.add(x);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Lcontenido_cjs",37, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lcontenido_cjs ::= Lcontenido_cjs contenido_cjs 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        r.add(x);
                        RESULT=r;
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Lcontenido_cjs",37, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // raiz ::= Lcontenido_cjs 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		     RESULT=a;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= raiz 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		   root=r;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		RESULT = start_val;
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_CJS$parser.done_parsing();
          return CUP$AS_CJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

