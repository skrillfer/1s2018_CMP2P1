
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 12 23:57:10 CST 2018
//----------------------------------------------------

package Analizadores.LenguajeCJS;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 12 23:57:10 CST 2018
  */
public class AS_CJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_CJS() {super();}

  /** Constructor which sets the default scanner. */
  public AS_CJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_CJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\006\000\002\005\002\000\002\005\004" +
    "\000\002\006\006\000\002\007\011\000\002\010\010\000" +
    "\002\011\010\000\002\013\006\000\002\014\006\000\002" +
    "\012\005\000\002\012\003\000\002\015\003\000\002\016" +
    "\012\000\002\017\002\000\002\017\003\000\002\020\006" +
    "\000\002\021\011\000\002\022\004\000\002\022\003\000" +
    "\002\023\006\000\002\023\005\000\002\024\015\000\002" +
    "\025\005\000\002\026\003\000\002\026\003\000\002\030" +
    "\011\000\002\031\004\000\002\032\007\000\002\033\005" +
    "\000\002\034\007\000\002\027\002\000\002\027\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\036\012\000\002\037\002\000\002\037\003\000\002" +
    "\040\005\000\002\040\003\000\002\041\005\000\002\041" +
    "\005\000\002\041\004\000\002\041\003\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\003\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\003\000\002\043\003\000\002\044\004\000" +
    "\002\044\004\000\002\045\003\000\002\045\003\000\002" +
    "\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\004\061\006\001\002\000\004\002\007\001" +
    "\002\000\004\002\000\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_CJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_CJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_CJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_CJS$actions {


    //se declaran variables globales etc.
    //GestorC3D gs = new GestorC3D();

  private final AS_CJS parser;

  /** Constructor */
  CUP$AS_CJS$actions(AS_CJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_CJS$do_action(
    int                        CUP$AS_CJS$act_num,
    java_cup.runtime.lr_parser CUP$AS_CJS$parser,
    java.util.Stack            CUP$AS_CJS$stack,
    int                        CUP$AS_CJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_CJS$result;

      /* select the action based on the action number */
      switch (CUP$AS_CJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dato ::= DECIMAL 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",35, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dato ::= NUM 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",35, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dato ::= STRING_LITERAL 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",35, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simplificada ::= expr_a SUB 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("simplificada",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simplificada ::= expr_a ADD 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("simplificada",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_a ::= simplificada 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_a ::= dato 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_a ::= APAR expr_l CPAR 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_a ::= expr_a POT expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_a ::= expr_a MOD expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_a ::= expr_a DIV expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_a ::= expr_a POR expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_a ::= expr_a MENOS expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_a ::= expr_a MAS expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_r ::= expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_r ::= expr_a DIF expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_r ::= expr_a IG_IG expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_r ::= expr_a MAYIQ expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_r ::= expr_a MAYQ expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_r ::= expr_a MENIQ expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_r ::= expr_a MENQ expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_l ::= expr_r 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_l ::= NOT expr_l 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_l ::= expr_l OR expr_l 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_l ::= expr_l AND expr_l 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista_parametros ::= expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_parametros",30, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_parametros ::= lista_parametros COMA expr_a 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_parametros",30, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros ::= lista_parametros 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= 
            {
              Nodo RESULT =null;
		
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("parametros",29, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcion ::= FUNCION I_D APAR parametros CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instrucciones ::= Mensaje 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instrucciones ::= Retornar 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instrucciones ::= Imprimir 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instrucciones ::= Detener 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instrucciones ::= Para 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instrucciones ::= Mientras 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instrucciones ::= Selecciona 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instrucciones ::= Si 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instrucciones ::= declara_var 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instrucciones ::= asigna_vec 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instrucciones ::= declara_vecF2 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instrucciones ::= declara_vecF1 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instrucciones ::= asignacion 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= Instrucciones 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("instrucciones",21, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones ::= 
            {
              Nodo RESULT =null;
		
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("instrucciones",21, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Mensaje ::= MENSAJE APAR expr_l CPAR PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Mensaje",26, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Retornar ::= RETORNAR expr_l PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Retornar",25, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Imprimir ::= IMPRIMIR APAR expr_l CPAR PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Imprimir",24, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Detener ::= DETENER PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Detener",23, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Mientras ::= MIENTRAS APAR expr_l CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Mientras",22, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operador ::= SUB 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operador ::= ADD 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("operador",20, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_for ::= I_D DSPTS valor 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dec_for",19, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Para ::= PARA APAR dec_for PYC expr_l PYC operador CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Para",18, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // caso_defecto ::= DEFECTO DSPTS instrucciones 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("caso_defecto",17, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // caso_defecto ::= CASO valor DSPTS instrucciones 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("caso_defecto",17, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_casos ::= caso_defecto 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_casos",16, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_casos ::= lista_casos caso_defecto 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_casos",16, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Selecciona ::= SELECCIONA APAR expr_a CPAR ALLA lista_casos CLLA 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Selecciona",15, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sino ::= SINO ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Sino",14, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opcional ::= Sino 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("opcional",13, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opcional ::= 
            {
              Nodo RESULT =null;
		
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("opcional",13, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Si ::= SI APAR expr_l CPAR ALLA instrucciones CLLA opcional 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Si",12, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valor ::= dato 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_valores ::= valor 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_valores ::= lista_valores COMA valor 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_valores",8, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcion_acadena ::= I_D PTO ATEXTO PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion_acadena",10, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion_conteo ::= I_D PTO CONTEO PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion_conteo",9, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // asigna_vec ::= I_D DSPTS ALLA lista_valores CLLA PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_vec",7, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declara_vecF2 ::= DIMV I_D ALLA NUM CLLA PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_vecF2",6, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declara_vecF1 ::= DIMV I_D DSPTS ALLA lista_valores CLLA PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_vecF1",5, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // asignacion ::= I_D DSPTS valor PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // asigna_var ::= DSPTS valor 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_var",3, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // asigna_var ::= 
            {
              Nodo RESULT =null;
		
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_var",3, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declara_var ::= DIMV I_D asigna_var PYC 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_var",2, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // raiz ::= STRING_LITERAL 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= raiz 
            {
              Nodo RESULT =null;

              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		RESULT = start_val;
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_CJS$parser.done_parsing();
          return CUP$AS_CJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

