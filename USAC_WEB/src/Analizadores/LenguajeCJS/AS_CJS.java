
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 06 14:07:21 CST 2018
//----------------------------------------------------

package Analizadores.LenguajeCJS;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 06 14:07:21 CST 2018
  */
public class AS_CJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_CJS() {super();}

  /** Constructor which sets the default scanner. */
  public AS_CJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_CJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\047\004\000\002\047\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\004\006\000\002\005\002\000\002\005\004\000\002\006" +
    "\006\000\002\007\011\000\002\010\010\000\002\011\010" +
    "\000\002\012\011\000\002\014\005\000\002\015\007\000" +
    "\002\013\005\000\002\013\003\000\002\016\003\000\002" +
    "\017\012\000\002\020\002\000\002\020\003\000\002\021" +
    "\006\000\002\022\011\000\002\054\002\000\002\054\003" +
    "\000\002\023\004\000\002\023\003\000\002\024\006\000" +
    "\002\024\005\000\002\025\015\000\002\026\005\000\002" +
    "\027\003\000\002\027\003\000\002\031\011\000\002\032" +
    "\004\000\002\033\007\000\002\034\005\000\002\035\007" +
    "\000\002\030\002\000\002\030\003\000\002\036\004\000" +
    "\002\036\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\004\000\002" +
    "\053\004\000\002\053\004\000\002\061\004\000\002\062" +
    "\004\000\002\062\004\000\002\062\004\000\002\062\004" +
    "\000\002\063\007\000\002\064\011\000\002\065\011\000" +
    "\002\066\010\000\002\066\005\000\002\037\012\000\002" +
    "\040\002\000\002\040\003\000\002\041\005\000\002\041" +
    "\003\000\002\042\005\000\002\042\005\000\002\042\004" +
    "\000\002\042\003\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\003\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\004\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\060\006\000\002\045\004\000\002\045" +
    "\004\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\055\006\000\002\057\002\000\002\057" +
    "\003\000\002\056\005\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\010\052\020\062\011\065\021\001\002\000" +
    "\004\002\u0100\001\002\000\012\002\ufff6\052\ufff6\062\ufff6" +
    "\065\ufff6\001\002\000\012\002\ufffc\052\ufffc\062\ufffc\065" +
    "\ufffc\001\002\000\004\002\000\001\002\000\012\002\uffff" +
    "\052\020\062\011\065\021\001\002\000\004\065\362\001" +
    "\002\000\012\002\ufffa\052\ufffa\062\ufffa\065\ufffa\001\002" +
    "\000\012\002\ufff7\052\ufff7\062\ufff7\065\ufff7\001\002\000" +
    "\012\002\ufffb\052\ufffb\062\ufffb\065\ufffb\001\002\000\012" +
    "\002\ufff8\052\ufff8\062\ufff8\065\ufff8\001\002\000\012\002" +
    "\ufffd\052\ufffd\062\ufffd\065\ufffd\001\002\000\012\002\ufff9" +
    "\052\ufff9\062\ufff9\065\ufff9\001\002\000\004\065\161\001" +
    "\002\000\006\027\022\033\023\001\002\000\026\006\026" +
    "\025\036\031\040\033\151\055\044\061\043\063\042\064" +
    "\034\065\037\072\027\001\002\000\024\006\026\025\036" +
    "\031\040\055\044\061\043\063\042\064\034\065\037\072" +
    "\027\001\002\000\054\004\uff8e\005\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e" +
    "\026\uff8e\027\uff8e\032\uff8e\034\uff8e\001\002\000\016\004" +
    "\uffad\023\uffad\024\uffad\026\uffad\032\uffad\034\uffad\001\002" +
    "\000\022\006\026\031\040\055\044\061\043\063\042\064" +
    "\034\065\037\072\027\001\002\000\010\067\141\070\142" +
    "\071\143\001\002\000\054\004\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\026\uff8d\027\uff8d\032\uff8d\034\uff8d\001\002\000\054" +
    "\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\024\uff9a\026\uff9a\027\uff9a\032" +
    "\uff9a\034\uff9a\001\002\000\054\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\026\uff9b\027\uff9b\032\uff9b\034\uff9b\001\002\000" +
    "\010\023\054\024\055\034\135\001\002\000\054\004\uff93" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013" +
    "\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93" +
    "\022\uff93\023\uff93\024\uff93\026\uff93\027\uff93\032\uff93\034" +
    "\uff93\001\002\000\054\004\uff8f\005\uff8f\006\uff8f\007\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016" +
    "\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\026\uff8f\027\uff8f\032\uff8f\034\uff8f\001\002\000\024\006" +
    "\026\025\036\031\040\055\044\061\043\063\042\064\034" +
    "\065\037\072\027\001\002\000\062\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023" +
    "\uff96\024\uff96\026\uff96\027\uff96\031\115\032\uff96\033\116" +
    "\034\uff96\066\117\001\002\000\024\006\026\025\036\031" +
    "\040\055\044\061\043\063\042\064\034\065\037\072\027" +
    "\001\002\000\052\004\uffa6\005\071\006\061\007\067\010" +
    "\075\011\063\012\065\013\072\014\074\015\062\016\070" +
    "\017\073\020\076\021\064\022\066\023\uffa6\024\uffa6\026" +
    "\uffa6\032\uffa6\034\uffa6\001\002\000\054\004\uff94\005\uff94" +
    "\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\026\uff94\027\uff94\032\uff94\034\uff94\001" +
    "\002\000\054\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017" +
    "\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\026\uff95" +
    "\027\uff95\032\uff95\034\uff95\001\002\000\004\066\050\001" +
    "\002\000\054\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d" +
    "\027\uff9d\032\uff9d\034\uff9d\001\002\000\054\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\026\uff9c\027\uff9c\032\uff9c\034\uff9c" +
    "\001\002\000\056\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\032\uffbf\034\uffbf\066\uffbf\001\002\000\004" +
    "\056\051\001\002\000\004\031\052\001\002\000\024\006" +
    "\026\025\036\031\040\055\044\061\043\063\042\064\034" +
    "\065\037\072\027\001\002\000\010\023\054\024\055\032" +
    "\056\001\002\000\024\006\026\025\036\031\040\055\044" +
    "\061\043\063\042\064\034\065\037\072\027\001\002\000" +
    "\024\006\026\025\036\031\040\055\044\061\043\063\042" +
    "\064\034\065\037\072\027\001\002\000\056\004\uffba\005" +
    "\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\026\uffba\027\uffba\032\uffba\034\uffba" +
    "\066\uffba\001\002\000\016\004\uffaf\023\054\024\uffaf\026" +
    "\uffaf\032\uffaf\034\uffaf\001\002\000\016\004\uffb0\023\uffb0" +
    "\024\uffb0\026\uffb0\032\uffb0\034\uffb0\001\002\000\022\006" +
    "\026\031\040\055\044\061\043\063\042\064\034\065\037" +
    "\072\027\001\002\000\022\006\026\031\040\055\044\061" +
    "\043\063\042\064\034\065\037\072\027\001\002\000\022" +
    "\006\026\031\040\055\044\061\043\063\042\064\034\065" +
    "\037\072\027\001\002\000\022\006\026\031\040\055\044" +
    "\061\043\063\042\064\034\065\037\072\027\001\002\000" +
    "\022\006\026\031\040\055\044\061\043\063\042\064\034" +
    "\065\037\072\027\001\002\000\022\006\026\031\040\055" +
    "\044\061\043\063\042\064\034\065\037\072\027\001\002" +
    "\000\022\006\026\031\040\055\044\061\043\063\042\064" +
    "\034\065\037\072\027\001\002\000\022\006\026\031\040" +
    "\055\044\061\043\063\042\064\034\065\037\072\027\001" +
    "\002\000\022\006\026\031\040\055\044\061\043\063\042" +
    "\064\034\065\037\072\027\001\002\000\054\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\026\uff98\027\uff98\032\uff98\034\uff98" +
    "\001\002\000\022\006\026\031\040\055\044\061\043\063" +
    "\042\064\034\065\037\072\027\001\002\000\054\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\026\uff97\027\uff97\032\uff97\034" +
    "\uff97\001\002\000\022\006\026\031\040\055\044\061\043" +
    "\063\042\064\034\065\037\072\027\001\002\000\022\006" +
    "\026\031\040\055\044\061\043\063\042\064\034\065\037" +
    "\072\027\001\002\000\036\004\uffa9\005\071\006\061\007" +
    "\067\010\075\011\063\012\065\013\072\014\074\023\uffa9" +
    "\024\uffa9\026\uffa9\032\uffa9\034\uffa9\001\002\000\054\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\063\012\uffa2" +
    "\013\072\014\074\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2\027\uffa2\032\uffa2" +
    "\034\uffa2\001\002\000\036\004\uffaa\005\071\006\061\007" +
    "\067\010\075\011\063\012\065\013\072\014\074\023\uffaa" +
    "\024\uffaa\026\uffaa\032\uffaa\034\uffaa\001\002\000\054\004" +
    "\uffa5\005\uffa5\006\uffa5\007\067\010\075\011\063\012\065" +
    "\013\072\014\074\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\032\uffa5" +
    "\034\uffa5\001\002\000\036\004\uffab\005\071\006\061\007" +
    "\067\010\075\011\063\012\065\013\072\014\074\023\uffab" +
    "\024\uffab\026\uffab\032\uffab\034\uffab\001\002\000\054\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\063\012\uffa3" +
    "\013\072\014\074\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\032\uffa3" +
    "\034\uffa3\001\002\000\036\004\uffa7\005\071\006\061\007" +
    "\067\010\075\011\063\012\065\013\072\014\074\023\uffa7" +
    "\024\uffa7\026\uffa7\032\uffa7\034\uffa7\001\002\000\054\004" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\063\012\uffa1" +
    "\013\072\014\074\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1\027\uffa1\032\uffa1" +
    "\034\uffa1\001\002\000\036\004\uffa8\005\071\006\061\007" +
    "\067\010\075\011\063\012\065\013\072\014\074\023\uffa8" +
    "\024\uffa8\026\uffa8\032\uffa8\034\uffa8\001\002\000\054\004" +
    "\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0" +
    "\013\072\014\074\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0\027\uffa0\032\uffa0" +
    "\034\uffa0\001\002\000\036\004\uffac\005\071\006\061\007" +
    "\067\010\075\011\063\012\065\013\072\014\074\023\uffac" +
    "\024\uffac\026\uffac\032\uffac\034\uffac\001\002\000\054\004" +
    "\uffa4\005\uffa4\006\uffa4\007\067\010\075\011\063\012\065" +
    "\013\072\014\074\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4\032\uffa4" +
    "\034\uffa4\001\002\000\010\023\054\024\055\032\114\001" +
    "\002\000\054\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f" +
    "\027\uff9f\032\uff9f\034\uff9f\001\002\000\026\006\026\025" +
    "\036\031\040\032\uff8b\055\044\061\043\063\042\064\034" +
    "\065\037\072\027\001\002\000\024\006\026\025\036\031" +
    "\040\055\044\061\043\063\042\064\034\065\037\072\027" +
    "\001\002\000\006\037\121\040\120\001\002\000\004\031" +
    "\122\001\002\000\054\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\026\uffed\027\uffed\032\uffed\034\uffed\001\002\000\004\032" +
    "\123\001\002\000\054\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\026\uffec\027\uffec\032\uffec\034\uffec\001\002\000\010\023" +
    "\054\024\055\034\125\001\002\000\054\004\uff99\005\uff99" +
    "\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\026\uff99\027\uff99\032\uff99\034\uff99\001" +
    "\002\000\012\004\uff88\023\054\024\055\032\uff88\001\002" +
    "\000\004\032\133\001\002\000\006\004\131\032\uff8a\001" +
    "\002\000\024\006\026\025\036\031\040\055\044\061\043" +
    "\063\042\064\034\065\037\072\027\001\002\000\012\004" +
    "\uff89\023\054\024\055\032\uff89\001\002\000\054\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\026\uff8c\027\uff8c\032\uff8c\034" +
    "\uff8c\001\002\000\016\004\uffae\023\uffae\024\uffae\026\uffae" +
    "\032\uffae\034\uffae\001\002\000\004\027\136\001\002\000" +
    "\024\006\026\025\036\031\040\055\044\061\043\063\042" +
    "\064\034\065\037\072\027\001\002\000\010\023\054\024" +
    "\055\026\140\001\002\000\042\002\uffee\034\uffee\041\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\054\uffee\055\uffee\062\uffee\065\uffee" +
    "\001\002\000\004\072\146\001\002\000\004\072\145\001" +
    "\002\000\004\072\144\001\002\000\054\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\026\uff90\027\uff90\032\uff90\034\uff90\001" +
    "\002\000\054\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91" +
    "\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\026\uff91" +
    "\027\uff91\032\uff91\034\uff91\001\002\000\054\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\026\uff92\027\uff92\032\uff92\034\uff92" +
    "\001\002\000\054\004\uff9e\005\uff9e\006\uff9e\007\067\010" +
    "\075\011\063\012\065\013\072\014\074\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\026" +
    "\uff9e\027\uff9e\032\uff9e\034\uff9e\001\002\000\010\023\054" +
    "\024\055\026\160\001\002\000\022\006\026\031\040\055" +
    "\044\061\043\063\042\064\034\065\037\072\027\001\002" +
    "\000\006\004\154\034\155\001\002\000\026\004\uffea\005" +
    "\071\006\061\007\067\010\075\011\063\012\065\013\072" +
    "\014\074\034\uffea\001\002\000\022\006\026\031\040\055" +
    "\044\061\043\063\042\064\034\065\037\072\027\001\002" +
    "\000\004\026\156\001\002\000\042\002\uffef\034\uffef\041" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\062\uffef\065" +
    "\uffef\001\002\000\026\004\uffeb\005\071\006\061\007\067" +
    "\010\075\011\063\012\065\013\072\014\074\034\uffeb\001" +
    "\002\000\042\002\ufff2\034\ufff2\041\ufff2\043\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\062\ufff2\065\ufff2\001\002\000\004" +
    "\031\162\001\002\000\006\032\uffb4\065\164\001\002\000" +
    "\004\032\170\001\002\000\006\004\uffb1\032\uffb1\001\002" +
    "\000\006\004\166\032\uffb3\001\002\000\004\065\167\001" +
    "\002\000\006\004\uffb2\032\uffb2\001\002\000\004\033\171" +
    "\001\002\000\032\034\uffd4\041\216\043\200\046\207\047" +
    "\221\050\220\051\205\053\215\054\226\055\044\062\011" +
    "\065\201\001\002\000\036\034\uffca\041\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\053\uffca" +
    "\054\uffca\055\uffca\062\uffca\065\uffca\001\002\000\004\034" +
    "\361\001\002\000\004\026\360\001\002\000\036\034\uffcf" +
    "\041\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\053\uffcf\054\uffcf\055\uffcf\062\uffcf\065\uffcf" +
    "\001\002\000\036\034\uffd0\041\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\062\uffd0\065\uffd0\001\002\000\036\034\uffce\041" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\053\uffce\054\uffce\055\uffce\062\uffce\065\uffce\001" +
    "\002\000\004\031\340\001\002\000\012\027\022\031\115" +
    "\033\023\066\234\001\002\000\036\034\uffc5\041\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\062\uffc5\065\uffc5\001\002\000" +
    "\036\034\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\053\uffc8\054\uffc8\055\uffc8\062" +
    "\uffc8\065\uffc8\001\002\000\036\034\uffc7\041\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\062\uffc7\065\uffc7\001\002\000\004" +
    "\031\332\001\002\000\036\034\uffc6\041\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\062\uffc6\065\uffc6\001\002\000\004\031" +
    "\313\001\002\000\036\034\uffd1\041\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\062\uffd1\065\uffd1\001\002\000\036\034\uffc9" +
    "\041\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\053\uffc9\054\uffc9\055\uffc9\062\uffc9\065\uffc9" +
    "\001\002\000\036\034\uffcc\041\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\062\uffcc\065\uffcc\001\002\000\036\034\uffcd\041" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\053\uffcd\054\uffcd\055\uffcd\062\uffcd\065\uffcd\001" +
    "\002\000\036\034\uffc4\041\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\062\uffc4\065\uffc4\001\002\000\024\006\026\025\036" +
    "\031\040\055\044\061\043\063\042\064\034\065\037\072" +
    "\027\001\002\000\004\031\275\001\002\000\036\034\uffd3" +
    "\041\216\043\200\044\uffd3\045\uffd3\046\207\047\221\050" +
    "\220\051\205\053\215\054\226\055\044\062\011\065\201" +
    "\001\002\000\004\026\273\001\002\000\004\031\265\001" +
    "\002\000\036\034\uffcb\041\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\062\uffcb\065\uffcb\001\002\000\036\034\uffc3\041\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\062\uffc3\065\uffc3\001\002" +
    "\000\004\026\264\001\002\000\006\026\235\066\234\001" +
    "\002\000\004\031\227\001\002\000\024\006\026\025\036" +
    "\031\040\055\044\061\043\063\042\064\034\065\037\072" +
    "\027\001\002\000\010\023\054\024\055\032\231\001\002" +
    "\000\004\026\232\001\002\000\036\034\uffd5\041\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\062\uffd5\065\uffd5\001\002\000" +
    "\004\026\uffbe\001\002\000\006\057\237\060\240\001\002" +
    "\000\036\034\uffc0\041\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\062\uffc0\065\uffc0\001\002\000\004\026\uffbd\001\002\000" +
    "\004\031\246\001\002\000\004\031\241\001\002\000\024" +
    "\006\026\025\036\031\040\055\044\061\043\063\042\064" +
    "\034\065\037\072\027\001\002\000\010\004\243\023\054" +
    "\024\055\001\002\000\024\006\026\025\036\031\040\055" +
    "\044\061\043\063\042\064\034\065\037\072\027\001\002" +
    "\000\010\023\054\024\055\032\245\001\002\000\004\026" +
    "\uffb9\001\002\000\024\006\026\025\036\031\040\055\044" +
    "\061\043\063\042\064\034\065\037\072\027\001\002\000" +
    "\010\004\250\023\054\024\055\001\002\000\006\052\251" +
    "\065\252\001\002\000\004\031\257\001\002\000\004\031" +
    "\255\001\002\000\004\032\254\001\002\000\004\026\uffb8" +
    "\001\002\000\004\032\256\001\002\000\004\032\uffb6\001" +
    "\002\000\004\032\260\001\002\000\004\033\261\001\002" +
    "\000\032\034\uffd4\041\216\043\200\046\207\047\221\050" +
    "\220\051\205\053\215\054\226\055\044\062\011\065\201" +
    "\001\002\000\004\034\263\001\002\000\004\032\uffb7\001" +
    "\002\000\036\034\uffc1\041\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\062\uffc1\065\uffc1\001\002\000\024\006\026\025\036" +
    "\031\040\055\044\061\043\063\042\064\034\065\037\072" +
    "\027\001\002\000\010\023\054\024\055\032\267\001\002" +
    "\000\004\033\270\001\002\000\032\034\uffd4\041\216\043" +
    "\200\046\207\047\221\050\220\051\205\053\215\054\226" +
    "\055\044\062\011\065\201\001\002\000\004\034\272\001" +
    "\002\000\036\034\uffd9\041\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\062\uffd9\065\uffd9\001\002\000\036\034\uffd8\041\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\062\uffd8\065\uffd8\001\002" +
    "\000\036\034\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\062\uffd2\065\uffd2\001\002\000\024\006\026\025\036\031" +
    "\040\055\044\061\043\063\042\064\034\065\037\072\027" +
    "\001\002\000\010\023\054\024\055\032\277\001\002\000" +
    "\004\033\300\001\002\000\032\034\uffd4\041\216\043\200" +
    "\046\207\047\221\050\220\051\205\053\215\054\226\055" +
    "\044\062\011\065\201\001\002\000\004\034\302\001\002" +
    "\000\040\034\uffe7\041\uffe7\042\304\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\062\uffe7\065\uffe7\001\002\000\036\034\uffe6\041" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\053\uffe6\054\uffe6\055\uffe6\062\uffe6\065\uffe6\001" +
    "\002\000\004\033\306\001\002\000\036\034\uffe8\041\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\062\uffe8\065\uffe8\001\002" +
    "\000\032\034\uffd4\041\216\043\200\046\207\047\221\050" +
    "\220\051\205\053\215\054\226\055\044\062\011\065\201" +
    "\001\002\000\004\034\310\001\002\000\036\034\uffe5\041" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\053\uffe5\054\uffe5\055\uffe5\062\uffe5\065\uffe5\001" +
    "\002\000\010\023\054\024\055\026\312\001\002\000\036" +
    "\034\uffd6\041\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\053\uffd6\054\uffd6\055\uffd6\062\uffd6" +
    "\065\uffd6\001\002\000\004\065\315\001\002\000\004\026" +
    "\320\001\002\000\004\027\316\001\002\000\024\006\026" +
    "\025\036\031\040\055\044\061\043\063\042\064\034\065" +
    "\037\072\027\001\002\000\010\023\054\024\055\026\uffdc" +
    "\001\002\000\024\006\026\025\036\031\040\055\044\061" +
    "\043\063\042\064\034\065\037\072\027\001\002\000\010" +
    "\023\054\024\055\026\322\001\002\000\006\013\325\014" +
    "\324\001\002\000\004\032\326\001\002\000\004\032\uffda" +
    "\001\002\000\004\032\uffdb\001\002\000\004\033\327\001" +
    "\002\000\032\034\uffd4\041\216\043\200\046\207\047\221" +
    "\050\220\051\205\053\215\054\226\055\044\062\011\065" +
    "\201\001\002\000\004\034\331\001\002\000\036\034\uffdd" +
    "\041\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\053\uffdd\054\uffdd\055\uffdd\062\uffdd\065\uffdd" +
    "\001\002\000\024\006\026\025\036\031\040\055\044\061" +
    "\043\063\042\064\034\065\037\072\027\001\002\000\010" +
    "\023\054\024\055\032\334\001\002\000\004\026\335\001" +
    "\002\000\036\034\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\062\uffd7\065\uffd7\001\002\000\004\026\uffbc\001\002" +
    "\000\004\026\uffbb\001\002\000\024\006\026\025\036\031" +
    "\040\055\044\061\043\063\042\064\034\065\037\072\027" +
    "\001\002\000\010\023\054\024\055\032\342\001\002\000" +
    "\004\033\343\001\002\000\010\034\uffe3\044\350\045\346" +
    "\001\002\000\010\034\uffe2\044\350\045\346\001\002\000" +
    "\004\034\356\001\002\000\004\027\354\001\002\000\010" +
    "\034\uffe0\044\uffe0\045\uffe0\001\002\000\022\006\026\031" +
    "\040\055\044\061\043\063\042\064\034\065\037\072\027" +
    "\001\002\000\024\005\071\006\061\007\067\010\075\011" +
    "\063\012\065\013\072\014\074\027\352\001\002\000\036" +
    "\034\uffd4\041\216\043\200\044\uffd4\045\uffd4\046\207\047" +
    "\221\050\220\051\205\053\215\054\226\055\044\062\011" +
    "\065\201\001\002\000\010\034\uffdf\044\uffdf\045\uffdf\001" +
    "\002\000\036\034\uffd4\041\216\043\200\044\uffd4\045\uffd4" +
    "\046\207\047\221\050\220\051\205\053\215\054\226\055" +
    "\044\062\011\065\201\001\002\000\010\034\uffde\044\uffde" +
    "\045\uffde\001\002\000\036\034\uffe4\041\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\062\uffe4\065\uffe4\001\002\000\010\034" +
    "\uffe1\044\uffe1\045\uffe1\001\002\000\036\034\uffc2\041\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\062\uffc2\065\uffc2\001\002" +
    "\000\012\002\uffb5\052\uffb5\062\uffb5\065\uffb5\001\002\000" +
    "\010\026\ufff4\027\363\033\365\001\002\000\026\006\026" +
    "\025\036\031\040\033\373\055\044\061\043\063\042\064" +
    "\034\065\037\072\027\001\002\000\004\026\371\001\002" +
    "\000\022\006\026\031\040\055\044\061\043\063\042\064" +
    "\034\065\037\072\027\001\002\000\024\005\071\006\061" +
    "\007\067\010\075\011\063\012\065\013\072\014\074\034" +
    "\367\001\002\000\004\026\370\001\002\000\042\002\ufff0" +
    "\034\ufff0\041\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0" +
    "\062\ufff0\065\ufff0\001\002\000\042\002\ufff5\034\ufff5\041" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\062\ufff5\065" +
    "\ufff5\001\002\000\010\023\054\024\055\026\ufff3\001\002" +
    "\000\022\006\026\031\040\055\044\061\043\063\042\064" +
    "\034\065\037\072\027\001\002\000\006\004\154\034\375" +
    "\001\002\000\004\026\376\001\002\000\042\002\ufff1\034" +
    "\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\062" +
    "\ufff1\065\ufff1\001\002\000\012\002\ufffe\052\ufffe\062\ufffe" +
    "\065\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\030\002\003\003\006\004\005\006\016\007" +
    "\013\010\011\011\014\012\012\037\004\047\007\050\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\005\006\016\007\013" +
    "\010\011\011\014\012\012\037\004\050\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\034" +
    "\015\023\042\147\043\024\044\040\045\030\046\044\055" +
    "\027\060\031\061\045\001\001\000\026\014\034\015\023" +
    "\042\032\043\024\044\040\045\030\046\044\055\027\060" +
    "\031\061\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\034\015\023\044\146\045\030\046\044\055" +
    "\027\060\031\061\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\034" +
    "\015\023\042\133\043\024\044\040\045\030\046\044\055" +
    "\027\060\031\061\045\001\001\000\002\001\001\000\026" +
    "\014\034\015\023\042\112\043\024\044\040\045\030\046" +
    "\044\055\027\060\031\061\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\034\015" +
    "\023\042\052\043\024\044\040\045\030\046\044\055\027" +
    "\060\031\061\045\001\001\000\002\001\001\000\026\014" +
    "\034\015\023\042\057\043\024\044\040\045\030\046\044" +
    "\055\027\060\031\061\045\001\001\000\026\014\034\015" +
    "\023\042\056\043\024\044\040\045\030\046\044\055\027" +
    "\060\031\061\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\014\034\015\023\044\111" +
    "\045\030\046\044\055\027\060\031\061\045\001\001\000" +
    "\022\014\034\015\023\044\110\045\030\046\044\055\027" +
    "\060\031\061\045\001\001\000\022\014\034\015\023\044" +
    "\107\045\030\046\044\055\027\060\031\061\045\001\001" +
    "\000\022\014\034\015\023\044\106\045\030\046\044\055" +
    "\027\060\031\061\045\001\001\000\022\014\034\015\023" +
    "\044\105\045\030\046\044\055\027\060\031\061\045\001" +
    "\001\000\022\014\034\015\023\044\104\045\030\046\044" +
    "\055\027\060\031\061\045\001\001\000\022\014\034\015" +
    "\023\044\103\045\030\046\044\055\027\060\031\061\045" +
    "\001\001\000\022\014\034\015\023\044\102\045\030\046" +
    "\044\055\027\060\031\061\045\001\001\000\022\014\034" +
    "\015\023\044\101\045\030\046\044\055\027\060\031\061" +
    "\045\001\001\000\002\001\001\000\022\014\034\015\023" +
    "\044\100\045\030\046\044\055\027\060\031\061\045\001" +
    "\001\000\002\001\001\000\022\014\034\015\023\044\077" +
    "\045\030\046\044\055\027\060\031\061\045\001\001\000" +
    "\022\014\034\015\023\044\076\045\030\046\044\055\027" +
    "\060\031\061\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\014" +
    "\034\015\023\042\125\043\024\044\040\045\030\046\044" +
    "\055\027\056\127\057\126\060\031\061\045\001\001\000" +
    "\026\014\034\015\023\042\123\043\024\044\040\045\030" +
    "\046\044\055\027\060\031\061\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\034\015\023\042\131\043\024\044\040\045\030\046" +
    "\044\055\027\060\031\061\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\034\015\023\042\136\043\024\044\040\045\030" +
    "\046\044\055\027\060\031\061\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\013\151\014\034\015\023\044\152\045\030\046\044\055" +
    "\027\060\031\061\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\034\015\023\044\156\045\030\046" +
    "\044\055\027\060\031\061\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\162\041\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\176" +
    "\006\221\007\175\010\174\011\212\012\211\017\171\022" +
    "\210\025\203\030\172\031\202\032\205\033\201\034\213" +
    "\035\222\036\216\053\207\055\173\061\224\062\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\064\335\065\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\034\015\023\042\310\043\024" +
    "\044\040\045\030\046\044\055\027\060\031\061\045\001" +
    "\001\000\002\001\001\000\046\004\176\006\221\007\175" +
    "\010\174\011\212\012\211\017\171\022\210\025\203\031" +
    "\202\032\205\033\201\034\213\035\222\053\273\055\173" +
    "\061\224\062\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\064\232\065\235\001\001\000\002\001\001\000" +
    "\026\014\034\015\023\042\227\043\024\044\040\045\030" +
    "\046\044\055\027\060\031\061\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\034\015\023" +
    "\042\241\043\024\044\040\045\030\046\044\055\027\060" +
    "\031\061\045\001\001\000\002\001\001\000\026\014\034" +
    "\015\023\042\243\043\024\044\040\045\030\046\044\055" +
    "\027\060\031\061\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\034\015\023\042\246\043\024\044" +
    "\040\045\030\046\044\055\027\060\031\061\045\001\001" +
    "\000\002\001\001\000\004\066\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\004\176\006\221\007\175\010\174" +
    "\011\212\012\211\017\171\022\210\025\203\030\261\031" +
    "\202\032\205\033\201\034\213\035\222\036\216\053\207" +
    "\055\173\061\224\062\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\034\015\023" +
    "\042\265\043\024\044\040\045\030\046\044\055\027\060" +
    "\031\061\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\004\176\006\221\007\175\010\174\011\212\012" +
    "\211\017\171\022\210\025\203\030\270\031\202\032\205" +
    "\033\201\034\213\035\222\036\216\053\207\055\173\061" +
    "\224\062\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\034\015" +
    "\023\042\275\043\024\044\040\045\030\046\044\055\027" +
    "\060\031\061\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\176\006\221\007\175\010\174\011\212" +
    "\012\211\017\171\022\210\025\203\030\300\031\202\032" +
    "\205\033\201\034\213\035\222\036\216\053\207\055\173" +
    "\061\224\062\223\001\001\000\002\001\001\000\006\020" +
    "\304\021\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\004\176\006\221\007\175\010" +
    "\174\011\212\012\211\017\171\022\210\025\203\030\306" +
    "\031\202\032\205\033\201\034\213\035\222\036\216\053" +
    "\207\055\173\061\224\062\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\034\015\023\042\316\043\024\044\040\045" +
    "\030\046\044\055\027\060\031\061\045\001\001\000\002" +
    "\001\001\000\026\014\034\015\023\042\320\043\024\044" +
    "\040\045\030\046\044\055\027\060\031\061\045\001\001" +
    "\000\002\001\001\000\004\027\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\004\176\006\221\007\175\010\174\011\212\012" +
    "\211\017\171\022\210\025\203\030\327\031\202\032\205" +
    "\033\201\034\213\035\222\036\216\053\207\055\173\061" +
    "\224\062\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\034\015\023\042\332\043\024\044\040\045" +
    "\030\046\044\055\027\060\031\061\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\014\034\015\023\042\340" +
    "\043\024\044\040\045\030\046\044\055\027\060\031\061" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\343\024\346\054\344\001\001\000\004\024\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\034\015\023\044\350\045\030\046\044\055" +
    "\027\060\031\061\045\001\001\000\002\001\001\000\052" +
    "\004\176\006\221\007\175\010\174\011\212\012\211\017" +
    "\171\022\210\025\203\030\352\031\202\032\205\033\201" +
    "\034\213\035\222\036\216\053\207\055\173\061\224\062" +
    "\223\001\001\000\002\001\001\000\052\004\176\006\221" +
    "\007\175\010\174\011\212\012\211\017\171\022\210\025" +
    "\203\030\354\031\202\032\205\033\201\034\213\035\222" +
    "\036\216\053\207\055\173\061\224\062\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\363\001\001\000" +
    "\026\014\034\015\023\042\371\043\024\044\040\045\030" +
    "\046\044\055\027\060\031\061\045\001\001\000\002\001" +
    "\001\000\022\014\034\015\023\044\365\045\030\046\044" +
    "\055\027\060\031\061\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\013\373\014\034\015\023\044\152\045" +
    "\030\046\044\055\027\060\031\061\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_CJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_CJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_CJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }

    //Este metodo retorna la RAIZ del arbol  generado 
    public Nodo getRoot(){
        return action_obj.root;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_CJS$actions {


    //se declaran variables globales etc.
    //GestorC3D gs = new GestorC3D();
    public int Index=1;
    public Nodo root = new Nodo();

  private final AS_CJS parser;

  /** Constructor */
  CUP$AS_CJS$actions(AS_CJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_CJS$do_action(
    int                        CUP$AS_CJS$act_num,
    java_cup.runtime.lr_parser CUP$AS_CJS$parser,
    java.util.Stack            CUP$AS_CJS$stack,
    int                        CUP$AS_CJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_CJS$result;

      /* select the action based on the action number */
      switch (CUP$AS_CJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lista_envio ::= expr_l 
            {
              Nodo RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("envios","",H.linea,H.columna);
                    RESULT.add(H);
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_envio",44, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lista_envio ::= lista_envio COMA expr_l 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    R.add(X);
                    RESULT = R;
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_envio",44, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // envio ::= lista_envio 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("envio",45, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // envio ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("envios","",0,0); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("envio",45, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LlamadaFuncion ::= I_D APAR envio CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                        RESULT = parser.crearNodo("llamadaFuncion","",a.getLinea(),a.getColumna());  
                        RESULT.add(parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna()));
                        RESULT.add(H);
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",43, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // dato ::= LlamadaFuncion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // dato ::= funcion_acadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // dato ::= funcion_conteo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // dato ::= COMS DATETIME_LITERAL COMS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = parser.crearNodo("datetime",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // dato ::= COMS DATE_LITERAL COMS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = parser.crearNodo("date",a.getCadena(),a.getLinea(),a.getColumna());      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // dato ::= COMS BOOLEAN_LITERAL COMS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = parser.crearNodo("boolean",a.getCadena(),a.getLinea(),a.getColumna());   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // dato ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // dato ::= NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // dato ::= STRING_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                            String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                            RESULT = parser.crearNodo("string",cad,a.getLinea(),a.getColumna()); 
                          
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // dato ::= I_D 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna());    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // simplificada ::= expr_a SUB 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                RESULT = parser.crearNodo("SUB","",w.getLinea(),w.getColumna());
                                RESULT.add(X);
                               
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("simplificada",35, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // simplificada ::= expr_a ADD 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 
                                RESULT = parser.crearNodo("ADD","",w.getLinea(),w.getColumna());
                                RESULT.add(X);
                              
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("simplificada",35, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // accesoAr ::= I_D ALLA expr_l CLLA 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                RESULT=parser.crearNodo("accesoAr",f.getCadena(),f.getLinea(),f.getColumna());
                RESULT.add(a);
                //RESULT.add(lista);
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("accesoAr",46, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_a ::= simplificada 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_a ::= accesoAr 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_a ::= Accion_Obtener 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_a ::= dato 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_a ::= MENOS expr_a 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT = parser.crearNodo("unitario","",a.getLinea(),a.getColumna()); RESULT.add(H); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_a ::= APAR expr_l CPAR 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_a ::= expr_a POT expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("POT","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_a ::= expr_a MOD expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MOD","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_a ::= expr_a DIV expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("DIV","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_a ::= expr_a POR expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("POR","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_a ::= expr_a MENOS expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MENOS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_a ::= expr_a MAS expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MAS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_r ::= expr_a 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT = r;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_r ::= expr_a DIF expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("DIF","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr_r ::= expr_a IG_IG expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("IG_IG","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_r ::= expr_a MAYIQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MAYIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_r ::= expr_a MAYQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MAYQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_r ::= expr_a MENIQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MENIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_r ::= expr_a MENQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MENQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_l ::= expr_r 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=a;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_l ::= NOT expr_l 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    
                                          RESULT = parser.crearNodo("NOT","",a.getLinea(),a.getColumna());
                                          RESULT.add(b);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_l ::= expr_l OR expr_l 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("OR","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_l ::= expr_l AND expr_l 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("AND","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                       
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lista_parametros ::= I_D 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("parametros","",x.getLinea(),x.getColumna());
                        Nodo param = parser.crearNodo("parametro","",x.getLinea(),x.getColumna());
                        param.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));
                        RESULT.add(param);    
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_parametros",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_parametros ::= lista_parametros COMA I_D 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        Nodo param = parser.crearNodo("parametro","",y.getLinea(),y.getColumna());
                        param.add(parser.crearNodo("id",y.getCadena(),y.getLinea(),y.getColumna()));
                        x.add(param);
                        RESULT=x;
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_parametros",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros ::= lista_parametros 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		     RESULT=x;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("parametros","",0,0);  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funcion ::= FUNCION I_D APAR parametros CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo z = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                RESULT = parser.crearNodo("funcion","",w.getLinea(),w.getColumna()); // se crea la raiz FUNCION
                RESULT.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));// agrego el nombre 
                RESULT.add(y);//agrego los parametros
                RESULT.add(z);//agrego las instrucciones
           
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion",29, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FuncionAnonima ::= I_D APAR CPAR 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                        RESULT = parser.crearNodo("f_anonima","",w.getLinea(),w.getColumna());
                        RESULT.add(parser.crearNodo("id",w.getCadena(),w.getLinea(),w.getColumna()));
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("FuncionAnonima",52, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FuncionAnonima ::= FUNCION APAR CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                        RESULT = parser.crearNodo("f_anonima","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("FuncionAnonima",52, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PtoObservador ::= PTO OBSERVADOR APAR expr_l COMA FuncionAnonima CPAR 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		    
                        RESULT = parser.crearNodo("pto_observador","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                        RESULT.add(y);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("PtoObservador",51, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PtoSetElemento ::= PTO SETELEMENTO APAR expr_l COMA expr_l CPAR 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		    
                        RESULT = parser.crearNodo("pto_obtener","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                        RESULT.add(y);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("PtoSetElemento",50, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PtoObtener ::= PTO OBTENER APAR expr_l CPAR 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		    
                        RESULT = parser.crearNodo("obtener","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("PtoObtener",49, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Accion_Setear ::= I_D PtoObservador 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Setear","",w.getLinea(),w.getColumna());
                        RESULT.add(parser.crearNodo("id",w.getCadena(),w.getLinea(),w.getColumna()));
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Accion_Setear ::= I_D PtoSetElemento 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_SetElemento","",w.getLinea(),w.getColumna());
                        RESULT.add(parser.crearNodo("id",w.getCadena(),w.getLinea(),w.getColumna()));
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Accion_Setear ::= Accion_Obtener PtoObservador 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Setear","",x.linea,x.columna);
                        RESULT.add(x);
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Accion_Setear ::= Accion_Obtener PtoSetElemento 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Setear","",x.linea,x.columna);
                        RESULT.add(x);
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Accion_Obtener ::= DOCUMENTO PtoObtener 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Obtener","",w.getLinea(),w.getColumna());
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Obtener",47, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= Accion_Obtener PYC 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= Accion_Setear PYC 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= LlamadaFuncion PYC 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= Mensaje 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= Retornar 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= Imprimir 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= Detener 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= Para 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= Mientras 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= Selecciona 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= Si 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= asignacionGlb 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="asignacionLocal";  RESULT= X;      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= asigna_vecGlbF2 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="asigna_vecLocalF2"; RESULT= X;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= asigna_vecGlbF1 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="asigna_vecLocalF1"; RESULT= X;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= declara_var 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="declara_var_L"; RESULT= X;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= declara_vecF2 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="declara_vecF2_L"; RESULT= X;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= declara_vecF1 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="declara_vecF1_L"; RESULT= X;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instrucciones ::= sentencia 
            {
              Nodo RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("sentencias","",H.linea,H.columna);  RESULT.add(H); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instrucciones ::= Instrucciones sentencia 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  R.add(H); RESULT = R;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instrucciones ::= Instrucciones 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("instrucciones",22, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instrucciones ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("sentencias","",0,0);  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("instrucciones",22, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Mensaje ::= MENSAJE APAR expr_l CPAR PYC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                RESULT = parser.crearNodo("mensaje","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la expresion a MENSAJEAR
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Mensaje",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Retornar ::= RETORNAR expr_l PYC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                RESULT = parser.crearNodo("retornar","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la expresion a retornar
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Retornar",26, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Imprimir ::= IMPRIMIR APAR expr_l CPAR PYC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                RESULT = parser.crearNodo("imprimir","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la expresion a IMPRIMIR en la consola de salida
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Imprimir",25, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Detener ::= DETENER PYC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		RESULT = parser.crearNodo("detener","",w.getLinea(),w.getColumna());
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Detener",24, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Mientras ::= MIENTRAS APAR expr_l CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                    RESULT = parser.crearNodo("mientras","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la CONDICION
                    RESULT.add(Y);// se agregan las instrucciones
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Mientras",23, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operador ::= SUB 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = parser.crearNodo("operador","sub",w.getLinea(),w.getColumna()); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("operador",21, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operador ::= ADD 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = parser.crearNodo("operador","add",w.getLinea(),w.getColumna()); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("operador",21, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec_for ::= I_D DSPTS expr_l 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("dec_for","",w.getLinea(),w.getColumna());
                    RESULT.add(parser.crearNodo("id",w.getCadena(),w.getLinea(),w.getColumna()));// se agrega el ID
                    RESULT.add(X);// se agrega el valor de la variable del for
               
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dec_for",20, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Para ::= PARA APAR dec_for PYC expr_l PYC operador CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-8)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-8)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-8)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo Z = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo O = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                    RESULT = parser.crearNodo("para","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la declaracion FOR
                    RESULT.add(Y);// se agrega la CONDICION
                    RESULT.add(Z);// se agrega el OPERADOR
                    RESULT.add(O);// se agregan las instrucciones

               
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Para",19, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // caso_defecto ::= DEFECTO DSPTS instrucciones 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("defecto","",w.getLinea(),w.getColumna());
                    RESULT.add(Y);// se agregan las instrucciones
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("caso_defecto",18, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // caso_defecto ::= CASO expr_a DSPTS instrucciones 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("caso","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la EXPR
                    RESULT.add(Y);// se agregan las instrucciones
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("caso_defecto",18, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_casos ::= caso_defecto 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                RESULT = parser.crearNodo("casos","",X.linea,X.columna);
                RESULT.add(X);
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_casos",17, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_casos ::= lista_casos caso_defecto 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                R.add(X);
                RESULT = R;
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_casos",17, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cont_selecciona ::= lista_casos 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT= X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("cont_selecciona",42, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cont_selecciona ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("casos","",0,0); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("cont_selecciona",42, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Selecciona ::= SELECCIONA APAR expr_l CPAR ALLA cont_selecciona CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                RESULT = parser.crearNodo("selecciona","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la EXPRESION
                RESULT.add(Y);// se agrega la lista de CASOS
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Selecciona",16, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Sino ::= SINO ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
            RESULT=X; // se agrega el conjunto de instrucciones
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Sino",15, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opcional ::= Sino 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT=X;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("opcional",14, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opcional ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("sentencias","",0,0);  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("opcional",14, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Si ::= SI APAR expr_l CPAR ALLA instrucciones CLLA opcional 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo Z = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
            RESULT = parser.crearNodo("si","",w.getLinea(),w.getColumna());
            RESULT.add(X);// se agrega la expresion
            RESULT.add(Y);// se agrega el conjunto de instrucciones
            RESULT.add(Z);// se agrega el SINO (opcional)

          
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Si",13, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= dato 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = a;
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_valores ::= expr_a 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("valores","",X.linea,X.columna);
                    RESULT.add(X);
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_valores",9, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_valores ::= lista_valores COMA expr_a 
            {
              Nodo RESULT =null;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    Y.add(X);
                    RESULT=Y;
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_valores",9, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion_acadena ::= I_D PTO ATEXTO APAR CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		
                       RESULT = parser.crearNodo("funcion_aTexto","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna()));
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion_acadena",11, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion_conteo ::= I_D PTO CONTEO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                       RESULT = parser.crearNodo("funcion_Conteo","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna()));
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion_conteo",10, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asigna_vecGlbF2 ::= I_D ALLA expr_l CLLA DSPTS expr_l PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                       RESULT = parser.crearNodo("asigna_vecGlbF2","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                       Nodo dim=parser.crearNodo("indice","",b.linea,b.columna);
                       dim.add(b);
                       RESULT.add(dim);
                       RESULT.add(X);
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_vecGlbF2",8, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asigna_vecGlbF1 ::= I_D DSPTS ALLA lista_valores CLLA PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                       RESULT = parser.crearNodo("asigna_vecGlbF1","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                       RESULT.add(c);
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_vecGlbF1",7, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declara_vecF2 ::= DIMV I_D ALLA expr_a CLLA PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		// se declara el tamano del vector unidimensional
                    RESULT = parser.crearNodo("declara_vecF2","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));
                    Nodo dim=parser.crearNodo("dimensiones","",c.linea,c.columna);
                    dim.add(c);
                    RESULT.add(dim);
                    
                 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_vecF2",6, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declara_vecF1 ::= DIMV I_D DSPTS ALLA lista_valores CLLA PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		// se crea el vector con valores
                    RESULT = parser.crearNodo("declara_vecF1","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));   
                    RESULT.add(c);
                 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_vecF1",5, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacionGlb ::= I_D DSPTS expr_l PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                    RESULT = parser.crearNodo("asignacionGlb","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                    RESULT.add(b);    
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asignacionGlb",4, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asigna_var ::= DSPTS expr_l 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("asigna_var","",a.linea,a.columna);
                    RESULT.add(a);   
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_var",3, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asigna_var ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("asigna_var","",0,0);    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_var",3, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declara_var ::= DIMV I_D asigna_var PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                        RESULT = parser.crearNodo("declara_var","",a.getLinea(),a.getColumna());
                        RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));
                        RESULT.add(c);
                        
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_var",2, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenido_cjs ::= funcion 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenido_cjs ::= asigna_vecGlbF2 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenido_cjs ::= asigna_vecGlbF1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenido_cjs ::= asignacionGlb 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenido_cjs ::= declara_vecF2 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenido_cjs ::= declara_vecF1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenido_cjs ::= declara_var 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lcontenido_cjs ::= contenido_cjs 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("contenido","",0,0);  
                        RESULT.add(x);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Lcontenido_cjs",37, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lcontenido_cjs ::= Lcontenido_cjs contenido_cjs 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        r.add(x);
                        RESULT=r;
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Lcontenido_cjs",37, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // raiz ::= Lcontenido_cjs 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		     RESULT=a;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= raiz 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		   root=r;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		RESULT = start_val;
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_CJS$parser.done_parsing();
          return CUP$AS_CJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

