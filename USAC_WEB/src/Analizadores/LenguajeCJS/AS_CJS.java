
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 09 15:10:38 CST 2018
//----------------------------------------------------

package Analizadores.LenguajeCJS;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import Errores.Erro_r;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 09 15:10:38 CST 2018
  */
public class AS_CJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_CJS() {super();}

  /** Constructor which sets the default scanner. */
  public AS_CJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_CJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\047\004\000\002\047\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\004\006\000\002\005\002\000\002\005" +
    "\004\000\002\006\006\000\002\007\011\000\002\010\010" +
    "\000\002\011\010\000\002\012\011\000\002\014\005\000" +
    "\002\015\007\000\002\013\005\000\002\013\003\000\002" +
    "\016\003\000\002\017\012\000\002\020\002\000\002\020" +
    "\003\000\002\021\006\000\002\022\011\000\002\054\002" +
    "\000\002\054\003\000\002\023\004\000\002\023\003\000" +
    "\002\024\006\000\002\024\005\000\002\025\015\000\002" +
    "\026\005\000\002\027\003\000\002\027\003\000\002\031" +
    "\011\000\002\032\004\000\002\033\007\000\002\034\005" +
    "\000\002\035\007\000\002\030\002\000\002\030\003\000" +
    "\002\036\004\000\002\036\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\067\004\000\002\067\004\000\002\067\004\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\004\000\002\053\004\000\002\053" +
    "\004\000\002\053\004\000\002\053\004\000\002\053\004" +
    "\000\002\061\004\000\002\062\004\000\002\062\004\000" +
    "\002\062\004\000\002\062\004\000\002\062\004\000\002" +
    "\062\004\000\002\063\007\000\002\064\011\000\002\065" +
    "\011\000\002\066\010\000\002\066\005\000\002\037\012" +
    "\000\002\040\002\000\002\040\003\000\002\041\005\000" +
    "\002\041\003\000\002\042\005\000\002\042\005\000\002" +
    "\042\004\000\002\042\003\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\003\000\002\044\005\000" +
    "\002\044\005\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\004\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\060\006\000\002\045\004\000" +
    "\002\045\004\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\055\006\000\002\057\002\000" +
    "\002\057\003\000\002\056\005\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\052\006\043\031\030\041\015\043\050\046" +
    "\060\047\033\050\051\051\014\052\017\053\061\054\011" +
    "\055\020\061\010\062\037\063\036\064\040\065\056\067" +
    "\024\070\064\071\034\001\002\000\054\002\ufffa\006\ufffa" +
    "\031\ufffa\041\ufffa\043\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\067\ufffa\070\ufffa\071\ufffa\001" +
    "\002\000\004\002\000\001\002\000\054\002\ufffb\006\ufffb" +
    "\031\ufffb\041\ufffb\043\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\067\ufffb\070\ufffb\071\ufffb\001" +
    "\002\000\022\005\131\006\121\007\127\010\135\011\123" +
    "\012\124\013\132\014\134\001\002\000\054\004\uff81\005" +
    "\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81" +
    "\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022" +
    "\uff81\023\uff81\024\uff81\026\uff81\027\uff81\032\uff81\034\uff81" +
    "\001\002\000\004\031\u0119\001\002\000\054\002\uffcb\006" +
    "\uffcb\031\uffcb\041\uffcb\043\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\001\002\000\004\002\u0118\001\002\000\004\031\u0114\001" +
    "\002\000\004\031\u0108\001\002\000\054\002\ufff5\006\ufff5" +
    "\031\ufff5\041\ufff5\043\ufff5\046\ufff5\047\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\067\ufff5\070\ufff5\071\ufff5\001" +
    "\002\000\004\065\375\001\002\000\004\066\374\001\002" +
    "\000\024\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\026\371\001\002\000\054\002\ufffd" +
    "\006\ufffd\031\ufffd\041\ufffd\043\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\001\002\000\054\004\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016" +
    "\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87" +
    "\026\uff87\027\uff87\032\uff87\034\uff87\001\002\000\054\004" +
    "\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e" +
    "\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021" +
    "\uff7e\022\uff7e\023\uff7e\024\uff7e\026\uff7e\027\uff7e\032\uff7e" +
    "\034\uff7e\001\002\000\054\002\ufffc\006\ufffc\031\ufffc\041" +
    "\ufffc\043\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\061\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\067\ufffc\070\ufffc\071\ufffc\001\002\000\054" +
    "\002\uffce\006\uffce\031\uffce\041\uffce\043\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce" +
    "\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\067\uffce\070" +
    "\uffce\071\uffce\001\002\000\004\026\370\001\002\000\030" +
    "\006\043\025\102\031\030\055\105\061\010\063\036\064" +
    "\040\065\103\067\024\070\064\071\034\001\002\000\054" +
    "\002\ufff9\006\ufff9\031\ufff9\041\ufff9\043\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\067\ufff9\070" +
    "\ufff9\071\ufff9\001\002\000\054\002\uffc9\006\uffc9\031\uffc9" +
    "\041\uffc9\043\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\001\002\000" +
    "\004\031\360\001\002\000\054\004\uff7c\005\uff7c\006\uff7c" +
    "\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015" +
    "\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c" +
    "\024\uff7c\026\uff7c\027\uff7c\032\uff7c\034\uff7c\001\002\000" +
    "\054\002\uffcc\006\uffcc\031\uffcc\041\uffcc\043\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\067\uffcc" +
    "\070\uffcc\071\uffcc\001\002\000\054\004\uff80\005\uff80\006" +
    "\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80" +
    "\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023" +
    "\uff80\024\uff80\026\uff80\027\uff80\032\uff80\034\uff80\001\002" +
    "\000\004\065\343\001\002\000\054\004\uff7f\005\uff7f\006" +
    "\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f" +
    "\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023" +
    "\uff7f\024\uff7f\026\uff7f\027\uff7f\032\uff7f\034\uff7f\001\002" +
    "\000\054\002\uffc8\006\uffc8\031\uffc8\041\uffc8\043\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\067" +
    "\uffc8\070\uffc8\071\uffc8\001\002\000\024\005\uff86\006\uff86" +
    "\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\026" +
    "\342\001\002\000\026\006\043\031\030\055\105\061\010" +
    "\063\036\064\040\065\103\067\024\070\064\071\034\001" +
    "\002\000\024\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\026\340\001\002\000\054\002" +
    "\uffca\006\uffca\031\uffca\041\uffca\043\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\067\uffca\070\uffca" +
    "\071\uffca\001\002\000\054\002\uffff\006\043\031\030\041" +
    "\015\043\050\046\060\047\033\050\051\051\014\052\017" +
    "\053\061\054\011\055\020\061\010\062\037\063\036\064" +
    "\040\065\056\067\024\070\064\071\034\001\002\000\054" +
    "\002\ufff6\006\ufff6\031\ufff6\041\ufff6\043\ufff6\046\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\001\002\000\004\031\317\001\002\000\004" +
    "\026\316\001\002\000\054\002\ufff7\006\ufff7\031\ufff7\041" +
    "\ufff7\043\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\054\ufff7\055\ufff7\061\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7\001\002\000\054" +
    "\002\ufff8\006\ufff8\031\ufff8\041\ufff8\043\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\001\002\000\054\004\uff89\005\uff89\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\024\uff89\026\uff89\027\uff89\032\uff89\034\uff89\001\002\000" +
    "\054\002\uffcf\006\uffcf\031\uffcf\041\uffcf\043\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\067\uffcf" +
    "\070\uffcf\071\uffcf\001\002\000\032\005\uff82\006\uff82\007" +
    "\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\027\273" +
    "\031\154\033\274\066\277\001\002\000\054\002\uffcd\006" +
    "\uffcd\031\uffcd\041\uffcd\043\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\067\uffcd\070\uffcd\071\uffcd" +
    "\001\002\000\004\031\254\001\002\000\030\006\043\025" +
    "\102\031\030\055\105\061\010\063\036\064\040\065\103" +
    "\067\024\070\064\071\034\001\002\000\024\005\uff79\006" +
    "\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79" +
    "\026\251\001\002\000\026\005\uff88\006\uff88\007\uff88\010" +
    "\uff88\011\uff88\012\uff88\013\uff88\014\uff88\026\070\066\067" +
    "\001\002\000\054\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d" +
    "\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\026" +
    "\uff7d\027\uff7d\032\uff7d\034\uff7d\001\002\000\004\026\uffac" +
    "\001\002\000\004\026\uffab\001\002\000\006\057\071\060" +
    "\072\001\002\000\054\002\uffc5\006\uffc5\031\uffc5\041\uffc5" +
    "\043\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\067\uffc5\070\uffc5\071\uffc5\001\002\000\004\031" +
    "\176\001\002\000\004\031\073\001\002\000\030\006\043" +
    "\025\102\031\030\055\105\061\010\063\036\064\040\065" +
    "\103\067\024\070\064\071\034\001\002\000\016\004\uff99" +
    "\023\uff99\024\uff99\026\uff99\032\uff99\034\uff99\001\002\000" +
    "\054\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\026\uff7a\027\uff7a" +
    "\032\uff7a\034\uff7a\001\002\000\054\004\uff79\005\uff79\006" +
    "\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79" +
    "\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023" +
    "\uff79\024\uff79\026\uff79\027\uff79\032\uff79\034\uff79\001\002" +
    "\000\054\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011" +
    "\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86" +
    "\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\026\uff86\027" +
    "\uff86\032\uff86\034\uff86\001\002\000\010\004\173\023\114" +
    "\024\115\001\002\000\054\004\uff7b\005\uff7b\006\uff7b\007" +
    "\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b" +
    "\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024" +
    "\uff7b\026\uff7b\027\uff7b\032\uff7b\034\uff7b\001\002\000\030" +
    "\006\043\025\102\031\030\055\105\061\010\063\036\064" +
    "\040\065\103\067\024\070\064\071\034\001\002\000\062" +
    "\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012" +
    "\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82" +
    "\021\uff82\022\uff82\023\uff82\024\uff82\026\uff82\027\uff82\031" +
    "\154\032\uff82\033\153\034\uff82\066\155\001\002\000\052" +
    "\004\uff92\005\131\006\121\007\127\010\135\011\123\012" +
    "\124\013\132\014\134\015\122\016\130\017\133\020\136" +
    "\021\125\022\126\023\uff92\024\uff92\026\uff92\032\uff92\034" +
    "\uff92\001\002\000\004\066\110\001\002\000\054\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88" +
    "\022\uff88\023\uff88\024\uff88\026\uff88\027\uff88\032\uff88\034" +
    "\uff88\001\002\000\056\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\026\uffad\027\uffad\032\uffad\034\uffad\066\uffad\001\002\000" +
    "\004\056\111\001\002\000\004\031\112\001\002\000\030" +
    "\006\043\025\102\031\030\055\105\061\010\063\036\064" +
    "\040\065\103\067\024\070\064\071\034\001\002\000\010" +
    "\023\114\024\115\032\116\001\002\000\030\006\043\025" +
    "\102\031\030\055\105\061\010\063\036\064\040\065\103" +
    "\067\024\070\064\071\034\001\002\000\030\006\043\025" +
    "\102\031\030\055\105\061\010\063\036\064\040\065\103" +
    "\067\024\070\064\071\034\001\002\000\056\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6\032\uffa6\034\uffa6" +
    "\066\uffa6\001\002\000\016\004\uff9b\023\114\024\uff9b\026" +
    "\uff9b\032\uff9b\034\uff9b\001\002\000\016\004\uff9c\023\uff9c" +
    "\024\uff9c\026\uff9c\032\uff9c\034\uff9c\001\002\000\026\006" +
    "\043\031\030\055\105\061\010\063\036\064\040\065\103" +
    "\067\024\070\064\071\034\001\002\000\026\006\043\031" +
    "\030\055\105\061\010\063\036\064\040\065\103\067\024" +
    "\070\064\071\034\001\002\000\026\006\043\031\030\055" +
    "\105\061\010\063\036\064\040\065\103\067\024\070\064" +
    "\071\034\001\002\000\026\006\043\031\030\055\105\061" +
    "\010\063\036\064\040\065\103\067\024\070\064\071\034" +
    "\001\002\000\026\006\043\031\030\055\105\061\010\063" +
    "\036\064\040\065\103\067\024\070\064\071\034\001\002" +
    "\000\026\006\043\031\030\055\105\061\010\063\036\064" +
    "\040\065\103\067\024\070\064\071\034\001\002\000\026" +
    "\006\043\031\030\055\105\061\010\063\036\064\040\065" +
    "\103\067\024\070\064\071\034\001\002\000\026\006\043" +
    "\031\030\055\105\061\010\063\036\064\040\065\103\067" +
    "\024\070\064\071\034\001\002\000\026\006\043\031\030" +
    "\055\105\061\010\063\036\064\040\065\103\067\024\070" +
    "\064\071\034\001\002\000\054\004\uff84\005\uff84\006\uff84" +
    "\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015" +
    "\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84" +
    "\024\uff84\026\uff84\027\uff84\032\uff84\034\uff84\001\002\000" +
    "\026\006\043\031\030\055\105\061\010\063\036\064\040" +
    "\065\103\067\024\070\064\071\034\001\002\000\054\004" +
    "\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83" +
    "\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\024\uff83\026\uff83\027\uff83\032\uff83" +
    "\034\uff83\001\002\000\026\006\043\031\030\055\105\061" +
    "\010\063\036\064\040\065\103\067\024\070\064\071\034" +
    "\001\002\000\026\006\043\031\030\055\105\061\010\063" +
    "\036\064\040\065\103\067\024\070\064\071\034\001\002" +
    "\000\036\004\uff95\005\131\006\121\007\127\010\135\011" +
    "\123\012\124\013\132\014\134\023\uff95\024\uff95\026\uff95" +
    "\032\uff95\034\uff95\001\002\000\054\004\uff8e\005\uff8e\006" +
    "\uff8e\007\uff8e\010\uff8e\011\123\012\uff8e\013\132\014\134" +
    "\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\026\uff8e\027\uff8e\032\uff8e\034\uff8e\001\002" +
    "\000\036\004\uff96\005\131\006\121\007\127\010\135\011" +
    "\123\012\124\013\132\014\134\023\uff96\024\uff96\026\uff96" +
    "\032\uff96\034\uff96\001\002\000\054\004\uff91\005\uff91\006" +
    "\uff91\007\127\010\135\011\123\012\124\013\132\014\134" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\026\uff91\027\uff91\032\uff91\034\uff91\001\002" +
    "\000\036\004\uff97\005\131\006\121\007\127\010\135\011" +
    "\123\012\124\013\132\014\134\023\uff97\024\uff97\026\uff97" +
    "\032\uff97\034\uff97\001\002\000\054\004\uff8f\005\uff8f\006" +
    "\uff8f\007\uff8f\010\uff8f\011\123\012\uff8f\013\132\014\134" +
    "\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\026\uff8f\027\uff8f\032\uff8f\034\uff8f\001\002" +
    "\000\036\004\uff93\005\131\006\121\007\127\010\135\011" +
    "\123\012\124\013\132\014\134\023\uff93\024\uff93\026\uff93" +
    "\032\uff93\034\uff93\001\002\000\036\004\uff94\005\131\006" +
    "\121\007\127\010\135\011\123\012\124\013\132\014\134" +
    "\023\uff94\024\uff94\026\uff94\032\uff94\034\uff94\001\002\000" +
    "\054\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\123" +
    "\012\uff8d\013\132\014\134\015\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\027\uff8d" +
    "\032\uff8d\034\uff8d\001\002\000\054\004\uff8c\005\uff8c\006" +
    "\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\132\014\134" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\026\uff8c\027\uff8c\032\uff8c\034\uff8c\001\002" +
    "\000\036\004\uff98\005\131\006\121\007\127\010\135\011" +
    "\123\012\124\013\132\014\134\023\uff98\024\uff98\026\uff98" +
    "\032\uff98\034\uff98\001\002\000\054\004\uff90\005\uff90\006" +
    "\uff90\007\127\010\135\011\123\012\124\013\132\014\134" +
    "\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023" +
    "\uff90\024\uff90\026\uff90\027\uff90\032\uff90\034\uff90\001\002" +
    "\000\030\006\043\025\102\031\030\055\105\061\010\063" +
    "\036\064\040\065\103\067\024\070\064\071\034\001\002" +
    "\000\032\006\043\025\102\031\030\032\uff77\055\105\061" +
    "\010\063\036\064\040\065\103\067\024\070\064\071\034" +
    "\001\002\000\006\037\157\040\156\001\002\000\004\031" +
    "\160\001\002\000\054\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\026\uffec\027\uffec\032\uffec\034\uffec\001\002\000\004\032" +
    "\161\001\002\000\054\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\026\uffeb\027\uffeb\032\uffeb\034\uffeb\001\002\000\012\004" +
    "\uff74\023\114\024\115\032\uff74\001\002\000\004\032\167" +
    "\001\002\000\006\004\165\032\uff76\001\002\000\030\006" +
    "\043\025\102\031\030\055\105\061\010\063\036\064\040" +
    "\065\103\067\024\070\064\071\034\001\002\000\012\004" +
    "\uff75\023\114\024\115\032\uff75\001\002\000\054\004\uff78" +
    "\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\013" +
    "\uff78\014\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\uff78\023\uff78\024\uff78\026\uff78\027\uff78\032\uff78\034" +
    "\uff78\001\002\000\010\023\114\024\115\034\171\001\002" +
    "\000\054\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85" +
    "\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\026\uff85\027" +
    "\uff85\032\uff85\034\uff85\001\002\000\016\004\uff9a\023\uff9a" +
    "\024\uff9a\026\uff9a\032\uff9a\034\uff9a\001\002\000\030\006" +
    "\043\025\102\031\030\055\105\061\010\063\036\064\040" +
    "\065\103\067\024\070\064\071\034\001\002\000\010\023" +
    "\114\024\115\032\175\001\002\000\004\026\uffa5\001\002" +
    "\000\030\006\043\025\102\031\030\055\105\061\010\063" +
    "\036\064\040\065\103\067\024\070\064\071\034\001\002" +
    "\000\010\004\200\023\114\024\115\001\002\000\006\052" +
    "\201\065\202\001\002\000\004\031\207\001\002\000\004" +
    "\031\205\001\002\000\004\032\204\001\002\000\004\026" +
    "\uffa4\001\002\000\004\032\206\001\002\000\004\032\uffa2" +
    "\001\002\000\004\032\210\001\002\000\004\033\211\001" +
    "\002\000\052\006\043\031\030\034\uffd3\041\015\043\050" +
    "\046\060\047\033\050\051\051\014\053\061\054\011\055" +
    "\020\061\010\062\037\063\036\064\040\065\056\067\024" +
    "\070\064\071\034\001\002\000\056\006\uffc0\031\uffc0\034" +
    "\uffc0\041\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\067\uffc0\070\uffc0\071\uffc0" +
    "\001\002\000\056\006\uffc1\031\uffc1\034\uffc1\041\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\067\uffc1\070\uffc1\071\uffc1\001\002\000\056" +
    "\006\uffb7\031\uffb7\034\uffb7\041\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\001\002\000\004\034\250\001\002" +
    "\000\024\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\026\247\001\002\000\056\006\uffbf" +
    "\031\uffbf\034\uffbf\041\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf\070" +
    "\uffbf\071\uffbf\001\002\000\056\006\uffba\031\uffba\034\uffba" +
    "\041\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\053\uffba\054\uffba\055\uffba\061\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\067\uffba\070\uffba\071\uffba\001" +
    "\002\000\004\026\246\001\002\000\056\006\uffbc\031\uffbc" +
    "\034\uffbc\041\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc\055\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\064\uffbc\065\uffbc\067\uffbc\070\uffbc\071" +
    "\uffbc\001\002\000\056\006\uffb5\031\uffb5\034\uffb5\041\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\065\uffb5\067\uffb5\070\uffb5\071\uffb5\001\002\000" +
    "\056\006\uffb8\031\uffb8\034\uffb8\041\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\067\uffb8\070\uffb8\071\uffb8\001\002\000\056\006\uffb4\031" +
    "\uffb4\034\uffb4\041\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054\uffb4\055\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\001\002\000\024\005\uff86\006\uff86\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\013\uff86\014\uff86\026\245\001\002" +
    "\000\024\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012" +
    "\uff7a\013\uff7a\014\uff7a\026\244\001\002\000\056\006\uffb6" +
    "\031\uffb6\034\uffb6\041\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\067\uffb6\070" +
    "\uffb6\071\uffb6\001\002\000\056\006\uffbd\031\uffbd\034\uffbd" +
    "\041\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\065\uffbd\067\uffbd\070\uffbd\071\uffbd\001" +
    "\002\000\056\006\uffbe\031\uffbe\034\uffbe\041\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\067\uffbe\070\uffbe\071\uffbe\001\002\000\056\006" +
    "\043\031\030\034\uffd2\041\015\043\050\044\uffd2\045\uffd2" +
    "\046\060\047\033\050\051\051\014\053\061\054\011\055" +
    "\020\061\010\062\037\063\036\064\040\065\056\067\024" +
    "\070\064\071\034\001\002\000\056\006\uffbb\031\uffbb\034" +
    "\uffbb\041\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\053\uffbb\054\uffbb\055\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\067\uffbb\070\uffbb\071\uffbb" +
    "\001\002\000\056\006\uffd0\031\uffd0\034\uffd0\041\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\053\uffd0\054\uffd0\055\uffd0\061\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002\000\056" +
    "\006\uffb9\031\uffb9\034\uffb9\041\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\001\002\000\024\005\uff79\006\uff79" +
    "\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\026" +
    "\242\001\002\000\026\005\uff88\006\uff88\007\uff88\010\uff88" +
    "\011\uff88\012\uff88\013\uff88\014\uff88\026\241\066\067\001" +
    "\002\000\056\006\uffb1\031\uffb1\034\uffb1\041\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\067\uffb1\070\uffb1\071\uffb1\001\002\000\056\006" +
    "\uffb3\031\uffb3\034\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\067\uffb3" +
    "\070\uffb3\071\uffb3\001\002\000\056\006\uffd1\031\uffd1\034" +
    "\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\053\uffd1\054\uffd1\055\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\065\uffd1\067\uffd1\070\uffd1\071\uffd1" +
    "\001\002\000\056\006\uffaf\031\uffaf\034\uffaf\041\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\067\uffaf\070\uffaf\071\uffaf\001\002\000\056" +
    "\006\uffae\031\uffae\034\uffae\041\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\053\uffae\054\uffae" +
    "\055\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\067" +
    "\uffae\070\uffae\071\uffae\001\002\000\056\006\uffb2\031\uffb2" +
    "\034\uffb2\041\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2\055\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\065\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\001\002\000\056\006\uffb0\031\uffb0\034\uffb0\041\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\067\uffb0\070\uffb0\071\uffb0\001\002\000" +
    "\004\032\uffa3\001\002\000\054\002\uffc7\006\uffc7\031\uffc7" +
    "\041\uffc7\043\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7\001\002\000" +
    "\010\023\114\024\115\026\253\001\002\000\062\002\uffd5" +
    "\006\uffd5\031\uffd5\034\uffd5\041\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\001\002\000\004\065\256" +
    "\001\002\000\004\026\261\001\002\000\004\027\257\001" +
    "\002\000\030\006\043\025\102\031\030\055\105\061\010" +
    "\063\036\064\040\065\103\067\024\070\064\071\034\001" +
    "\002\000\010\023\114\024\115\026\uffdb\001\002\000\030" +
    "\006\043\025\102\031\030\055\105\061\010\063\036\064" +
    "\040\065\103\067\024\070\064\071\034\001\002\000\010" +
    "\023\114\024\115\026\263\001\002\000\006\013\266\014" +
    "\265\001\002\000\004\032\267\001\002\000\004\032\uffd9" +
    "\001\002\000\004\032\uffda\001\002\000\004\033\270\001" +
    "\002\000\052\006\043\031\030\034\uffd3\041\015\043\050" +
    "\046\060\047\033\050\051\051\014\053\061\054\011\055" +
    "\020\061\010\062\037\063\036\064\040\065\056\067\024" +
    "\070\064\071\034\001\002\000\004\034\272\001\002\000" +
    "\062\002\uffdc\006\uffdc\031\uffdc\034\uffdc\041\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\067\uffdc\070\uffdc\071\uffdc\001\002\000" +
    "\032\006\043\025\102\031\030\033\306\055\105\061\010" +
    "\063\036\064\040\065\103\067\024\070\064\071\034\001" +
    "\002\000\030\006\043\025\102\031\030\055\105\061\010" +
    "\063\036\064\040\065\103\067\024\070\064\071\034\001" +
    "\002\000\004\026\uffaa\001\002\000\004\026\uffa9\001\002" +
    "\000\012\037\157\040\156\057\071\060\072\001\002\000" +
    "\010\023\114\024\115\034\301\001\002\000\024\005\uff85" +
    "\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014" +
    "\uff85\027\302\001\002\000\030\006\043\025\102\031\030" +
    "\055\105\061\010\063\036\064\040\065\103\067\024\070" +
    "\064\071\034\001\002\000\010\023\114\024\115\026\304" +
    "\001\002\000\062\002\uffed\006\uffed\031\uffed\034\uffed\041" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\065\uffed\067\uffed\070\uffed\071\uffed" +
    "\001\002\000\010\023\114\024\115\026\315\001\002\000" +
    "\026\006\043\031\030\055\105\061\010\063\036\064\040" +
    "\065\103\067\024\070\064\071\034\001\002\000\026\004" +
    "\uffe9\005\131\006\121\007\127\010\135\011\123\012\124" +
    "\013\132\014\134\034\uffe9\001\002\000\006\004\311\034" +
    "\312\001\002\000\026\006\043\031\030\055\105\061\010" +
    "\063\036\064\040\065\103\067\024\070\064\071\034\001" +
    "\002\000\004\026\313\001\002\000\062\002\uffee\006\uffee" +
    "\031\uffee\034\uffee\041\uffee\043\uffee\044\uffee\045\uffee\046" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\055\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\067" +
    "\uffee\070\uffee\071\uffee\001\002\000\026\004\uffea\005\131" +
    "\006\121\007\127\010\135\011\123\012\124\013\132\014" +
    "\134\034\uffea\001\002\000\062\002\ufff1\006\ufff1\031\ufff1" +
    "\034\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\001\002\000\062\002\uffd7\006\uffd7\031\uffd7" +
    "\034\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\001\002\000\030\006\043\025\102\031\030" +
    "\055\105\061\010\063\036\064\040\065\103\067\024\070" +
    "\064\071\034\001\002\000\010\023\114\024\115\032\321" +
    "\001\002\000\004\033\322\001\002\000\010\034\uffe2\044" +
    "\327\045\325\001\002\000\010\034\uffe1\044\327\045\325" +
    "\001\002\000\004\034\335\001\002\000\004\027\333\001" +
    "\002\000\010\034\uffdf\044\uffdf\045\uffdf\001\002\000\026" +
    "\006\043\031\030\055\105\061\010\063\036\064\040\065" +
    "\103\067\024\070\064\071\034\001\002\000\024\005\131" +
    "\006\121\007\127\010\135\011\123\012\124\013\132\014" +
    "\134\027\331\001\002\000\056\006\043\031\030\034\uffd3" +
    "\041\015\043\050\044\uffd3\045\uffd3\046\060\047\033\050" +
    "\051\051\014\053\061\054\011\055\020\061\010\062\037" +
    "\063\036\064\040\065\056\067\024\070\064\071\034\001" +
    "\002\000\010\034\uffde\044\uffde\045\uffde\001\002\000\056" +
    "\006\043\031\030\034\uffd3\041\015\043\050\044\uffd3\045" +
    "\uffd3\046\060\047\033\050\051\051\014\053\061\054\011" +
    "\055\020\061\010\062\037\063\036\064\040\065\056\067" +
    "\024\070\064\071\034\001\002\000\010\034\uffdd\044\uffdd" +
    "\045\uffdd\001\002\000\062\002\uffe3\006\uffe3\031\uffe3\034" +
    "\uffe3\041\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\067\uffe3\070\uffe3" +
    "\071\uffe3\001\002\000\010\034\uffe0\044\uffe0\045\uffe0\001" +
    "\002\000\054\002\ufffe\006\ufffe\031\ufffe\041\ufffe\043\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\001\002\000\054\002\uffc3\006" +
    "\uffc3\031\uffc3\041\uffc3\043\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\001\002\000\054\004\uff8a\005\uff8a\006\uff8a\007\127\010" +
    "\135\011\123\012\124\013\132\014\134\015\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\026" +
    "\uff8a\027\uff8a\032\uff8a\034\uff8a\001\002\000\054\002\uffc2" +
    "\006\uffc2\031\uffc2\041\uffc2\043\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\001\002\000\010\026\ufff3\027\344\033\346\001\002" +
    "\000\032\006\043\025\102\031\030\033\354\055\105\061" +
    "\010\063\036\064\040\065\103\067\024\070\064\071\034" +
    "\001\002\000\004\026\352\001\002\000\026\006\043\031" +
    "\030\055\105\061\010\063\036\064\040\065\103\067\024" +
    "\070\064\071\034\001\002\000\024\005\131\006\121\007" +
    "\127\010\135\011\123\012\124\013\132\014\134\034\350" +
    "\001\002\000\004\026\351\001\002\000\062\002\uffef\006" +
    "\uffef\031\uffef\034\uffef\041\uffef\043\uffef\044\uffef\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef" +
    "\067\uffef\070\uffef\071\uffef\001\002\000\062\002\ufff4\006" +
    "\ufff4\031\ufff4\034\ufff4\041\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\055\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\001\002\000\010\023\114\024" +
    "\115\026\ufff2\001\002\000\026\006\043\031\030\055\105" +
    "\061\010\063\036\064\040\065\103\067\024\070\064\071" +
    "\034\001\002\000\006\004\311\034\356\001\002\000\004" +
    "\026\357\001\002\000\062\002\ufff0\006\ufff0\031\ufff0\034" +
    "\ufff0\041\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\061" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0\070\ufff0" +
    "\071\ufff0\001\002\000\030\006\043\025\102\031\030\055" +
    "\105\061\010\063\036\064\040\065\103\067\024\070\064" +
    "\071\034\001\002\000\010\023\114\024\115\032\362\001" +
    "\002\000\004\033\363\001\002\000\052\006\043\031\030" +
    "\034\uffd3\041\015\043\050\046\060\047\033\050\051\051" +
    "\014\053\061\054\011\055\020\061\010\062\037\063\036" +
    "\064\040\065\056\067\024\070\064\071\034\001\002\000" +
    "\004\034\365\001\002\000\062\002\uffd8\006\uffd8\031\uffd8" +
    "\034\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\067\uffd8\070" +
    "\uffd8\071\uffd8\001\002\000\010\023\114\024\115\032\367" +
    "\001\002\000\054\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\026" +
    "\uff8b\027\uff8b\032\uff8b\034\uff8b\001\002\000\054\002\uffc6" +
    "\006\uffc6\031\uffc6\041\uffc6\043\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\067\uffc6\070\uffc6\071" +
    "\uffc6\001\002\000\054\002\uffc4\006\uffc4\031\uffc4\041\uffc4" +
    "\043\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\067\uffc4\070\uffc4\071\uffc4\001\002\000\004\026" +
    "\uffa8\001\002\000\004\026\uffa7\001\002\000\010\056\111" +
    "\057\071\060\072\001\002\000\004\031\376\001\002\000" +
    "\006\032\uffa0\065\u0100\001\002\000\004\032\u0104\001\002" +
    "\000\006\004\uff9d\032\uff9d\001\002\000\006\004\u0102\032" +
    "\uff9f\001\002\000\004\065\u0103\001\002\000\006\004\uff9e" +
    "\032\uff9e\001\002\000\004\033\u0105\001\002\000\052\006" +
    "\043\031\030\034\uffd3\041\015\043\050\046\060\047\033" +
    "\050\051\051\014\053\061\054\011\055\020\061\010\062" +
    "\037\063\036\064\040\065\056\067\024\070\064\071\034" +
    "\001\002\000\004\034\u0107\001\002\000\054\002\uffa1\006" +
    "\uffa1\031\uffa1\041\uffa1\043\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\064\uffa1\065\uffa1\067\uffa1\070\uffa1\071\uffa1" +
    "\001\002\000\030\006\043\025\102\031\030\055\105\061" +
    "\010\063\036\064\040\065\103\067\024\070\064\071\034" +
    "\001\002\000\010\023\114\024\115\032\u010a\001\002\000" +
    "\004\033\u010b\001\002\000\052\006\043\031\030\034\uffd3" +
    "\041\015\043\050\046\060\047\033\050\051\051\014\053" +
    "\061\054\011\055\020\061\010\062\037\063\036\064\040" +
    "\065\056\067\024\070\064\071\034\001\002\000\004\034" +
    "\u010d\001\002\000\064\002\uffe6\006\uffe6\031\uffe6\034\uffe6" +
    "\041\uffe6\042\u010f\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\001\002\000\062\002\uffe5\006\uffe5\031\uffe5" +
    "\034\uffe5\041\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\067\uffe5\070" +
    "\uffe5\071\uffe5\001\002\000\004\033\u0111\001\002\000\062" +
    "\002\uffe7\006\uffe7\031\uffe7\034\uffe7\041\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\067\uffe7\070\uffe7\071\uffe7\001\002\000\052" +
    "\006\043\031\030\034\uffd3\041\015\043\050\046\060\047" +
    "\033\050\051\051\014\053\061\054\011\055\020\061\010" +
    "\062\037\063\036\064\040\065\056\067\024\070\064\071" +
    "\034\001\002\000\004\034\u0113\001\002\000\062\002\uffe4" +
    "\006\uffe4\031\uffe4\034\uffe4\041\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065" +
    "\uffe4\067\uffe4\070\uffe4\071\uffe4\001\002\000\030\006\043" +
    "\025\102\031\030\055\105\061\010\063\036\064\040\065" +
    "\103\067\024\070\064\071\034\001\002\000\010\023\114" +
    "\024\115\032\u0116\001\002\000\004\026\u0117\001\002\000" +
    "\062\002\uffd6\006\uffd6\031\uffd6\034\uffd6\041\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\067\uffd6\070\uffd6\071\uffd6\001\002\000" +
    "\004\002\001\001\002\000\030\006\043\025\102\031\030" +
    "\055\105\061\010\063\036\064\040\065\103\067\024\070" +
    "\064\071\034\001\002\000\010\023\114\024\115\032\u011b" +
    "\001\002\000\004\026\u011c\001\002\000\062\002\uffd4\006" +
    "\uffd4\031\uffd4\034\uffd4\041\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4" +
    "\067\uffd4\070\uffd4\071\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\074\002\012\003\004\004\024\006\030\007" +
    "\005\010\003\011\052\012\051\014\020\015\043\017\054" +
    "\022\025\025\034\031\056\032\011\033\044\034\031\035" +
    "\040\037\046\044\006\045\041\046\053\047\045\050\021" +
    "\055\061\060\022\061\062\062\026\067\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\063\106\064" +
    "\371\065\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\100\015\074" +
    "\042\365\043\073\044\103\045\076\046\053\055\075\060" +
    "\022\061\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\100\015\074\044" +
    "\340\045\076\046\053\055\075\060\022\061\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\004\024\006" +
    "\030\007\005\010\003\011\052\012\051\014\020\015\043" +
    "\017\054\022\025\025\034\031\056\032\011\033\044\034" +
    "\031\035\040\037\046\044\006\045\041\046\053\050\336" +
    "\055\061\060\022\061\062\062\026\067\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\064\274\065\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\100\015\074\042\251\043" +
    "\073\044\103\045\076\046\053\055\075\060\022\061\105" +
    "\001\001\000\002\001\001\000\006\064\064\065\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\100\015\074\042\077\043\073" +
    "\044\103\045\076\046\053\055\075\060\022\061\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\100\015\074\042\171\043\073\044\103\045\076" +
    "\046\053\055\075\060\022\061\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\100\015\074\042\112\043\073\044\103" +
    "\045\076\046\053\055\075\060\022\061\105\001\001\000" +
    "\002\001\001\000\026\014\100\015\074\042\117\043\073" +
    "\044\103\045\076\046\053\055\075\060\022\061\105\001" +
    "\001\000\026\014\100\015\074\042\116\043\073\044\103" +
    "\045\076\046\053\055\075\060\022\061\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\014\100\015\074\044\151\045\076\046\053\055\075\060" +
    "\022\061\105\001\001\000\022\014\100\015\074\044\150" +
    "\045\076\046\053\055\075\060\022\061\105\001\001\000" +
    "\022\014\100\015\074\044\147\045\076\046\053\055\075" +
    "\060\022\061\105\001\001\000\022\014\100\015\074\044" +
    "\146\045\076\046\053\055\075\060\022\061\105\001\001" +
    "\000\022\014\100\015\074\044\145\045\076\046\053\055" +
    "\075\060\022\061\105\001\001\000\022\014\100\015\074" +
    "\044\144\045\076\046\053\055\075\060\022\061\105\001" +
    "\001\000\022\014\100\015\074\044\143\045\076\046\053" +
    "\055\075\060\022\061\105\001\001\000\022\014\100\015" +
    "\074\044\142\045\076\046\053\055\075\060\022\061\105" +
    "\001\001\000\022\014\100\015\074\044\141\045\076\046" +
    "\053\055\075\060\022\061\105\001\001\000\002\001\001" +
    "\000\022\014\100\015\074\044\140\045\076\046\053\055" +
    "\075\060\022\061\105\001\001\000\002\001\001\000\022" +
    "\014\100\015\074\044\137\045\076\046\053\055\075\060" +
    "\022\061\105\001\001\000\022\014\100\015\074\044\136" +
    "\045\076\046\053\055\075\060\022\061\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\100\015" +
    "\074\042\167\043\073\044\103\045\076\046\053\055\075" +
    "\060\022\061\105\001\001\000\032\014\100\015\074\042" +
    "\161\043\073\044\103\045\076\046\053\055\075\056\163" +
    "\057\162\060\022\061\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\100\015\074\042\165\043\073\044\103" +
    "\045\076\046\053\055\075\060\022\061\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\100\015\074\042" +
    "\173\043\073\044\103\045\076\046\053\055\075\060\022" +
    "\061\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\100\015\074\042\176\043\073\044\103\045\076" +
    "\046\053\055\075\060\022\061\105\001\001\000\002\001" +
    "\001\000\004\066\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\004\216\006\221\007\212\010\211\011\231\012" +
    "\230\014\215\015\226\017\233\022\217\025\223\030\214" +
    "\031\235\032\213\033\227\034\222\035\224\036\232\044" +
    "\006\045\225\046\053\053\234\055\236\060\022\061\237" +
    "\062\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\216\006\221" +
    "\007\212\010\211\011\231\012\230\014\215\015\226\017" +
    "\233\022\217\025\223\031\235\032\213\033\227\034\222" +
    "\035\224\044\006\045\225\046\053\053\242\055\236\060" +
    "\022\061\237\062\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\064" +
    "\064\065\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\100\015\074\042\257\043\073\044\103\045\076\046" +
    "\053\055\075\060\022\061\105\001\001\000\002\001\001" +
    "\000\026\014\100\015\074\042\261\043\073\044\103\045" +
    "\076\046\053\055\075\060\022\061\105\001\001\000\002" +
    "\001\001\000\004\027\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\004\216\006\221\007\212\010\211\011\231\012\230\014" +
    "\215\015\226\017\233\022\217\025\223\030\270\031\235" +
    "\032\213\033\227\034\222\035\224\036\232\044\006\045" +
    "\225\046\053\053\234\055\236\060\022\061\237\062\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\100\015\074\042\304\043\073\044\103\045\076\046\053" +
    "\055\075\060\022\061\105\001\001\000\026\014\100\015" +
    "\074\042\277\043\073\044\103\045\076\046\053\055\075" +
    "\060\022\061\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\100\015\074\042\302\043\073\044\103\045" +
    "\076\046\053\055\075\060\022\061\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\013" +
    "\307\014\100\015\074\044\306\045\076\046\053\055\075" +
    "\060\022\061\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\100\015\074\044\313\045\076\046\053" +
    "\055\075\060\022\061\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\100\015\074\042\317\043\073\044" +
    "\103\045\076\046\053\055\075\060\022\061\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\322\024" +
    "\325\054\323\001\001\000\004\024\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\100\015\074\044\327\045\076\046\053\055\075\060\022" +
    "\061\105\001\001\000\002\001\001\000\066\004\216\006" +
    "\221\007\212\010\211\011\231\012\230\014\215\015\226" +
    "\017\233\022\217\025\223\030\331\031\235\032\213\033" +
    "\227\034\222\035\224\036\232\044\006\045\225\046\053" +
    "\053\234\055\236\060\022\061\237\062\220\001\001\000" +
    "\002\001\001\000\066\004\216\006\221\007\212\010\211" +
    "\011\231\012\230\014\215\015\226\017\233\022\217\025" +
    "\223\030\333\031\235\032\213\033\227\034\222\035\224" +
    "\036\232\044\006\045\225\046\053\053\234\055\236\060" +
    "\022\061\237\062\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\344" +
    "\001\001\000\026\014\100\015\074\042\352\043\073\044" +
    "\103\045\076\046\053\055\075\060\022\061\105\001\001" +
    "\000\002\001\001\000\022\014\100\015\074\044\346\045" +
    "\076\046\053\055\075\060\022\061\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\354\014\100\015\074" +
    "\044\306\045\076\046\053\055\075\060\022\061\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\100\015\074\042\360\043\073\044\103\045" +
    "\076\046\053\055\075\060\022\061\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\004\216\006\221\007" +
    "\212\010\211\011\231\012\230\014\215\015\226\017\233" +
    "\022\217\025\223\030\363\031\235\032\213\033\227\034" +
    "\222\035\224\036\232\044\006\045\225\046\053\053\234" +
    "\055\236\060\022\061\237\062\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\376\041\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\004\216\006\221\007\212\010" +
    "\211\011\231\012\230\014\215\015\226\017\233\022\217" +
    "\025\223\030\u0105\031\235\032\213\033\227\034\222\035" +
    "\224\036\232\044\006\045\225\046\053\053\234\055\236" +
    "\060\022\061\237\062\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\100\015\074\042\u0108\043\073" +
    "\044\103\045\076\046\053\055\075\060\022\061\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\004\216" +
    "\006\221\007\212\010\211\011\231\012\230\014\215\015" +
    "\226\017\233\022\217\025\223\030\u010b\031\235\032\213" +
    "\033\227\034\222\035\224\036\232\044\006\045\225\046" +
    "\053\053\234\055\236\060\022\061\237\062\220\001\001" +
    "\000\002\001\001\000\006\020\u010f\021\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\004\216\006\221\007\212\010\211\011\231\012\230\014" +
    "\215\015\226\017\233\022\217\025\223\030\u0111\031\235" +
    "\032\213\033\227\034\222\035\224\036\232\044\006\045" +
    "\225\046\053\053\234\055\236\060\022\061\237\062\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\100\015\074\042\u0114\043\073\044\103\045\076\046\053" +
    "\055\075\060\022\061\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\100\015\074\042\u0119\043\073\044\103\045\076\046" +
    "\053\055\075\060\022\061\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_CJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_CJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_CJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo crearNodo(String nombre,String valor,int linea,int columna){
        Nodo nuevo = new Nodo(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }

    //Este metodo retorna la RAIZ del arbol  generado 
    public Nodo getRoot(){
        return action_obj.root;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_CJS$actions {


    //se declaran variables globales etc.
    //GestorC3D gs = new GestorC3D();
    public int Index=1;
    public Nodo root = new Nodo();
    public String temporal="";

  private final AS_CJS parser;

  /** Constructor */
  CUP$AS_CJS$actions(AS_CJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_CJS$do_action(
    int                        CUP$AS_CJS$act_num,
    java_cup.runtime.lr_parser CUP$AS_CJS$parser,
    java.util.Stack            CUP$AS_CJS$stack,
    int                        CUP$AS_CJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_CJS$result;

      /* select the action based on the action number */
      switch (CUP$AS_CJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lista_envio ::= expr_l 
            {
              Nodo RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("envios","",H.linea,H.columna);
                    RESULT.add(H);
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_envio",44, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lista_envio ::= lista_envio COMA expr_l 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    R.add(X);
                    RESULT = R;
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_envio",44, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // envio ::= lista_envio 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("envio",45, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // envio ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("envios","",0,0); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("envio",45, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LlamadaFuncion ::= I_D APAR envio CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                        RESULT = parser.crearNodo("llamadaFuncion","",a.getLinea(),a.getColumna());  
                        RESULT.add(parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna()));
                        RESULT.add(H);
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",43, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // dato ::= LlamadaFuncion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // dato ::= funcion_acadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // dato ::= funcion_conteo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // dato ::= DATETIME_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("datetime",a.getCadena(),a.getLinea(),a.getColumna());  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // dato ::= DATE_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("date",a.getCadena(),a.getLinea(),a.getColumna());      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // dato ::= BOOLEAN_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("boolean",a.getCadena(),a.getLinea(),a.getColumna());   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // dato ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // dato ::= NUM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("number",a.getCadena(),a.getLinea(),a.getColumna());    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // dato ::= STRING_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                            String cad = a.getCadena(); cad= cad.substring(1,cad.length()-1);
                            RESULT = parser.crearNodo("string",cad,a.getLinea(),a.getColumna()); 
                          
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // dato ::= I_D 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna());    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dato",36, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // simplificada ::= expr_a SUB 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		

                                if(X.nombre.equals("id")){
                                    temporal=X.valor;
                                }

                                RESULT = parser.crearNodo("SUB","",w.getLinea(),w.getColumna());
                                RESULT.add(X);
                               
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("simplificada",35, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // simplificada ::= expr_a ADD 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 
                                
                                if(X.nombre.equals("id")){
                                    temporal=X.valor;
                                }

                                RESULT = parser.crearNodo("ADD","",w.getLinea(),w.getColumna());
                                RESULT.add(X);
                              
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("simplificada",35, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // accesoAr ::= I_D ALLA expr_l CLLA 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                RESULT=parser.crearNodo("accesoAr",f.getCadena(),f.getLinea(),f.getColumna());
                RESULT.add(a);
                //RESULT.add(lista);
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("accesoAr",46, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr_a ::= simplificada 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr_a ::= accesoAr 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr_a ::= Accion_Obtener 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr_a ::= dato 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr_a ::= MENOS expr_a 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT = parser.crearNodo("unitario","",a.getLinea(),a.getColumna()); RESULT.add(H); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr_a ::= APAR expr_l CPAR 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		  RESULT=r;    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr_a ::= expr_a POT expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("POT","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr_a ::= expr_a MOD expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MOD","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr_a ::= expr_a DIV expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("DIV","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr_a ::= expr_a POR expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("POR","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr_a ::= expr_a MENOS expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MENOS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr_a ::= expr_a MAS expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MAS","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_a",34, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr_r ::= expr_a 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT = r;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr_r ::= expr_a DIF expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("DIF","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr_r ::= expr_a IG_IG expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("IG_IG","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_r ::= expr_a MAYIQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MAYIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr_r ::= expr_a MAYQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MAYQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr_r ::= expr_a MENIQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MENIQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_r ::= expr_a MENQ expr_a 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                        RESULT = parser.crearNodo("MENQ","",a.getLinea(),a.getColumna());
                                        RESULT.add(b);    RESULT.add(c);
                                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_r",33, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_l ::= expr_r 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  RESULT=a;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_l ::= NOT expr_l 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    
                                          RESULT = parser.crearNodo("NOT","",a.getLinea(),a.getColumna());
                                          RESULT.add(b);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_l ::= expr_l OR expr_l 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("OR","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_l ::= expr_l AND expr_l 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                                          RESULT = parser.crearNodo("AND","",a.getLinea(),a.getColumna());
                                          RESULT.add(b); RESULT.add(c);
                                       
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("expr_l",32, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_parametros ::= I_D 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("parametros","",x.getLinea(),x.getColumna());
                        Nodo param = parser.crearNodo("parametro","",x.getLinea(),x.getColumna());
                        param.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));
                        RESULT.add(param);    
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_parametros",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_parametros ::= lista_parametros COMA I_D 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        Nodo param = parser.crearNodo("parametro","",y.getLinea(),y.getColumna());
                        param.add(parser.crearNodo("id",y.getCadena(),y.getLinea(),y.getColumna()));
                        x.add(param);
                        RESULT=x;
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_parametros",31, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros ::= lista_parametros 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		     RESULT=x;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("parametros","",0,0);  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("parametros",30, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funcion ::= FUNCION I_D APAR parametros CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo z = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                RESULT = parser.crearNodo("funcion","",w.getLinea(),w.getColumna()); // se crea la raiz FUNCION
                RESULT.add(parser.crearNodo("id",x.getCadena(),x.getLinea(),x.getColumna()));// agrego el nombre 
                RESULT.add(y);//agrego los parametros
                RESULT.add(z);//agrego las instrucciones
           
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion",29, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FuncionAnonima ::= I_D APAR CPAR 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                        RESULT = parser.crearNodo("f_anonima","id",w.getLinea(),w.getColumna());
                        RESULT.add(parser.crearNodo("id",w.getCadena(),w.getLinea(),w.getColumna()));
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("FuncionAnonima",52, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FuncionAnonima ::= FUNCION APAR CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                        RESULT = parser.crearNodo("f_anonima","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("FuncionAnonima",52, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PtoObservador ::= PTO OBSERVADOR APAR expr_l COMA FuncionAnonima CPAR 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		    
                        RESULT = parser.crearNodo("pto_observador","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                        RESULT.add(y);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("PtoObservador",51, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PtoSetElemento ::= PTO SETELEMENTO APAR expr_l COMA expr_l CPAR 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		    
                        RESULT = parser.crearNodo("pto_elemento","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                        RESULT.add(y);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("PtoSetElemento",50, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PtoObtener ::= PTO OBTENER APAR expr_l CPAR 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		    
                        RESULT = parser.crearNodo("pto_obtener","",w.getLinea(),w.getColumna());
                        RESULT.add(x);
                 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("PtoObtener",49, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Accion_Setear ::= DOCUMENTO PtoObservador 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Setear","",w.getLinea(),w.getColumna());
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Accion_Setear ::= DOCUMENTO PtoSetElemento 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Setear","",w.getLinea(),w.getColumna());
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Accion_Setear ::= I_D PtoObservador 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Setear","",w.getLinea(),w.getColumna());
                        RESULT.add(parser.crearNodo("id_cmp",w.getCadena(),w.getLinea(),w.getColumna()));
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Accion_Setear ::= I_D PtoSetElemento 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Setear","",w.getLinea(),w.getColumna());
                        RESULT.add(parser.crearNodo("id_cmp",w.getCadena(),w.getLinea(),w.getColumna()));
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Accion_Setear ::= Accion_Obtener PtoObservador 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Setear","",x.linea,x.columna);
                        RESULT.add(x);
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Accion_Setear ::= Accion_Obtener PtoSetElemento 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Setear","",x.linea,x.columna);
                        RESULT.add(x);
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Setear",48, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Accion_Obtener ::= DOCUMENTO PtoObtener 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Accion_Obtener","",w.getLinea(),w.getColumna());
                        RESULT.add(h);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Accion_Obtener",47, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia ::= simplificada PYC 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 r.valor=temporal;   RESULT = r;    temporal=""; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia ::= funcion_acadena PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia ::= funcion_conteo PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia ::= Accion_Obtener PYC 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= Accion_Setear PYC 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia ::= LlamadaFuncion PYC 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= Mensaje 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= Retornar 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= Imprimir 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= Detener 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= Para 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= Mientras 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= Selecciona 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= Si 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= asignacionGlb 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="asignacionLocal";  RESULT= X;      
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= asigna_vecGlbF2 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="asigna_vecLocalF2"; RESULT= X;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= asigna_vecGlbF1 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="asigna_vecLocalF1"; RESULT= X;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= declara_var 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="declara_var_L"; RESULT= X;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= declara_vecF2 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="declara_vecF2_L"; RESULT= X;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= declara_vecF1 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 X.nombre="declara_vecF1_L"; RESULT= X;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia",41, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia2 ::= simplificada PYC 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 r.valor=temporal;   RESULT = r;    temporal="";   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia2 ::= funcion_acadena PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia2 ::= funcion_conteo PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = a;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia2 ::= Accion_Obtener PYC 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia2 ::= Accion_Setear PYC 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia2 ::= LlamadaFuncion PYC 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia2 ::= Mensaje 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia2 ::= Retornar 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia2 ::= Imprimir 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia2 ::= Detener 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia2 ::= Para 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia2 ::= Mientras 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia2 ::= Selecciona 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia2 ::= Si 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("sentencia2",53, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Instrucciones ::= sentencia 
            {
              Nodo RESULT =null;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = parser.crearNodo("sentencias","",H.linea,H.columna);  RESULT.add(H); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instrucciones ::= Instrucciones sentencia 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int Hleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Hright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo H = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		  R.add(H); RESULT = R;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instrucciones ::= Instrucciones 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT = X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("instrucciones",22, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instrucciones ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("sentencias","",0,0);  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("instrucciones",22, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Mensaje ::= MENSAJE APAR expr_l CPAR PYC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                RESULT = parser.crearNodo("mensaje","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la expresion a MENSAJEAR
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Mensaje",27, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Retornar ::= RETORNAR expr_l PYC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                RESULT = parser.crearNodo("retornar","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la expresion a retornar
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Retornar",26, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Imprimir ::= IMPRIMIR APAR expr_l CPAR PYC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                RESULT = parser.crearNodo("imprimir","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la expresion a IMPRIMIR en la consola de salida
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Imprimir",25, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Detener ::= DETENER PYC 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		RESULT = parser.crearNodo("detener","",w.getLinea(),w.getColumna());
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Detener",24, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Mientras ::= MIENTRAS APAR expr_l CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                    RESULT = parser.crearNodo("mientras","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la CONDICION
                    RESULT.add(Y);// se agregan las instrucciones
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Mientras",23, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operador ::= SUB 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = parser.crearNodo("operador","sub",w.getLinea(),w.getColumna()); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("operador",21, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operador ::= ADD 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = parser.crearNodo("operador","add",w.getLinea(),w.getColumna()); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("operador",21, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dec_for ::= I_D DSPTS expr_l 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("dec_for","",w.getLinea(),w.getColumna());
                    RESULT.add(parser.crearNodo("id",w.getCadena(),w.getLinea(),w.getColumna()));// se agrega el ID
                    RESULT.add(X);// se agrega el valor de la variable del for
               
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("dec_for",20, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Para ::= PARA APAR dec_for PYC expr_l PYC operador CPAR ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-8)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-8)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-8)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo Z = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Oleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Oright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo O = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                    RESULT = parser.crearNodo("para","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la declaracion FOR
                    RESULT.add(Y);// se agrega la CONDICION
                    RESULT.add(Z);// se agrega el OPERADOR
                    RESULT.add(O);// se agregan las instrucciones

               
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Para",19, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-10)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // caso_defecto ::= DEFECTO DSPTS instrucciones 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("defecto","",w.getLinea(),w.getColumna());
                    RESULT.add(Y);// se agregan las instrucciones
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("caso_defecto",18, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // caso_defecto ::= CASO expr_a DSPTS instrucciones 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("caso","",w.getLinea(),w.getColumna());
                    RESULT.add(X);// se agrega la EXPR
                    RESULT.add(Y);// se agregan las instrucciones
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("caso_defecto",18, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_casos ::= caso_defecto 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                RESULT = parser.crearNodo("casos","",X.linea,X.columna);
                RESULT.add(X);
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_casos",17, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_casos ::= lista_casos caso_defecto 
            {
              Nodo RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo R = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                R.add(X);
                RESULT = R;
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_casos",17, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cont_selecciona ::= lista_casos 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT= X; 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("cont_selecciona",42, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cont_selecciona ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("casos","",0,0); 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("cont_selecciona",42, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Selecciona ::= SELECCIONA APAR expr_l CPAR ALLA cont_selecciona CLLA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                RESULT = parser.crearNodo("selecciona","",w.getLinea(),w.getColumna());
                RESULT.add(X);// se agrega la EXPRESION
                RESULT.add(Y);// se agrega la lista de CASOS
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Selecciona",16, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Sino ::= SINO ALLA instrucciones CLLA 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
            RESULT=X; // se agrega el conjunto de instrucciones
            
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Sino",15, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opcional ::= Sino 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		 RESULT=X;  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("opcional",14, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opcional ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("sentencias","",0,0);  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("opcional",14, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Si ::= SI APAR expr_l CPAR ALLA instrucciones CLLA opcional 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).right;
		token w = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo Z = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
            RESULT = parser.crearNodo("si","",w.getLinea(),w.getColumna());
            RESULT.add(X);// se agrega la expresion
            RESULT.add(Y);// se agrega el conjunto de instrucciones
            RESULT.add(Z);// se agrega el SINO (opcional)

          
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Si",13, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= dato 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = a;
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("valor",12, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_valores ::= expr_a 
            {
              Nodo RESULT =null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("valores","",X.linea,X.columna);
                    RESULT.add(X);
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_valores",9, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_valores ::= lista_valores COMA expr_a 
            {
              Nodo RESULT =null;
		int Yleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo Y = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    Y.add(X);
                    RESULT=Y;
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("lista_valores",9, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcion_acadena ::= I_D PTO ATEXTO APAR CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		
                       RESULT = parser.crearNodo("funcion_aTexto","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna()));
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion_acadena",11, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion_conteo ::= I_D PTO CONTEO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                       RESULT = parser.crearNodo("funcion_Conteo","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("id",a.getCadena(),a.getLinea(),a.getColumna()));
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("funcion_conteo",10, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asigna_vecGlbF2 ::= I_D ALLA expr_l CLLA DSPTS expr_l PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo X = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                       RESULT = parser.crearNodo("asigna_vecGlbF2","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                       Nodo dim=parser.crearNodo("indice","",b.linea,b.columna);
                       dim.add(b);
                       RESULT.add(dim);
                       RESULT.add(X);
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_vecGlbF2",8, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asigna_vecGlbF1 ::= I_D DSPTS ALLA lista_valores CLLA PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		
                       RESULT = parser.crearNodo("asigna_vecGlbF1","",a.getLinea(),a.getColumna());
                       RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                       RESULT.add(c);
                    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_vecGlbF1",7, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declara_vecF2 ::= DIMV I_D ALLA expr_a CLLA PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		// se declara el tamano del vector unidimensional
                    RESULT = parser.crearNodo("declara_vecF2","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));
                    Nodo dim=parser.crearNodo("dimensiones","",c.linea,c.columna);
                    dim.add(c);
                    RESULT.add(dim);
                    
                 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_vecF2",6, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declara_vecF1 ::= DIMV I_D DSPTS ALLA lista_valores CLLA PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		// se crea el vector con valores
                    RESULT = parser.crearNodo("declara_vecF1","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));   
                    RESULT.add(c);
                 
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_vecF1",5, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacionGlb ::= I_D DSPTS expr_l PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                    RESULT = parser.crearNodo("asignacionGlb","",a.getLinea(),a.getColumna());
                    RESULT.add(parser.crearNodo("nombre",a.getCadena(),a.getLinea(),a.getColumna()));
                    RESULT.add(b);    
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asignacionGlb",4, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asigna_var ::= DSPTS expr_l 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("asigna_var","",a.linea,a.columna);
                    RESULT.add(a);   
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_var",3, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asigna_var ::= 
            {
              Nodo RESULT =null;
		   RESULT = parser.crearNodo("asigna_var","",0,0);    
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("asigna_var",3, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declara_var ::= DIMV I_D asigna_var PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		
                        RESULT = parser.crearNodo("declara_var","",a.getLinea(),a.getColumna());
                        RESULT.add(parser.crearNodo("nombre",b.getCadena(),b.getLinea(),b.getColumna()));
                        RESULT.add(c);
                        
                
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("declara_var",2, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido_cjs ::= sentencia2 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenido_cjs ::= funcion 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenido_cjs ::= asigna_vecGlbF2 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenido_cjs ::= asigna_vecGlbF1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenido_cjs ::= asignacionGlb 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenido_cjs ::= declara_vecF2 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenido_cjs ::= declara_vecF1 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenido_cjs ::= declara_var 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		    RESULT = r;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("contenido_cjs",38, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lcontenido_cjs ::= contenido_cjs 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("contenido","",0,0);  
                        RESULT.add(x);
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Lcontenido_cjs",37, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lcontenido_cjs ::= Lcontenido_cjs contenido_cjs 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		
                        r.add(x);
                        RESULT=r;
                  
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("Lcontenido_cjs",37, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // raiz ::= Lcontenido_cjs 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		     RESULT=a;     
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("raiz",1, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= raiz 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.peek()).value;
		   root=r;   
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          return CUP$AS_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)).value;
		RESULT = start_val;
              CUP$AS_CJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.elementAt(CUP$AS_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_CJS$parser.done_parsing();
          return CUP$AS_CJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

