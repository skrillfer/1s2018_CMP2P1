/* The following code was generated by JFlex 1.4.3 on 12/02/18 07:35 PM */



package Analizadores.LenguajeCJS;
import Estructuras.*;
import java.util.LinkedList;
import java_cup.runtime.*;

import Errores.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/02/18 07:35 PM from the specification file
 * <tt>src/Analizadores/LenguajeCJS/Lex_CJS.flex</tt>
 */
public class AL_CJS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\24"+
    "\1\10\1\0\1\6\1\20\1\25\1\12\1\31\1\11\1\16\1\14"+
    "\1\0\1\15\1\5\1\13\12\4\1\30\1\27\1\21\1\22\1\23"+
    "\2\0\2\6\1\36\1\53\1\73\1\63\2\6\1\60\3\6\1\57"+
    "\1\6\1\67\1\55\1\6\1\65\1\46\1\44\1\6\1\74\4\6"+
    "\1\34\1\0\1\35\1\17\1\6\1\0\1\43\1\70\1\51\1\72"+
    "\1\42\1\54\2\6\1\47\1\66\1\6\1\50\1\61\1\40\1\37"+
    "\1\62\1\6\1\56\1\52\1\41\1\64\1\71\1\6\1\45\2\6"+
    "\1\32\1\26\1\33\1\0\41\7\2\0\4\6\4\0\1\6\2\0"+
    "\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0"+
    "\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0"+
    "\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6"+
    "\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7"+
    "\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6"+
    "\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7"+
    "\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0\13\7"+
    "\5\0\53\6\25\7\12\4\4\0\2\6\1\7\143\6\1\0\1\6"+
    "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\4\3\6"+
    "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6"+
    "\13\7\1\6\16\0\12\4\41\6\11\7\2\6\4\0\1\6\5\0"+
    "\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6"+
    "\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7\66\6"+
    "\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\4\1\0"+
    "\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\4\4\6\7\0\1\6\5\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\12\4"+
    "\2\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7"+
    "\2\0\12\4\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\4\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7"+
    "\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\4"+
    "\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\4"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\4\1\0"+
    "\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0"+
    "\2\6\2\7\2\0\12\4\12\0\6\6\2\0\2\7\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7"+
    "\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6"+
    "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\4\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\7\2\0\12\4\2\0\4\6\40\0\1\6"+
    "\27\0\2\7\6\0\12\4\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6"+
    "\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\4"+
    "\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6"+
    "\4\7\15\6\14\7\1\6\1\7\12\4\4\7\2\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0"+
    "\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0"+
    "\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\4"+
    "\41\0\3\7\2\0\12\4\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\4"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\4\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\1\7\12\4\6\0\12\4\15\0\1\6\130\0\5\7\57\6\21\7"+
    "\7\6\4\0\12\4\21\0\11\7\14\0\3\7\36\6\15\7\2\6"+
    "\12\4\54\6\16\7\14\0\44\6\24\7\10\0\12\4\3\0\3\6"+
    "\12\4\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7"+
    "\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0"+
    "\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0"+
    "\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0"+
    "\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0"+
    "\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0\14\7\21\0"+
    "\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0"+
    "\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0"+
    "\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7\27\6"+
    "\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0\1\6"+
    "\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0"+
    "\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6\5\0"+
    "\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\4"+
    "\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6\7\0\1\7"+
    "\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0\4\6"+
    "\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6\1\7\27\6"+
    "\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7\13\0"+
    "\12\4\6\0\22\7\6\6\3\0\1\6\4\0\12\4\34\6\10\7"+
    "\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0"+
    "\1\6\12\4\46\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7"+
    "\2\0\12\4\6\0\27\6\3\0\1\6\1\7\4\0\60\6\1\7"+
    "\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0"+
    "\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0"+
    "\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6\10\7"+
    "\1\0\2\7\2\0\12\4\6\0\u2ba4\6\14\0\27\6\4\0\61\6"+
    "\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6"+
    "\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6"+
    "\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6"+
    "\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6"+
    "\13\0\12\4\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6"+
    "\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6"+
    "\3\0\2\6\22\0\3\7\1\0\1\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\1\4\1\2\1\5\1\2\1\6"+
    "\1\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\2\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\13\5\1\0\1\1\1\0\1\30"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\4\5\1\41\13\5\1\0\22\5\1\42\1\5"+
    "\1\43\2\5\1\44\4\5\1\45\1\46\25\5\1\47"+
    "\1\50\17\5\1\51\1\52\1\53\2\5\1\54\1\5"+
    "\1\55\4\5\1\56\1\57\1\60\3\5\1\61\1\5"+
    "\1\62\1\5\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\75\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\75\0\u01e8\0\75\0\u0225\0\u0262\0\75\0\75"+
    "\0\75\0\u029f\0\u02dc\0\u0319\0\75\0\u0356\0\u0393\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\u03d0\0\u040d"+
    "\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5"+
    "\0\u0632\0\u0131\0\u0131\0\u01ab\0\75\0\u066f\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\75\0\u0f03\0\u016e\0\u0f40\0\u0f7d\0\u016e\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u016e\0\u016e\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310"+
    "\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u016e\0\u016e\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u016e\0\u016e\0\u016e\0\u1942\0\u197f"+
    "\0\u016e\0\u19bc\0\u016e\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u016e"+
    "\0\u016e\0\u016e\0\u1aed\0\u1b2a\0\u1b67\0\u016e\0\u1ba4\0\u016e"+
    "\0\u1be1\0\u016e\0\u016e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\4\10"+
    "\1\40\2\10\1\41\3\10\1\42\1\43\1\10\1\44"+
    "\1\10\1\45\1\46\2\10\1\47\1\10\1\50\1\10"+
    "\1\51\5\10\77\0\1\5\73\0\1\5\77\0\1\6"+
    "\1\52\73\0\1\53\74\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\37\10\10\54\1\55\1\0\17\54\1\0"+
    "\43\54\13\0\1\56\75\0\1\57\75\0\1\60\101\0"+
    "\1\61\74\0\1\62\1\0\1\63\72\0\1\64\77\0"+
    "\1\65\75\0\1\66\52\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\1\10\1\67\3\10\1\70\31\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\6\10\1\71"+
    "\30\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\4\10\1\72\4\10\1\73\25\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\4\10\1\74\32\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\1\10\1\75"+
    "\2\10\1\76\4\10\1\77\25\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\5\10\1\100\31\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\4\10\1\101"+
    "\4\10\1\102\25\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\23\10\1\103\13\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\26\10\1\104\10\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\4\10\1\105"+
    "\32\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\32\10\1\106\4\10\13\56\1\107\61\56\4\0\1\10"+
    "\1\0\2\10\16\0\1\10\7\0\2\10\1\110\34\10"+
    "\4\0\1\10\1\0\2\10\16\0\1\10\7\0\14\10"+
    "\1\111\22\10\4\0\1\10\1\0\2\10\16\0\1\10"+
    "\7\0\4\10\1\112\32\10\4\0\1\10\1\0\2\10"+
    "\16\0\1\10\7\0\12\10\1\113\24\10\4\0\1\10"+
    "\1\0\2\10\16\0\1\10\7\0\2\10\1\114\34\10"+
    "\4\0\1\10\1\0\2\10\16\0\1\10\7\0\3\10"+
    "\1\115\33\10\4\0\1\10\1\0\2\10\16\0\1\10"+
    "\7\0\13\10\1\116\23\10\4\0\1\10\1\0\2\10"+
    "\16\0\1\10\7\0\3\10\1\117\12\10\1\120\20\10"+
    "\4\0\1\10\1\0\2\10\16\0\1\10\7\0\23\10"+
    "\1\121\13\10\4\0\1\10\1\0\2\10\16\0\1\10"+
    "\7\0\20\10\1\122\16\10\4\0\1\10\1\0\2\10"+
    "\16\0\1\10\7\0\2\10\1\123\34\10\4\0\1\10"+
    "\1\0\2\10\16\0\1\10\7\0\4\10\1\124\32\10"+
    "\4\0\1\10\1\0\2\10\16\0\1\10\7\0\24\10"+
    "\1\125\12\10\4\0\1\10\1\0\2\10\16\0\1\10"+
    "\7\0\2\10\1\126\34\10\4\0\1\10\1\0\2\10"+
    "\16\0\1\10\7\0\3\10\1\127\33\10\4\0\1\10"+
    "\1\0\2\10\16\0\1\10\7\0\3\10\1\130\10\10"+
    "\1\131\22\10\12\56\1\132\1\107\61\56\4\0\1\10"+
    "\1\0\2\10\16\0\1\10\7\0\3\10\1\133\33\10"+
    "\4\0\1\10\1\0\2\10\16\0\1\10\7\0\1\10"+
    "\1\134\35\10\4\0\1\10\1\0\2\10\16\0\1\10"+
    "\7\0\7\10\1\135\27\10\4\0\1\10\1\0\2\10"+
    "\16\0\1\10\7\0\4\10\1\136\32\10\4\0\1\10"+
    "\1\0\2\10\16\0\1\10\7\0\1\10\1\137\35\10"+
    "\4\0\1\10\1\0\2\10\16\0\1\10\7\0\35\10"+
    "\1\140\1\10\4\0\1\10\1\0\2\10\16\0\1\10"+
    "\7\0\26\10\1\141\10\10\4\0\1\10\1\0\2\10"+
    "\16\0\1\10\7\0\4\10\1\142\32\10\4\0\1\10"+
    "\1\0\2\10\16\0\1\10\7\0\4\10\1\143\32\10"+
    "\4\0\1\10\1\0\2\10\16\0\1\10\7\0\36\10"+
    "\1\144\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\5\10\1\145\31\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\14\10\1\146\22\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\2\10\1\147\34\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\20\10\1\150"+
    "\16\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\13\10\1\151\23\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\1\10\1\152\35\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\4\10\1\153\32\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\4\10\1\154"+
    "\32\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\4\10\1\155\32\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\3\10\1\156\33\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\13\10\1\157\23\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\12\10\1\160"+
    "\24\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\23\10\1\161\13\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\2\10\1\162\34\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\13\10\1\163\23\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\5\10\1\164"+
    "\31\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\3\10\1\165\33\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\11\10\1\166\25\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\11\10\1\167\25\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\20\10\1\170"+
    "\16\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\2\10\1\171\34\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\20\10\1\172\16\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\1\10\1\173\35\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\1\10\1\174"+
    "\35\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\13\10\1\175\23\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\4\10\1\176\32\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\4\10\1\177\32\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\4\10\1\200"+
    "\32\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\3\10\1\201\33\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\30\10\1\202\6\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\20\10\1\203\16\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\23\10\1\204"+
    "\13\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\1\10\1\205\35\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\2\10\1\206\34\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\4\10\1\207\32\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\33\10\1\210"+
    "\3\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\11\10\1\211\25\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\23\10\1\212\13\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\2\10\1\213\34\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\20\10\1\214"+
    "\16\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\1\10\1\215\35\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\4\10\1\216\32\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\5\10\1\217\31\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\11\10\1\220"+
    "\25\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\2\10\1\221\34\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\5\10\1\222\31\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\20\10\1\223\16\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\5\10\1\224"+
    "\31\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\1\10\1\225\35\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\4\10\1\226\32\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\3\10\1\227\33\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\14\10\1\230"+
    "\22\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\20\10\1\231\16\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\20\10\1\232\16\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\34\10\1\233\2\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\2\10\1\234"+
    "\34\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\2\10\1\235\34\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\1\10\1\236\35\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\1\10\1\237\35\10\4\0"+
    "\1\10\1\0\2\10\16\0\1\10\7\0\5\10\1\240"+
    "\31\10\4\0\1\10\1\0\2\10\16\0\1\10\7\0"+
    "\3\10\1\241\33\10\4\0\1\10\1\0\2\10\16\0"+
    "\1\10\7\0\20\10\1\242\16\10\4\0\1\10\1\0"+
    "\2\10\16\0\1\10\7\0\1\10\1\243\35\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7198];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\4\1\1\11\1\1\1\11"+
    "\2\1\3\11\3\1\1\11\2\1\7\11\13\1\1\0"+
    "\1\1\1\0\1\11\1\0\10\11\20\1\1\0\22\1"+
    "\1\11\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();

static LinkedList<Erro_r> listaErrores= new LinkedList();

  public void adderror(int fila, int columna, String valor){
       Erro_r n = new Erro_r(fila,columna,valor,"");
       listaErrores.add(n);
  }

/*public void agregar(String Token,String Lexema,int Fila, int Columna){
  Simbolo simbolo= new Simbolo(Token,Lexema,Fila,Columna);
  TablaSimbolos.add(simbolo);	
}
  

public LinkedList<Simbolo> retornarTablaSimbolos(){
     return AnalizadorLexico.TablaSimbolos;
}

public LinkedList<Erro_r> retornarErrores(){       
	return AnalizadorLexico.listaErrores;
}*/



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AL_CJS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AL_CJS(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return new Symbol(sym.STRING_LITERAL, new token(yycolumn, yyline, yytext()));
          }
        case 53: break;
        case 10: 
          { return new Symbol(sym.POR, new token(yycolumn, yyline, yytext()));
          }
        case 54: break;
        case 49: 
          { return new Symbol(sym.DOCUMENTO, new token(yycolumn, yyline, yytext()));
          }
        case 55: break;
        case 16: 
          { return new Symbol(sym.NOT, new token(yycolumn, yyline, yytext()));
          }
        case 56: break;
        case 40: 
          { return new Symbol(sym.ATEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 57: break;
        case 25: 
          { return new Symbol(sym.ADD, new token(yycolumn, yyline, yytext()));
          }
        case 58: break;
        case 30: 
          { return new Symbol(sym.MAYIQ, new token(yycolumn, yyline, yytext()));
          }
        case 59: break;
        case 5: 
          { return new Symbol(sym.I_D, new token(yycolumn, yyline, yytext()));
          }
        case 60: break;
        case 2: 
          { adderror(yyline,yycolumn,yytext());
          }
        case 61: break;
        case 12: 
          { return new Symbol(sym.MOD, new token(yycolumn, yyline, yytext()));
          }
        case 62: break;
        case 41: 
          { return new Symbol(sym.DETENER, new token(yycolumn, yyline, yytext()));
          }
        case 63: break;
        case 31: 
          { return new Symbol(sym.AND, new token(yycolumn, yyline, yytext()));
          }
        case 64: break;
        case 48: 
          { return new Symbol(sym.RETORNAR, new token(yycolumn, yyline, yytext()));
          }
        case 65: break;
        case 42: 
          { return new Symbol(sym.DEFECTO, new token(yycolumn, yyline, yytext()));
          }
        case 66: break;
        case 20: 
          { return new Symbol(sym.ALLA, new token(yycolumn, yyline, yytext()));
          }
        case 67: break;
        case 50: 
          { return new Symbol(sym.SELECCIONA, new token(yycolumn, yyline, yytext()));
          }
        case 68: break;
        case 3: 
          { /* ignorar */
          }
        case 69: break;
        case 26: 
          { return new Symbol(sym.SUB, new token(yycolumn, yyline, yytext()));
          }
        case 70: break;
        case 45: 
          { return new Symbol(sym.OBTENER, new token(yycolumn, yyline, yytext()));
          }
        case 71: break;
        case 51: 
          { return new Symbol(sym.OBSERVADOR, new token(yycolumn, yyline, yytext()));
          }
        case 72: break;
        case 28: 
          { return new Symbol(sym.IG_IG, new token(yycolumn, yyline, yytext()));
          }
        case 73: break;
        case 1: 
          { return new Symbol(sym.DECIMAL, new token(yycolumn, yyline, yytext()));
          }
        case 74: break;
        case 35: 
          { return new Symbol(sym.CASO, new token(yycolumn, yyline, yytext()));
          }
        case 75: break;
        case 8: 
          { return new Symbol(sym.MAS, new token(yycolumn, yyline, yytext()));
          }
        case 76: break;
        case 15: 
          { return new Symbol(sym.MAYQ, new token(yycolumn, yyline, yytext()));
          }
        case 77: break;
        case 4: 
          { return new Symbol(sym.NUM, new token(yycolumn, yyline, yytext()));
          }
        case 78: break;
        case 43: 
          { return new Symbol(sym.MENSAJE, new token(yycolumn, yyline, yytext()));
          }
        case 79: break;
        case 36: 
          { return new Symbol(sym.SINO, new token(yycolumn, yyline, yytext()));
          }
        case 80: break;
        case 6: 
          { return new Symbol(sym.CPAR, new token(yycolumn, yyline, yytext()));
          }
        case 81: break;
        case 18: 
          { return new Symbol(sym.DSPTS, new token(yycolumn, yyline, yytext()));
          }
        case 82: break;
        case 39: 
          { return new Symbol(sym.CONTEO, new token(yycolumn, yyline, yytext()));
          }
        case 83: break;
        case 14: 
          { return new Symbol(sym.IGUAL, new token(yycolumn, yyline, yytext()));
          }
        case 84: break;
        case 9: 
          { return new Symbol(sym.MENOS, new token(yycolumn, yyline, yytext()));
          }
        case 85: break;
        case 33: 
          { return new Symbol(sym.SI, new token(yycolumn, yyline, yytext()));
          }
        case 86: break;
        case 47: 
          { return new Symbol(sym.IMPRIMIR, new token(yycolumn, yyline, yytext()));
          }
        case 87: break;
        case 52: 
          { return new Symbol(sym.SETELEMENTO, new token(yycolumn, yyline, yytext()));
          }
        case 88: break;
        case 46: 
          { return new Symbol(sym.MIENTRAS, new token(yycolumn, yyline, yytext()));
          }
        case 89: break;
        case 11: 
          { return new Symbol(sym.POT, new token(yycolumn, yyline, yytext()));
          }
        case 90: break;
        case 38: 
          { return new Symbol(sym.PARA, new token(yycolumn, yyline, yytext()));
          }
        case 91: break;
        case 37: 
          { return new Symbol(sym.DIMV, new token(yycolumn, yyline, yytext()));
          }
        case 92: break;
        case 23: 
          { return new Symbol(sym.CCORCH, new token(yycolumn, yyline, yytext()));
          }
        case 93: break;
        case 29: 
          { return new Symbol(sym.DIF, new token(yycolumn, yyline, yytext()));
          }
        case 94: break;
        case 17: 
          { return new Symbol(sym.PYC, new token(yycolumn, yyline, yytext()));
          }
        case 95: break;
        case 19: 
          { return new Symbol(sym.APAR, new token(yycolumn, yyline, yytext()));
          }
        case 96: break;
        case 27: 
          { return new Symbol(sym.MENIQ, new token(yycolumn, yyline, yytext()));
          }
        case 97: break;
        case 7: 
          { return new Symbol(sym.DIV, new token(yycolumn, yyline, yytext()));
          }
        case 98: break;
        case 22: 
          { return new Symbol(sym.ACORCH, new token(yycolumn, yyline, yytext()));
          }
        case 99: break;
        case 44: 
          { return new Symbol(sym.FUNCION, new token(yycolumn, yyline, yytext()));
          }
        case 100: break;
        case 32: 
          { return new Symbol(sym.OR, new token(yycolumn, yyline, yytext()));
          }
        case 101: break;
        case 21: 
          { return new Symbol(sym.CLLA, new token(yycolumn, yyline, yytext()));
          }
        case 102: break;
        case 13: 
          { return new Symbol(sym.MENQ, new token(yycolumn, yyline, yytext()));
          }
        case 103: break;
        case 34: 
          { 
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
