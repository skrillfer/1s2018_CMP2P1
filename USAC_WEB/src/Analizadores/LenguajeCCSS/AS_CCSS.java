
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 09 11:48:32 CST 2018
//----------------------------------------------------

package Analizadores.LenguajeCCSS;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 09 11:48:32 CST 2018
  */
public class AS_CCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_CCSS() {super();}

  /** Constructor which sets the default scanner. */
  public AS_CCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_CCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\002\000\002\002" +
    "\003\000\002\030\004\000\002\030\004\000\002\030\003" +
    "\000\002\030\003\000\002\027\006\000\002\026\002\000" +
    "\002\026\003\000\002\025\004\000\002\025\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\023" +
    "\007\000\002\022\007\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\006" +
    "\007\000\002\007\007\000\002\007\007\000\002\005\005" +
    "\000\002\005\003\000\002\011\007\000\002\012\007\000" +
    "\002\013\007\000\002\014\013\000\002\015\007\000\002" +
    "\016\015\000\002\017\007\000\002\020\007\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\040\002\000\007\014\024\026\025\030\026" +
    "\022\034\012\035\031\036\017\037\042\044\032\045\023" +
    "\046\037\047\013\050\024\051\020\001\002\000\042\002" +
    "\ufff5\007\ufff5\017\ufff5\024\ufff5\025\ufff5\026\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\044\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\001\002\000\042\002\uffec\007\uffec" +
    "\017\uffec\024\uffec\025\uffec\026\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\001\002\000\042\002\uffe9\007\uffe9\017\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\001" +
    "\002\000\042\002\uffe7\007\uffe7\017\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\001\002\000\040" +
    "\002\uffff\007\014\024\026\025\030\026\022\034\012\035" +
    "\031\036\017\037\042\044\032\045\023\046\037\047\013" +
    "\050\024\051\020\001\002\000\042\002\uffe8\007\uffe8\017" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\001\002\000\004\022\204\001\002\000\004\022\200" +
    "\001\002\000\004\016\172\001\002\000\042\002\uffef\007" +
    "\uffef\017\uffef\024\uffef\025\uffef\026\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050" +
    "\uffef\051\uffef\001\002\000\040\002\ufffc\007\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002" +
    "\000\004\022\166\001\002\000\004\014\162\001\002\000" +
    "\004\002\161\001\002\000\004\022\152\001\002\000\004" +
    "\022\140\001\002\000\004\014\134\001\002\000\042\002" +
    "\ufff0\007\ufff0\017\ufff0\024\ufff0\025\ufff0\026\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\001\002\000\004\022\130\001\002" +
    "\000\040\002\ufffb\007\ufffb\024\ufffb\025\ufffb\026\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\001\002\000\004\022\124\001" +
    "\002\000\004\022\120\001\002\000\004\022\114\001\002" +
    "\000\042\002\uffe6\007\uffe6\017\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\001\002\000\042\002" +
    "\uffed\007\uffed\017\uffed\024\uffed\025\uffed\026\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\001\002\000\042\002\uffee\007\uffee" +
    "\017\uffee\024\uffee\025\uffee\026\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\uffee\001\002\000\042\002\uffeb\007\uffeb\017\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\001" +
    "\002\000\004\022\110\001\002\000\042\002\uffea\007\uffea" +
    "\017\uffea\024\uffea\025\uffea\026\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea" +
    "\051\uffea\001\002\000\042\002\ufff3\007\ufff3\017\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\001" +
    "\002\000\004\022\044\001\002\000\042\002\ufff4\007\ufff4" +
    "\017\ufff4\024\ufff4\025\ufff4\026\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\001\002\000\004\023\045\001\002\000\004\016" +
    "\046\001\002\000\044\004\056\005\055\006\047\014\051" +
    "\027\065\030\057\031\067\032\060\033\064\040\052\041" +
    "\062\042\071\043\063\052\061\053\070\054\054\055\066" +
    "\001\002\000\022\010\uffd2\011\uffd2\012\uffd2\013\uffd2\015" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\001\002\000\022\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\015\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\001\002\000\044\004\056\005\055\006\047\014\051" +
    "\027\065\030\057\031\067\032\060\033\064\040\052\041" +
    "\062\042\071\043\063\052\061\053\070\054\054\055\066" +
    "\001\002\000\022\010\uffd0\011\uffd0\012\uffd0\013\uffd0\015" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\001\002\000\014\010\073" +
    "\011\074\012\076\013\075\020\072\001\002\000\022\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\015\uffca\017\uffca\020\uffca" +
    "\021\uffca\001\002\000\022\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\001\002\000\022" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\001\002\000\022\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\001\002\000" +
    "\022\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\001\002\000\022\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\001\002" +
    "\000\022\010\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\001\002\000\022\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\015\uffce\017\uffce\020\uffce\021\uffce\001" +
    "\002\000\022\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\001\002\000\022\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\001\002\000\022\010\uffc9\011\uffc9\012\uffc9\013\uffc9\015" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\001\002\000\022\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\015\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\001\002\000\022\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\015\uffcb\017\uffcb\020\uffcb\021\uffcb\001\002\000\022\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\015\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\001\002\000\044\004\056\005\055\006\047\014" +
    "\051\027\065\030\057\031\067\032\060\033\064\040\052" +
    "\041\062\042\071\043\063\052\061\053\070\054\054\055" +
    "\066\001\002\000\044\004\056\005\055\006\047\014\051" +
    "\027\065\030\057\031\067\032\060\033\064\040\052\041" +
    "\062\042\071\043\063\052\061\053\070\054\054\055\066" +
    "\001\002\000\044\004\056\005\055\006\047\014\051\027" +
    "\065\030\057\031\067\032\060\033\064\040\052\041\062" +
    "\042\071\043\063\052\061\053\070\054\054\055\066\001" +
    "\002\000\044\004\056\005\055\006\047\014\051\027\065" +
    "\030\057\031\067\032\060\033\064\040\052\041\062\042" +
    "\071\043\063\052\061\053\070\054\054\055\066\001\002" +
    "\000\044\004\056\005\055\006\047\014\051\027\065\030" +
    "\057\031\067\032\060\033\064\040\052\041\062\042\071" +
    "\043\063\052\061\053\070\054\054\055\066\001\002\000" +
    "\022\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\001\002\000\022\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\001\002" +
    "\000\022\010\uffd7\011\uffd7\012\076\013\075\015\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\001\002\000\022\010\uffd8\011\uffd8" +
    "\012\076\013\075\015\uffd8\017\uffd8\020\uffd8\021\uffd8\001" +
    "\002\000\014\010\073\011\074\012\076\013\075\017\104" +
    "\001\002\000\004\021\105\001\002\000\042\002\uffdd\007" +
    "\uffdd\017\uffdd\024\uffdd\025\uffdd\026\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\001\002\000\014\010\073\011\074\012\076" +
    "\013\075\015\107\001\002\000\022\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\001\002" +
    "\000\004\023\111\001\002\000\044\004\056\005\055\006" +
    "\047\014\051\027\065\030\057\031\067\032\060\033\064" +
    "\040\052\041\062\042\071\043\063\052\061\053\070\054" +
    "\054\055\066\001\002\000\014\010\073\011\074\012\076" +
    "\013\075\021\113\001\002\000\042\002\uffda\007\uffda\017" +
    "\uffda\024\uffda\025\uffda\026\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051" +
    "\uffda\001\002\000\004\023\115\001\002\000\044\004\056" +
    "\005\055\006\047\014\051\027\065\030\057\031\067\032" +
    "\060\033\064\040\052\041\062\042\071\043\063\052\061" +
    "\053\070\054\054\055\066\001\002\000\014\010\073\011" +
    "\074\012\076\013\075\021\117\001\002\000\042\002\uffdc" +
    "\007\uffdc\017\uffdc\024\uffdc\025\uffdc\026\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\001\002\000\004\023\121\001\002\000" +
    "\044\004\056\005\055\006\047\014\051\027\065\030\057" +
    "\031\067\032\060\033\064\040\052\041\062\042\071\043" +
    "\063\052\061\053\070\054\054\055\066\001\002\000\014" +
    "\010\073\011\074\012\076\013\075\021\123\001\002\000" +
    "\042\002\uffdf\007\uffdf\017\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002\000\004\023\125" +
    "\001\002\000\044\004\056\005\055\006\047\014\051\027" +
    "\065\030\057\031\067\032\060\033\064\040\052\041\062" +
    "\042\071\043\063\052\061\053\070\054\054\055\066\001" +
    "\002\000\014\010\073\011\074\012\076\013\075\021\127" +
    "\001\002\000\042\002\uffe4\007\uffe4\017\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\001\002\000" +
    "\004\023\131\001\002\000\044\004\056\005\055\006\047" +
    "\014\051\027\065\030\057\031\067\032\060\033\064\040" +
    "\052\041\062\042\071\043\063\052\061\053\070\054\054" +
    "\055\066\001\002\000\014\010\073\011\074\012\076\013" +
    "\075\021\133\001\002\000\042\002\uffe5\007\uffe5\017\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\001\002\000\004\007\135\001\002\000\004\015\136\001" +
    "\002\000\004\021\137\001\002\000\042\002\ufff2\007\ufff2" +
    "\017\ufff2\024\ufff2\025\ufff2\026\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\001\002\000\004\023\141\001\002\000\004\016" +
    "\142\001\002\000\044\004\056\005\055\006\047\014\051" +
    "\027\065\030\057\031\067\032\060\033\064\040\052\041" +
    "\062\042\071\043\063\052\061\053\070\054\054\055\066" +
    "\001\002\000\014\010\073\011\074\012\076\013\075\020" +
    "\144\001\002\000\044\004\056\005\055\006\047\014\051" +
    "\027\065\030\057\031\067\032\060\033\064\040\052\041" +
    "\062\042\071\043\063\052\061\053\070\054\054\055\066" +
    "\001\002\000\014\010\073\011\074\012\076\013\075\020" +
    "\146\001\002\000\044\004\056\005\055\006\047\014\051" +
    "\027\065\030\057\031\067\032\060\033\064\040\052\041" +
    "\062\042\071\043\063\052\061\053\070\054\054\055\066" +
    "\001\002\000\014\010\073\011\074\012\076\013\075\017" +
    "\150\001\002\000\004\021\151\001\002\000\042\002\uffdb" +
    "\007\uffdb\017\uffdb\024\uffdb\025\uffdb\026\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\001\002\000\004\023\153\001\002\000" +
    "\044\004\056\005\055\006\047\014\051\027\065\030\057" +
    "\031\067\032\060\033\064\040\052\041\062\042\071\043" +
    "\063\052\061\053\070\054\054\055\066\001\002\000\016" +
    "\010\073\011\074\012\076\013\075\020\uffe1\021\uffe1\001" +
    "\002\000\006\020\156\021\157\001\002\000\044\004\056" +
    "\005\055\006\047\014\051\027\065\030\057\031\067\032" +
    "\060\033\064\040\052\041\062\042\071\043\063\052\061" +
    "\053\070\054\054\055\066\001\002\000\042\002\uffe3\007" +
    "\uffe3\017\uffe3\024\uffe3\025\uffe3\026\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\001\002\000\016\010\073\011\074\012\076" +
    "\013\075\020\uffe2\021\uffe2\001\002\000\004\002\001\001" +
    "\002\000\004\007\163\001\002\000\004\015\164\001\002" +
    "\000\004\021\165\001\002\000\042\002\ufff1\007\ufff1\017" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\001\002\000\004\023\167\001\002\000\044\004\056" +
    "\005\055\006\047\014\051\027\065\030\057\031\067\032" +
    "\060\033\064\040\052\041\062\042\071\043\063\052\061" +
    "\053\070\054\054\055\066\001\002\000\014\010\073\011" +
    "\074\012\076\013\075\021\171\001\002\000\042\002\uffde" +
    "\007\uffde\017\uffde\024\uffde\025\uffde\026\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\001\002\000\036\017\ufff9\024\026\025" +
    "\030\026\022\034\012\035\031\036\017\037\042\044\032" +
    "\045\023\046\037\047\013\050\024\051\020\001\002\000" +
    "\004\017\177\001\002\000\036\017\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\001\002\000\036" +
    "\017\ufff8\024\026\025\030\026\022\034\012\035\031\036" +
    "\017\037\042\044\032\045\023\046\037\047\013\050\024" +
    "\051\020\001\002\000\036\017\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\051\ufff7\001\002\000\040\002" +
    "\ufffa\007\ufffa\024\ufffa\025\ufffa\026\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\001\002\000\004\023\201\001\002\000\044" +
    "\004\056\005\055\006\047\014\051\027\065\030\057\031" +
    "\067\032\060\033\064\040\052\041\062\042\071\043\063" +
    "\052\061\053\070\054\054\055\066\001\002\000\014\010" +
    "\073\011\074\012\076\013\075\021\203\001\002\000\042" +
    "\002\uffd9\007\uffd9\017\uffd9\024\uffd9\025\uffd9\026\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\044\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\001\002\000\004\023\205\001" +
    "\002\000\044\004\056\005\055\006\047\014\051\027\065" +
    "\030\057\031\067\032\060\033\064\040\052\041\062\042" +
    "\071\043\063\052\061\053\070\054\054\055\066\001\002" +
    "\000\014\010\073\011\074\012\076\013\075\021\207\001" +
    "\002\000\042\002\uffe0\007\uffe0\017\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\001\002\000\040" +
    "\002\ufffe\007\ufffe\024\ufffe\025\ufffe\026\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\001\002\000\040\002\ufffd\007\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\046\002\020\006\024\007\014\010\034\011" +
    "\033\012\004\013\035\014\037\015\005\016\010\017\006" +
    "\020\032\021\040\022\042\023\003\024\026\027\015\030" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\006\024\007\014\010" +
    "\034\011\033\012\004\013\035\014\037\015\005\016\010" +
    "\017\006\020\032\021\040\022\042\023\003\024\210\027" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\052\004\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\105\004\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\102\004\047\001\001\000\006\003\101\004\047" +
    "\001\001\000\006\003\100\004\047\001\001\000\006\003" +
    "\077\004\047\001\001\000\006\003\076\004\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\111\004\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\115\004" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\121\004\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\125" +
    "\004\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\131\004\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\142\004\047\001\001\000" +
    "\002\001\001\000\006\003\144\004\047\001\001\000\002" +
    "\001\001\000\006\003\146\004\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\153\004\047\005\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\157\004\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\167\004\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\006\024" +
    "\007\014\010\034\011\033\012\004\013\035\014\037\015" +
    "\005\016\010\017\006\020\032\021\040\022\042\023\003" +
    "\024\173\025\174\026\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\024\007\014\010\034\011\033" +
    "\012\004\013\035\014\037\015\005\016\010\017\006\020" +
    "\032\021\040\022\042\023\003\024\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\201\004\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\205\004\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_CCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_CCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_CCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        //Inicio.reporteError.agregar("Sintactico",s.right+1,s.left+1,"Identificador "+s.value+" no reconocido");
    }
    
    public NodoCSS crearNodo(String nombre,String valor,int linea,int columna){
        NodoCSS nuevo = new NodoCSS(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        if(nuevo.nombre.equals("grupo") || nuevo.nombre.equals("identificador")){
            action_obj.n_r=nuevo;
        }
        return nuevo;
    }
    public NodoCSS getRoot(){
        return action_obj.root;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_CCSS$actions {


    //se declaran variables globales etc.
    public int Index=1;
    public NodoCSS root;
    public NodoCSS n_r=null;
  

  private final AS_CCSS parser;

  /** Constructor */
  CUP$AS_CCSS$actions(AS_CCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_CCSS$do_action(
    int                        CUP$AS_CCSS$act_num,
    java_cup.runtime.lr_parser CUP$AS_CCSS$parser,
    java.util.Stack            CUP$AS_CCSS$stack,
    int                        CUP$AS_CCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_CCSS$result;

      /* select the action based on the action number */
      switch (CUP$AS_CCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // v_att_texto ::= CAPITAL_T 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("capital-t","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // v_att_texto ::= CURSIVA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("cursiva","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // v_att_texto ::= NEGRILLA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("negrilla","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // v_att_texto ::= MINUSCULA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("minuscula","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // v_att_texto ::= MAYUSCULA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("mayuscula","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_a ::= v_att_texto 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS x = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = x; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_a ::= JUSTIFICADO 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("justificado","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_a ::= CENTRADO 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("centrado","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_a ::= DERECHA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("derecha","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_a ::= IZQUIERDA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("izquierda","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_a ::= HORIZONTAL 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("horizontal","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_a ::= VERTICAL 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("vertical","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_a ::= FALSE 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("boolean","false",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_a ::= TRUE 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("boolean","true",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_a ::= STRING_LITERAL 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("string_literal",x.getCadena().substring(1, x.getCadena().length()-1),x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_a ::= DECIMAL 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("number",x.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_a ::= NUM 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("number",x.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_a ::= APAR expr_a CPAR 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		   RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_a ::= expr_a DIV expr_a 
            {
              NodoCSS RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("DIV","",x.getLinea(),x.getColumna()); RESULT.add(h1); RESULT.add(h2); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_a ::= expr_a POR expr_a 
            {
              NodoCSS RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("POR","",x.getLinea(),x.getColumna()); RESULT.add(h1); RESULT.add(h2); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_a ::= expr_a MENOS expr_a 
            {
              NodoCSS RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("MENOS","",x.getLinea(),x.getColumna()); RESULT.add(h1); RESULT.add(h2); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_a ::= expr_a MAS expr_a 
            {
              NodoCSS RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("MAS","",x.getLinea(),x.getColumna()); RESULT.add(h1); RESULT.add(h2); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // att_colortext ::= COLORTEXT DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("colortext","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_colortext",14, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // att_opaque ::= OPAQUE DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("opaque","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_opaque",13, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // att_borde ::= BORDE DSPTS IGUAL ACORCH expr_a COMA expr_a COMA expr_a CCORCH PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-10)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-10)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-6)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h3 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		 RESULT = parser.crearNodo("borde","",x.getLinea(),x.getColumna());  RESULT.add(h1); RESULT.add(h2); RESULT.add(h3); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_borde",12, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-10)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // att_visible ::= VISIBLE DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("visible","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_visible",11, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // att_autoredimension ::= AUTOREDIMENSION DSPTS IGUAL ACORCH expr_a COMA expr_a CCORCH PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-8)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-8)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		 RESULT = parser.crearNodo("autoredimension","",x.getLinea(),x.getColumna());  RESULT.add(h1); RESULT.add(h2);  
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_autoredimension",10, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-8)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // att_fondoelemento ::= FONDOELEMENTO DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("fondoelemento","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_fondoelemento",9, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // att_tamtext ::= TAMTEXT DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("tamtex","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_tamtext",8, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // att_letra ::= LETRA DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("letra","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_letra",7, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list_att_texto ::= expr_a 
            {
              NodoCSS RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("valores","",0,0);
                        RESULT.add(h);
                  
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("list_att_texto",3, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_att_texto ::= list_att_texto COMA expr_a 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                        r.add(h);
                        RESULT=r;
                  
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("list_att_texto",3, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // att_texto ::= FORMATO DSPTS IGUAL list_att_texto PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("formato","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_texto",5, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // att_texto ::= TEXTO DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("texto","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_texto",5, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // att_alineado ::= ALINEADO DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("alineado","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_alineado",4, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_atributos ::= att_colortext 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_atributos ::= att_opaque 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_atributos ::= att_borde 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_atributos ::= att_visible 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_atributos ::= att_autoredimension 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_atributos ::= att_fondoelemento 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_atributos ::= att_tamtext 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_atributos ::= att_letra 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_atributos ::= att_formato 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_atributos ::= att_texto 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_atributos ::= att_alineado 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // identificador ::= ID APAR I_D CPAR PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		   RESULT = parser.crearNodo("identificador",y.getCadena(),x.getLinea(),x.getColumna()); 
                                                
                                           
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("identificador",16, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // grupo ::= GRUPO APAR I_D CPAR PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		   RESULT = parser.crearNodo("grupo",y.getCadena(),x.getLinea(),x.getColumna()); 
                                                
                                           
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("grupo",17, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenido ::= lista_atributos 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		  
                                        if(n_r!=null){
                                            n_r.add(r);
                                            RESULT= parser.crearNodo("##no","",0,0);
                                        }else{
                                            RESULT =r; 
                                        }
                                        
                                   
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenido ::= identificador 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		  RESULT =r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido ::= grupo 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		  RESULT =r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_cont ::= contenido 
            {
              NodoCSS RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                RESULT = parser.crearNodo("contenido","",0,0);
                if(!h.nombre.equals("##no")){
                    RESULT.add(h);    
                }
              
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_cont",19, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_cont ::= lista_cont contenido 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                if(!h.nombre.equals("##no")){
                    r.add(h);
                }
                RESULT=r;
              
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_cont",19, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cont_bloque ::= lista_cont 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                        RESULT=r;
                
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("cont_bloque",20, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cont_bloque ::= 
            {
              NodoCSS RESULT =null;
		 RESULT = parser.crearNodo("contenido","",0,0); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("cont_bloque",20, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloque ::= I_D ACORCH cont_bloque CCORCH 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		
                RESULT = parser.crearNodo("bloque",x.getCadena(),x.getLinea(),x.getColumna());
                RESULT.hijos=h.hijos;
         
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("bloque",21, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_bloques ::= contenido 
            {
              NodoCSS RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("ccss","",0,0);
                    if(!h.nombre.equals("##no")){
                        RESULT.add(h);    
                    }
               
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_bloques",22, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_bloques ::= bloque 
            {
              NodoCSS RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("ccss","",0,0);
                    RESULT.add(h);
                    n_r=null;
                
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_bloques",22, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_bloques ::= lista_bloques contenido 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                    if(!h.nombre.equals("##no")){
                        r.add(h);
                    }
                    RESULT=r;
               
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_bloques",22, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_bloques ::= lista_bloques bloque 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                    r.add(h);
                    RESULT=r;
                    n_r=null;
                
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_bloques",22, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= lista_bloques 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                    root=r;
            
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= 
            {
              NodoCSS RESULT =null;
		 root= parser.crearNodo("ccss","",0,0); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS start_val = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		RESULT = start_val;
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_CCSS$parser.done_parsing();
          return CUP$AS_CCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

