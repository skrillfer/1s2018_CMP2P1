
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 01 01:17:15 CST 2018
//----------------------------------------------------

package Analizadores.LenguajeCCSS;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 01 01:17:15 CST 2018
  */
public class AS_CCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_CCSS() {super();}

  /** Constructor which sets the default scanner. */
  public AS_CCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_CCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\002\000\002\002" +
    "\003\000\002\030\004\000\002\030\003\000\002\027\006" +
    "\000\002\026\002\000\002\026\003\000\002\025\004\000" +
    "\002\025\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\023\007\000\002\022\007\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\006\007\000\002\007\007\000\002\007" +
    "\007\000\002\005\005\000\002\005\003\000\002\011\007" +
    "\000\002\012\007\000\002\013\007\000\002\014\013\000" +
    "\002\015\007\000\002\016\015\000\002\017\006\000\002" +
    "\020\006\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\002\000\007\006\001\002\000\006\002" +
    "\uffff\007\006\001\002\000\004\002\204\001\002\000\004" +
    "\016\010\001\002\000\006\002\ufffd\007\ufffd\001\002\000" +
    "\036\017\ufffb\024\027\025\032\026\024\034\017\035\034" +
    "\036\022\037\045\044\036\045\025\046\041\047\020\050" +
    "\026\051\023\001\002\000\004\017\203\001\002\000\036" +
    "\017\ufff7\024\ufff7\025\ufff7\026\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\001\002\000\036\017\uffee\024\uffee\025\uffee\026" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\044\uffee\045\uffee" +
    "\046\uffee\047\uffee\050\uffee\051\uffee\001\002\000\036\017" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\001\002\000\036\017\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\001\002\000\036\017\uffea" +
    "\024\uffea\025\uffea\026\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\001\002\000\004\022\177\001\002\000\004\022\174\001" +
    "\002\000\036\017\ufff1\024\ufff1\025\ufff1\026\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\001\002\000\004\022\170\001\002" +
    "\000\004\014\164\001\002\000\004\022\155\001\002\000" +
    "\004\022\143\001\002\000\004\014\137\001\002\000\004" +
    "\022\133\001\002\000\036\017\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\051\ufff2\001\002\000\036\017" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\001\002\000\004\022\127\001\002\000\036\017\ufffa" +
    "\024\027\025\032\026\024\034\017\035\034\036\022\037" +
    "\045\044\036\045\025\046\041\047\020\050\026\051\023" +
    "\001\002\000\004\022\122\001\002\000\036\017\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\001" +
    "\002\000\004\022\116\001\002\000\036\017\uffef\024\uffef" +
    "\025\uffef\026\uffef\034\uffef\035\uffef\036\uffef\037\uffef\044" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\001\002" +
    "\000\036\017\ufff0\024\ufff0\025\ufff0\026\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\001\002\000\004\022\113\001\002\000" +
    "\036\017\uffed\024\uffed\025\uffed\026\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\001\002\000\036\017\uffec\024\uffec\025\uffec" +
    "\026\uffec\034\uffec\035\uffec\036\uffec\037\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\001\002\000\036" +
    "\017\ufff5\024\ufff5\025\ufff5\026\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\001\002\000\004\022\047\001\002\000\036\017" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\001\002\000\004\023\050\001\002\000\004\016\051" +
    "\001\002\000\044\004\061\005\060\006\052\014\054\027" +
    "\070\030\062\031\072\032\063\033\067\040\055\041\065" +
    "\042\074\043\066\052\064\053\073\054\057\055\071\001" +
    "\002\000\054\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\024\uffd4\025\uffd4\026\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\001\002\000\054\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\015\uffca\017\uffca\020\uffca\021\uffca" +
    "\024\uffca\025\uffca\026\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\001\002\000\044\004\061\005\060\006\052\014\054\027" +
    "\070\030\062\031\072\032\063\033\067\040\055\041\065" +
    "\042\074\043\066\052\064\053\073\054\057\055\071\001" +
    "\002\000\054\010\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\024\uffd2\025\uffd2\026\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\001\002\000\014\010\076\011" +
    "\077\012\101\013\100\020\075\001\002\000\054\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\015\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\001\002\000\054\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\015\uffd5\017\uffd5\020\uffd5\021\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\001\002\000\054\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\024\uffd3\025\uffd3\026\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\001\002\000\054\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\001\002\000\054" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\024\uffc7\025\uffc7\026\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\001\002\000\054\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\015\uffce\017\uffce\020\uffce\021\uffce\024\uffce\025" +
    "\uffce\026\uffce\034\uffce\035\uffce\036\uffce\037\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\001\002\000" +
    "\054\010\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\024\uffd1\025\uffd1\026\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\001\002\000\054\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002" +
    "\000\054\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\024\uffc6\025\uffc6\026\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\001\002\000\054\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\001" +
    "\002\000\054\010\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\024\uffcb\025\uffcb\026\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\001\002\000\054\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\001\002\000\054\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000\054\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\015\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\001\002\000\044\004\061\005\060\006\052\014\054" +
    "\027\070\030\062\031\072\032\063\033\067\040\055\041" +
    "\065\042\074\043\066\052\064\053\073\054\057\055\071" +
    "\001\002\000\044\004\061\005\060\006\052\014\054\027" +
    "\070\030\062\031\072\032\063\033\067\040\055\041\065" +
    "\042\074\043\066\052\064\053\073\054\057\055\071\001" +
    "\002\000\044\004\061\005\060\006\052\014\054\027\070" +
    "\030\062\031\072\032\063\033\067\040\055\041\065\042" +
    "\074\043\066\052\064\053\073\054\057\055\071\001\002" +
    "\000\044\004\061\005\060\006\052\014\054\027\070\030" +
    "\062\031\072\032\063\033\067\040\055\041\065\042\074" +
    "\043\066\052\064\053\073\054\057\055\071\001\002\000" +
    "\044\004\061\005\060\006\052\014\054\027\070\030\062" +
    "\031\072\032\063\033\067\040\055\041\065\042\074\043" +
    "\066\052\064\053\073\054\057\055\071\001\002\000\054" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\024\uffd8\025\uffd8\026\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\001\002\000\054\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002\000" +
    "\054\010\uffd9\011\uffd9\012\101\013\100\015\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\001\002\000\054\010\uffda\011\uffda\012" +
    "\101\013\100\015\uffda\017\uffda\020\uffda\021\uffda\024\uffda" +
    "\025\uffda\026\uffda\034\uffda\035\uffda\036\uffda\037\uffda\044" +
    "\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\001\002" +
    "\000\014\010\076\011\077\012\101\013\100\017\107\001" +
    "\002\000\004\021\110\001\002\000\036\017\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002" +
    "\000\014\010\076\011\077\012\101\013\100\015\112\001" +
    "\002\000\054\010\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\024\uffd6\025\uffd6\026\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\001\002\000\004\023\114\001" +
    "\002\000\044\004\061\005\060\006\052\014\054\027\070" +
    "\030\062\031\072\032\063\033\067\040\055\041\065\042" +
    "\074\043\066\052\064\053\073\054\057\055\071\001\002" +
    "\000\046\010\076\011\077\012\101\013\100\017\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\001" +
    "\002\000\004\023\117\001\002\000\044\004\061\005\060" +
    "\006\052\014\054\027\070\030\062\031\072\032\063\033" +
    "\067\040\055\041\065\042\074\043\066\052\064\053\073" +
    "\054\057\055\071\001\002\000\014\010\076\011\077\012" +
    "\101\013\100\021\121\001\002\000\036\017\uffde\024\uffde" +
    "\025\uffde\026\uffde\034\uffde\035\uffde\036\uffde\037\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\001\002" +
    "\000\004\023\123\001\002\000\044\004\061\005\060\006" +
    "\052\014\054\027\070\030\062\031\072\032\063\033\067" +
    "\040\055\041\065\042\074\043\066\052\064\053\073\054" +
    "\057\055\071\001\002\000\014\010\076\011\077\012\101" +
    "\013\100\021\125\001\002\000\036\017\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\001\002\000" +
    "\036\017\ufff9\024\ufff9\025\ufff9\026\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\001\002\000\004\023\130\001\002\000\044" +
    "\004\061\005\060\006\052\014\054\027\070\030\062\031" +
    "\072\032\063\033\067\040\055\041\065\042\074\043\066" +
    "\052\064\053\073\054\057\055\071\001\002\000\014\010" +
    "\076\011\077\012\101\013\100\021\132\001\002\000\036" +
    "\017\uffe6\024\uffe6\025\uffe6\026\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\001\002\000\004\023\134\001\002\000\044\004" +
    "\061\005\060\006\052\014\054\027\070\030\062\031\072" +
    "\032\063\033\067\040\055\041\065\042\074\043\066\052" +
    "\064\053\073\054\057\055\071\001\002\000\014\010\076" +
    "\011\077\012\101\013\100\021\136\001\002\000\036\017" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\001\002\000\004\007\140\001\002\000\004\015\141" +
    "\001\002\000\004\021\142\001\002\000\036\017\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\001" +
    "\002\000\004\023\144\001\002\000\004\016\145\001\002" +
    "\000\044\004\061\005\060\006\052\014\054\027\070\030" +
    "\062\031\072\032\063\033\067\040\055\041\065\042\074" +
    "\043\066\052\064\053\073\054\057\055\071\001\002\000" +
    "\014\010\076\011\077\012\101\013\100\020\147\001\002" +
    "\000\044\004\061\005\060\006\052\014\054\027\070\030" +
    "\062\031\072\032\063\033\067\040\055\041\065\042\074" +
    "\043\066\052\064\053\073\054\057\055\071\001\002\000" +
    "\014\010\076\011\077\012\101\013\100\020\151\001\002" +
    "\000\044\004\061\005\060\006\052\014\054\027\070\030" +
    "\062\031\072\032\063\033\067\040\055\041\065\042\074" +
    "\043\066\052\064\053\073\054\057\055\071\001\002\000" +
    "\014\010\076\011\077\012\101\013\100\017\153\001\002" +
    "\000\004\021\154\001\002\000\036\017\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\001\002\000" +
    "\004\023\156\001\002\000\044\004\061\005\060\006\052" +
    "\014\054\027\070\030\062\031\072\032\063\033\067\040" +
    "\055\041\065\042\074\043\066\052\064\053\073\054\057" +
    "\055\071\001\002\000\016\010\076\011\077\012\101\013" +
    "\100\020\uffe3\021\uffe3\001\002\000\006\020\161\021\162" +
    "\001\002\000\044\004\061\005\060\006\052\014\054\027" +
    "\070\030\062\031\072\032\063\033\067\040\055\041\065" +
    "\042\074\043\066\052\064\053\073\054\057\055\071\001" +
    "\002\000\036\017\uffe5\024\uffe5\025\uffe5\026\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\001\002\000\016\010\076\011\077" +
    "\012\101\013\100\020\uffe4\021\uffe4\001\002\000\004\007" +
    "\165\001\002\000\004\015\166\001\002\000\004\021\167" +
    "\001\002\000\036\017\ufff3\024\ufff3\025\ufff3\026\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\001\002\000\004\023\171\001" +
    "\002\000\044\004\061\005\060\006\052\014\054\027\070" +
    "\030\062\031\072\032\063\033\067\040\055\041\065\042" +
    "\074\043\066\052\064\053\073\054\057\055\071\001\002" +
    "\000\014\010\076\011\077\012\101\013\100\021\173\001" +
    "\002\000\036\017\uffe0\024\uffe0\025\uffe0\026\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\001\002\000\004\023\175\001\002" +
    "\000\044\004\061\005\060\006\052\014\054\027\070\030" +
    "\062\031\072\032\063\033\067\040\055\041\065\042\074" +
    "\043\066\052\064\053\073\054\057\055\071\001\002\000" +
    "\046\010\076\011\077\012\101\013\100\017\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\001\002" +
    "\000\004\023\200\001\002\000\044\004\061\005\060\006" +
    "\052\014\054\027\070\030\062\031\072\032\063\033\067" +
    "\040\055\041\065\042\074\043\066\052\064\053\073\054" +
    "\057\055\071\001\002\000\014\010\076\011\077\012\101" +
    "\013\100\021\202\001\002\000\036\017\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\001\002\000" +
    "\006\002\ufffc\007\ufffc\001\002\000\004\002\001\001\002" +
    "\000\006\002\ufffe\007\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\010\002\004\027\006\030\003\001\001\000" +
    "\004\027\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\027\007\020\010\037\011" +
    "\036\012\012\013\041\014\042\015\013\016\015\017\014" +
    "\020\034\021\043\022\045\023\011\024\030\025\032\026" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\006" +
    "\027\007\020\010\037\011\036\012\012\013\041\014\042" +
    "\015\013\016\015\017\014\020\034\021\043\022\045\023" +
    "\011\024\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\055\004\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\110\004" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\105\004\052\001\001\000\006\003" +
    "\104\004\052\001\001\000\006\003\103\004\052\001\001" +
    "\000\006\003\102\004\052\001\001\000\006\003\101\004" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\114\004\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\117\004\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\123\004\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\130\004\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\134\004\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\145\004\052" +
    "\001\001\000\002\001\001\000\006\003\147\004\052\001" +
    "\001\000\002\001\001\000\006\003\151\004\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\156\004\052\005\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\162\004" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\171\004\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\175\004\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\200\004\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_CCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_CCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_CCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        //Inicio.reporteError.agregar("Sintactico",s.right+1,s.left+1,"Identificador "+s.value+" no reconocido");
    }
    
    public NodoCSS crearNodo(String nombre,String valor,int linea,int columna){
        NodoCSS nuevo = new NodoCSS(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        if(nuevo.nombre.equals("grupo") || nuevo.nombre.equals("identificador")){
            action_obj.n_r=nuevo;
        }
        return nuevo;
    }
    public NodoCSS getRoot(){
        return action_obj.root;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_CCSS$actions {


    //se declaran variables globales etc.
    public int Index=1;
    public NodoCSS root;
    public NodoCSS n_r=null;
  

  private final AS_CCSS parser;

  /** Constructor */
  CUP$AS_CCSS$actions(AS_CCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_CCSS$do_action(
    int                        CUP$AS_CCSS$act_num,
    java_cup.runtime.lr_parser CUP$AS_CCSS$parser,
    java.util.Stack            CUP$AS_CCSS$stack,
    int                        CUP$AS_CCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_CCSS$result;

      /* select the action based on the action number */
      switch (CUP$AS_CCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // v_att_texto ::= CAPITAL_T 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("capital-t","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // v_att_texto ::= CURSIVA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("cursiva","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // v_att_texto ::= NEGRILLA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("negrilla","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // v_att_texto ::= MINUSCULA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("minuscula","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // v_att_texto ::= MAYUSCULA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("mayuscula","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("v_att_texto",2, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_a ::= v_att_texto 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS x = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = x; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_a ::= JUSTIFICADO 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("justificado","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_a ::= CENTRADO 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("centrado","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_a ::= DERECHA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("derecha","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_a ::= IZQUIERDA 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("izquierda","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_a ::= HORIZONTAL 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("horizontal","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_a ::= VERTICAL 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("vertical","",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_a ::= FALSE 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("boolean","false",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_a ::= TRUE 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("boolean","true",x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_a ::= STRING_LITERAL 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("string_literal",x.getCadena().substring(1, x.getCadena().length()-1),x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_a ::= DECIMAL 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("number",x.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_a ::= NUM 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("number",x.getCadena(),x.getLinea(),x.getColumna()); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_a ::= APAR expr_a CPAR 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		   RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_a ::= expr_a DIV expr_a 
            {
              NodoCSS RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("DIV","",x.getLinea(),x.getColumna()); RESULT.add(h1); RESULT.add(h2); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_a ::= expr_a POR expr_a 
            {
              NodoCSS RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("POR","",x.getLinea(),x.getColumna()); RESULT.add(h1); RESULT.add(h2); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_a ::= expr_a MENOS expr_a 
            {
              NodoCSS RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("MENOS","",x.getLinea(),x.getColumna()); RESULT.add(h1); RESULT.add(h2); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_a ::= expr_a MAS expr_a 
            {
              NodoCSS RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		   RESULT = parser.crearNodo("MAS","",x.getLinea(),x.getColumna()); RESULT.add(h1); RESULT.add(h2); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("expr_a",1, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // att_colortext ::= COLORTEXT DSPTS IGUAL expr_a 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("colortext","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_colortext",14, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // att_opaque ::= OPAQUE DSPTS IGUAL expr_a 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = parser.crearNodo("opaque","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_opaque",13, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // att_borde ::= BORDE DSPTS IGUAL ACORCH expr_a COMA expr_a COMA expr_a CCORCH PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-10)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-10)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-10)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-6)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h3 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		 RESULT = parser.crearNodo("borde","",x.getLinea(),x.getColumna());  RESULT.add(h1); RESULT.add(h2); RESULT.add(h3); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_borde",12, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-10)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // att_visible ::= VISIBLE DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("visible","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_visible",11, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // att_autoredimension ::= AUTOREDIMENSION DSPTS IGUAL ACORCH expr_a COMA expr_a CCORCH PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-8)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-8)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS h2 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		 RESULT = parser.crearNodo("autoredimension","",x.getLinea(),x.getColumna());  RESULT.add(h1); RESULT.add(h2);  
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_autoredimension",10, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-8)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // att_fondoelemento ::= FONDOELEMENTO DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("fondoelemento","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_fondoelemento",9, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // att_tamtext ::= TAMTEXT DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("tamtex","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_tamtext",8, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // att_letra ::= LETRA DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("letra","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_letra",7, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list_att_texto ::= expr_a 
            {
              NodoCSS RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                        RESULT = parser.crearNodo("valores","",0,0);
                        RESULT.add(h);
                  
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("list_att_texto",3, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list_att_texto ::= list_att_texto COMA expr_a 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                        r.add(h);
                        RESULT=r;
                  
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("list_att_texto",3, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // att_texto ::= FORMATO DSPTS IGUAL list_att_texto PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("formato","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_texto",5, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // att_texto ::= TEXTO DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("texto","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_texto",5, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // att_alineado ::= ALINEADO DSPTS IGUAL expr_a PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h1 = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		 RESULT = parser.crearNodo("alineado","",x.getLinea(),x.getColumna());  RESULT.add(h1); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("att_alineado",4, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_atributos ::= att_colortext 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_atributos ::= att_opaque 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_atributos ::= att_borde 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_atributos ::= att_visible 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_atributos ::= att_autoredimension 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_atributos ::= att_fondoelemento 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_atributos ::= att_tamtext 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_atributos ::= att_letra 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_atributos ::= att_formato 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_atributos ::= att_texto 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_atributos ::= att_alineado 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		 RESULT = r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_atributos",15, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identificador ::= ID APAR I_D CPAR PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		   RESULT = parser.crearNodo("identificador",y.getCadena(),x.getLinea(),x.getColumna()); 
                                                
                                           
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("identificador",16, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // grupo ::= GRUPO APAR I_D CPAR PYC 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-2)).value;
		   RESULT = parser.crearNodo("grupo",y.getCadena(),x.getLinea(),x.getColumna()); 
                                                
                                           
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("grupo",17, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido ::= lista_atributos 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		  
                                        if(n_r!=null){
                                            n_r.add(r);
                                            RESULT= parser.crearNodo("##no","",0,0);
                                        }else{
                                            RESULT =r; 
                                        }
                                        
                                   
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenido ::= identificador 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		  RESULT =r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenido ::= grupo 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		  RESULT =r; 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("contenido",18, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_cont ::= contenido 
            {
              NodoCSS RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                RESULT = parser.crearNodo("contenido","",0,0);
                if(!h.nombre.equals("##no")){
                    RESULT.add(h);    
                }
                
              
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_cont",19, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_cont ::= lista_cont contenido 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                if(!h.nombre.equals("##no")){
                    r.add(h);
                }
                RESULT=r;
              
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_cont",19, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cont_bloque ::= lista_cont 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                        RESULT=r;
                
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("cont_bloque",20, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cont_bloque ::= 
            {
              NodoCSS RESULT =null;
		 RESULT = parser.crearNodo("contenido","",0,0); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("cont_bloque",20, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque ::= I_D ACORCH cont_bloque CCORCH 
            {
              NodoCSS RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		
                RESULT = parser.crearNodo("bloque",x.getCadena(),x.getLinea(),x.getColumna());
                RESULT.hijos=h.hijos;
         
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("bloque",21, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_bloques ::= bloque 
            {
              NodoCSS RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                    RESULT = parser.crearNodo("ccss","",0,0);
                    RESULT.add(h);
                
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_bloques",22, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_bloques ::= lista_bloques bloque 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS h = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                    r.add(h);
                    RESULT=r;
                
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("lista_bloques",22, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= lista_bloques 
            {
              NodoCSS RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()).right;
		NodoCSS r = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.peek()).value;
		
                    root=r;
            
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= 
            {
              NodoCSS RESULT =null;
		 root= parser.crearNodo("ccss","",0,0); 
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          return CUP$AS_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).right;
		NodoCSS start_val = (NodoCSS)((java_cup.runtime.Symbol) CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)).value;
		RESULT = start_val;
              CUP$AS_CCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.elementAt(CUP$AS_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$AS_CCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_CCSS$parser.done_parsing();
          return CUP$AS_CCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

