/* The following code was generated by JFlex 1.4.3 on 7/03/18 05:22 PM */


package Analizadores.LenguajeCHTML;
import Estructuras.*;
import java.util.LinkedList;
import java_cup.runtime.*;

import Errores.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/03/18 05:22 PM from the specification file
 * <tt>src/Analizadores/LenguajeCHTML/Lex_HTML.flex</tt>
 */
public class AL_HTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\0"+
    "\1\10\1\0\1\6\5\0\1\16\1\15\1\0\1\13\1\5\1\12"+
    "\12\4\1\0\1\17\1\11\1\20\1\14\2\0\1\32\1\50\1\33"+
    "\1\26\1\43\1\23\1\40\1\42\1\35\1\51\1\36\1\34\1\47"+
    "\1\25\1\24\1\41\1\46\1\27\1\44\1\31\1\30\1\37\1\6"+
    "\1\52\1\6\1\45\4\0\1\53\1\0\1\32\1\50\1\33\1\26"+
    "\1\43\1\23\1\40\1\42\1\35\1\51\1\36\1\34\1\47\1\25"+
    "\1\24\1\41\1\46\1\27\1\44\1\31\1\30\1\37\1\6\1\52"+
    "\1\6\1\45\1\21\1\7\1\22\1\0\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0"+
    "\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6"+
    "\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6"+
    "\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6"+
    "\4\0\13\7\5\0\53\6\25\7\12\4\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\4\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\131\6\13\7\1\6\16\0\12\4\41\6\11\7\2\6\4\0"+
    "\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7"+
    "\22\0\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0"+
    "\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0"+
    "\12\4\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\4\4\6\7\0\1\6"+
    "\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6"+
    "\7\0\12\4\2\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\4\1\0\1\6\17\0\3\7\1\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\4\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7"+
    "\16\0\12\4\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7"+
    "\2\0\12\4\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0"+
    "\12\4\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0"+
    "\1\7\10\0\2\6\2\7\2\0\12\4\12\0\6\6\2\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\4"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\4\2\0\4\6"+
    "\40\0\1\6\27\0\2\7\6\0\12\4\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0"+
    "\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7"+
    "\1\6\12\4\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\15\6\14\7\1\6\1\7\12\4\4\7\2\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\4\41\0\3\7\2\0\12\4\6\0\130\6\10\0\51\6"+
    "\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\4\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6"+
    "\2\7\6\0\12\4\46\0\27\6\5\7\4\0\65\6\12\7\1\0"+
    "\35\7\2\0\1\7\12\4\6\0\12\4\15\0\1\6\130\0\5\7"+
    "\57\6\21\7\7\6\4\0\12\4\21\0\11\7\14\0\3\7\36\6"+
    "\15\7\2\6\12\4\54\6\16\7\14\0\44\6\24\7\10\0\12\4"+
    "\3\0\3\6\12\4\44\6\122\0\3\7\1\0\25\7\4\6\1\7"+
    "\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0"+
    "\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0"+
    "\1\6\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0"+
    "\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0"+
    "\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0"+
    "\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0"+
    "\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7"+
    "\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0"+
    "\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0"+
    "\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0"+
    "\20\6\12\4\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6"+
    "\7\0\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6"+
    "\1\0\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6"+
    "\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6"+
    "\21\7\13\0\12\4\6\0\22\7\6\6\3\0\1\6\4\0\12\4"+
    "\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6"+
    "\16\7\16\0\1\6\12\4\46\0\51\6\16\7\11\0\3\6\1\7"+
    "\10\6\2\7\2\0\12\4\6\0\27\6\3\0\1\6\1\7\4\0"+
    "\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7"+
    "\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0"+
    "\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0"+
    "\43\6\10\7\1\0\2\7\2\0\12\4\6\0\u2ba4\6\14\0\27\6"+
    "\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7"+
    "\4\0\1\6\13\0\12\4\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\7\1\0\1\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\1\4\1\2\1\5\2\2\1\6"+
    "\1\7\1\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\16\5\1\0\1\1\1\0\1\16\12\0\1\17\1\0"+
    "\1\20\1\0\1\21\11\5\1\22\4\5\1\23\1\24"+
    "\11\5\1\25\6\0\1\26\3\0\1\27\7\0\1\30"+
    "\1\20\30\5\13\0\1\31\7\0\1\5\1\0\3\5"+
    "\1\32\3\5\1\33\1\5\1\34\1\35\13\5\11\0"+
    "\1\36\1\37\10\0\1\40\11\0\1\41\2\5\1\42"+
    "\1\43\1\44\2\5\1\45\3\5\1\46\1\47\1\50"+
    "\3\5\1\51\7\0\1\52\1\0\1\53\1\0\1\54"+
    "\4\0\1\55\4\0\1\56\20\0\1\57\6\5\1\60"+
    "\1\61\1\0\1\5\13\0\1\62\1\63\1\0\1\64"+
    "\1\0\1\65\1\66\1\0\1\67\10\0\1\70\2\0"+
    "\1\71\6\0\1\72\1\73\4\5\1\0\1\74\5\0"+
    "\1\75\2\0\1\76\2\0\1\77\3\0\1\100\10\0"+
    "\1\101\5\0\1\102\1\5\1\103\1\5\1\0\1\104"+
    "\21\0\1\105\1\0\1\106\5\0\1\5\1\107\4\0"+
    "\1\110\6\0\1\111\1\0\1\112\1\0\1\113\4\0"+
    "\1\114\2\0\1\115\1\116\1\117\1\120\1\121\1\0"+
    "\1\122\1\123\1\0\1\124\1\0\1\125\1\126\1\127"+
    "\1\0\1\130\1\0\1\131\1\132\1\0\1\133\1\0"+
    "\1\134\1\135\1\0\1\136\5\0\1\137\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\54\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\54\0\54\0\54"+
    "\0\54\0\54\0\54\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0"+
    "\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420"+
    "\0\u044c\0\334\0\334\0\u0134\0\54\0\u0478\0\u04a4\0\u04d0"+
    "\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u01b8\0\u01e4\0\54\0\u0688\0\u06b4\0\u06e0\0\u070c"+
    "\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0108\0\u0814\0\u0840"+
    "\0\u086c\0\u0898\0\u0108\0\u0108\0\u08c4\0\u08f0\0\u091c\0\u0948"+
    "\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8"+
    "\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\54\0\u0b84\0\u0bb0\0\u0bdc"+
    "\0\54\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10"+
    "\0\54\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44"+
    "\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104"+
    "\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264"+
    "\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\54\0\u136c\0\u1398"+
    "\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8"+
    "\0\u1524\0\u1550\0\u0108\0\u157c\0\u15a8\0\u15d4\0\u0108\0\u1600"+
    "\0\u162c\0\u0108\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734"+
    "\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894"+
    "\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\54"+
    "\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28"+
    "\0\u0108\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c"+
    "\0\u1c88\0\u1cb4\0\u0108\0\u1ce0\0\u1d0c\0\u0108\0\u1d38\0\u0108"+
    "\0\u1d64\0\u1d90\0\u0108\0\u1dbc\0\u1de8\0\u1e14\0\u0108\0\u0108"+
    "\0\u0108\0\u1e40\0\u1e6c\0\u1e98\0\u0108\0\u1ec4\0\u1ef0\0\u1f1c"+
    "\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\54\0\u1ff8\0\54\0\u2024"+
    "\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u2100\0\54\0\u212c\0\u2158"+
    "\0\u2184\0\u21b0\0\54\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c"+
    "\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec"+
    "\0\u2418\0\u2444\0\u2470\0\u0108\0\u249c\0\u24c8\0\u24f4\0\u2520"+
    "\0\u254c\0\u2578\0\u0108\0\u0108\0\u25a4\0\u25d0\0\u25fc\0\u2628"+
    "\0\u2654\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788"+
    "\0\u27b4\0\54\0\54\0\u27e0\0\54\0\u280c\0\54\0\54"+
    "\0\u2838\0\54\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940"+
    "\0\u296c\0\u2998\0\54\0\u29c4\0\u29f0\0\54\0\u2a1c\0\u2a48"+
    "\0\u2a74\0\u2aa0\0\u2acc\0\u2af8\0\u0108\0\u0108\0\u2b24\0\u2b50"+
    "\0\u2b7c\0\u2ba8\0\u2bd4\0\u0108\0\u2c00\0\u2c2c\0\u2c58\0\u2c84"+
    "\0\u2cb0\0\54\0\u2cdc\0\u2d08\0\54\0\u2d34\0\u2d60\0\54"+
    "\0\u2d8c\0\u2db8\0\u2de4\0\54\0\u2e10\0\u2e3c\0\u2e68\0\u2e94"+
    "\0\u2ec0\0\u2eec\0\u2f18\0\u2f44\0\54\0\u2f70\0\u2f9c\0\u2fc8"+
    "\0\u2ff4\0\u3020\0\u0108\0\u304c\0\u0108\0\u3078\0\u30a4\0\54"+
    "\0\u30d0\0\u30fc\0\u3128\0\u3154\0\u3180\0\u31ac\0\u31d8\0\u3204"+
    "\0\u3230\0\u325c\0\u3288\0\u32b4\0\u32e0\0\u330c\0\u3338\0\u3364"+
    "\0\u3390\0\54\0\u33bc\0\54\0\u33e8\0\u3414\0\u3440\0\u346c"+
    "\0\u3498\0\u34c4\0\u0108\0\u34f0\0\u351c\0\u3548\0\u3574\0\54"+
    "\0\u35a0\0\u35cc\0\u35f8\0\u3624\0\u3650\0\u367c\0\54\0\u36a8"+
    "\0\54\0\u36d4\0\54\0\u3700\0\u372c\0\u3758\0\u3784\0\54"+
    "\0\u37b0\0\u37dc\0\54\0\u0108\0\54\0\54\0\54\0\u3808"+
    "\0\54\0\54\0\u3834\0\54\0\u3860\0\54\0\54\0\54"+
    "\0\u388c\0\54\0\u38b8\0\54\0\54\0\u38e4\0\54\0\u3910"+
    "\0\54\0\54\0\u393c\0\54\0\u3968\0\u3994\0\u39c0\0\u39ec"+
    "\0\u3a18\0\54\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\10\1\26\1\27"+
    "\1\10\1\30\1\31\1\32\1\10\1\33\1\10\1\34"+
    "\1\35\1\36\1\10\1\37\1\40\3\10\1\41\3\10"+
    "\56\0\1\5\52\0\1\5\56\0\1\6\1\42\52\0"+
    "\1\43\53\0\1\10\1\0\2\10\13\0\31\10\10\44"+
    "\1\45\43\44\12\0\1\46\10\0\1\47\1\50\4\0"+
    "\1\51\1\0\1\52\1\0\1\53\3\0\1\54\1\0"+
    "\1\55\1\56\3\0\1\57\15\0\1\60\41\0\13\61"+
    "\1\62\40\61\11\63\1\64\42\63\4\0\1\10\1\0"+
    "\2\10\13\0\1\10\1\65\10\10\1\66\16\10\4\0"+
    "\1\10\1\0\2\10\13\0\16\10\1\67\12\10\4\0"+
    "\1\10\1\0\2\10\13\0\20\10\1\70\10\10\4\0"+
    "\1\10\1\0\2\10\13\0\5\10\1\71\23\10\4\0"+
    "\1\10\1\0\2\10\13\0\7\10\1\72\10\10\1\73"+
    "\10\10\4\0\1\10\1\0\2\10\13\0\2\10\1\74"+
    "\6\10\1\75\17\10\4\0\1\10\1\0\2\10\13\0"+
    "\6\10\1\76\1\77\1\100\1\101\6\10\1\102\4\10"+
    "\1\103\3\10\4\0\1\10\1\0\2\10\13\0\3\10"+
    "\1\104\16\10\1\105\1\10\1\106\4\10\4\0\1\10"+
    "\1\0\2\10\13\0\7\10\1\107\21\10\4\0\1\10"+
    "\1\0\2\10\13\0\4\10\1\110\24\10\4\0\1\10"+
    "\1\0\2\10\13\0\7\10\1\111\21\10\4\0\1\10"+
    "\1\0\2\10\13\0\2\10\1\112\26\10\4\0\1\10"+
    "\1\0\2\10\13\0\7\10\1\113\6\10\1\114\12\10"+
    "\4\0\1\10\1\0\2\10\13\0\1\10\1\115\27\10"+
    "\12\0\1\116\76\0\1\117\57\0\1\120\44\0\1\121"+
    "\2\0\1\122\5\0\1\123\40\0\1\124\1\125\1\126"+
    "\1\127\6\0\1\130\5\0\1\131\1\132\51\0\1\133"+
    "\36\0\1\134\46\0\1\135\60\0\1\136\6\0\1\137"+
    "\36\0\1\140\43\0\1\141\37\0\13\61\1\142\40\61"+
    "\4\0\1\10\1\0\2\10\13\0\2\10\1\143\26\10"+
    "\4\0\1\10\1\0\2\10\13\0\2\10\1\144\6\10"+
    "\1\145\17\10\4\0\1\10\1\0\2\10\13\0\10\10"+
    "\1\146\20\10\4\0\1\10\1\0\2\10\13\0\4\10"+
    "\1\147\24\10\4\0\1\10\1\0\2\10\13\0\6\10"+
    "\1\150\22\10\4\0\1\10\1\0\2\10\13\0\25\10"+
    "\1\151\3\10\4\0\1\10\1\0\2\10\13\0\27\10"+
    "\1\152\1\10\4\0\1\10\1\0\2\10\13\0\10\10"+
    "\1\153\20\10\4\0\1\10\1\0\2\10\13\0\6\10"+
    "\1\154\3\10\1\155\16\10\4\0\1\10\1\0\2\10"+
    "\13\0\26\10\1\156\2\10\4\0\1\10\1\0\2\10"+
    "\13\0\21\10\1\157\7\10\4\0\1\10\1\0\2\10"+
    "\13\0\12\10\1\160\16\10\4\0\1\10\1\0\2\10"+
    "\13\0\2\10\1\161\26\10\4\0\1\10\1\0\2\10"+
    "\13\0\23\10\1\162\5\10\4\0\1\10\1\0\2\10"+
    "\13\0\7\10\1\163\21\10\4\0\1\10\1\0\2\10"+
    "\13\0\11\10\1\164\17\10\4\0\1\10\1\0\2\10"+
    "\13\0\5\10\1\165\23\10\4\0\1\10\1\0\2\10"+
    "\13\0\2\10\1\166\26\10\4\0\1\10\1\0\2\10"+
    "\13\0\11\10\1\167\17\10\4\0\1\10\1\0\2\10"+
    "\13\0\11\10\1\170\17\10\4\0\1\10\1\0\2\10"+
    "\13\0\12\10\1\171\16\10\4\0\1\10\1\0\2\10"+
    "\13\0\6\10\1\172\22\10\13\0\1\173\65\0\1\174"+
    "\6\0\1\175\52\0\1\176\70\0\1\177\34\0\1\200"+
    "\74\0\1\201\44\0\1\202\61\0\1\203\46\0\1\204"+
    "\40\0\1\205\66\0\1\206\41\0\1\207\46\0\1\210"+
    "\61\0\1\211\1\212\53\0\1\213\54\0\1\214\47\0"+
    "\1\215\35\0\1\142\44\0\1\10\1\0\2\10\13\0"+
    "\3\10\1\216\25\10\4\0\1\10\1\0\2\10\3\0"+
    "\1\217\7\0\31\10\4\0\1\10\1\0\2\10\13\0"+
    "\30\10\1\220\4\0\1\10\1\0\2\10\13\0\12\10"+
    "\1\221\16\10\4\0\1\10\1\0\2\10\13\0\20\10"+
    "\1\222\10\10\4\0\1\10\1\0\2\10\13\0\7\10"+
    "\1\223\21\10\4\0\1\10\1\0\2\10\13\0\11\10"+
    "\1\224\17\10\4\0\1\10\1\0\2\10\13\0\6\10"+
    "\1\225\22\10\4\0\1\10\1\0\2\10\13\0\17\10"+
    "\1\226\11\10\4\0\1\10\1\0\2\10\13\0\1\10"+
    "\1\227\27\10\4\0\1\10\1\0\2\10\13\0\2\10"+
    "\1\230\26\10\4\0\1\10\1\0\2\10\13\0\7\10"+
    "\1\231\21\10\4\0\1\10\1\0\2\10\13\0\21\10"+
    "\1\232\7\10\4\0\1\10\1\0\2\10\13\0\10\10"+
    "\1\233\20\10\4\0\1\10\1\0\2\10\13\0\6\10"+
    "\1\234\22\10\4\0\1\10\1\0\2\10\13\0\5\10"+
    "\1\235\23\10\4\0\1\10\1\0\2\10\13\0\15\10"+
    "\1\236\13\10\4\0\1\10\1\0\2\10\13\0\1\10"+
    "\1\237\27\10\4\0\1\10\1\0\2\10\13\0\16\10"+
    "\1\240\12\10\4\0\1\10\1\0\2\10\13\0\20\10"+
    "\1\241\10\10\4\0\1\10\1\0\2\10\13\0\7\10"+
    "\1\242\21\10\4\0\1\10\1\0\2\10\13\0\6\10"+
    "\1\243\22\10\4\0\1\10\1\0\2\10\13\0\2\10"+
    "\1\244\26\10\4\0\1\10\1\0\2\10\13\0\1\10"+
    "\1\245\27\10\13\246\1\247\40\246\13\0\1\250\113\0"+
    "\1\251\35\0\1\252\52\0\1\253\47\0\1\254\54\0"+
    "\1\255\51\0\1\256\56\0\1\257\65\0\1\260\56\0"+
    "\1\261\44\0\1\262\56\0\1\263\42\0\1\264\53\0"+
    "\1\265\52\0\1\266\47\0\1\267\52\0\1\270\33\0"+
    "\1\10\1\0\2\10\13\0\1\10\1\271\27\10\23\0"+
    "\1\272\1\273\4\0\1\274\1\0\1\275\1\0\1\276"+
    "\3\0\1\277\1\0\1\300\1\301\3\0\1\302\7\0"+
    "\1\10\1\0\2\10\13\0\6\10\1\303\22\10\4\0"+
    "\1\10\1\0\2\10\13\0\1\10\1\304\27\10\4\0"+
    "\1\10\1\0\2\10\13\0\10\10\1\305\20\10\4\0"+
    "\1\10\1\0\2\10\13\0\7\10\1\306\21\10\4\0"+
    "\1\10\1\0\2\10\13\0\1\10\1\307\27\10\4\0"+
    "\1\10\1\0\2\10\13\0\1\10\1\310\27\10\4\0"+
    "\1\10\1\0\2\10\13\0\20\10\1\311\10\10\4\0"+
    "\1\10\1\0\2\10\13\0\30\10\1\312\4\0\1\10"+
    "\1\0\2\10\13\0\13\10\1\313\15\10\4\0\1\10"+
    "\1\0\2\10\13\0\4\10\1\314\24\10\4\0\1\10"+
    "\1\0\2\10\13\0\12\10\1\315\16\10\4\0\1\10"+
    "\1\0\2\10\13\0\20\10\1\316\10\10\4\0\1\10"+
    "\1\0\2\10\13\0\4\10\1\317\24\10\4\0\1\10"+
    "\1\0\2\10\13\0\1\10\1\320\27\10\4\0\1\10"+
    "\1\0\2\10\13\0\11\10\1\321\17\10\4\0\1\10"+
    "\1\0\2\10\13\0\10\10\1\322\20\10\4\0\1\10"+
    "\1\0\2\10\13\0\1\10\1\323\27\10\4\0\1\10"+
    "\1\0\2\10\13\0\2\10\1\324\26\10\4\0\1\10"+
    "\1\0\2\10\13\0\2\10\1\325\26\10\13\246\1\326"+
    "\40\246\13\327\1\247\40\327\23\0\1\330\5\0\1\331"+
    "\1\0\1\332\5\0\1\333\1\0\1\334\41\0\1\335"+
    "\46\0\1\336\61\0\1\337\55\0\1\340\43\0\1\341"+
    "\70\0\1\342\65\0\1\343\34\0\1\344\62\0\1\345"+
    "\44\0\1\346\67\0\1\347\36\0\1\350\44\0\1\351"+
    "\54\0\1\352\53\0\1\353\63\0\1\354\57\0\1\355"+
    "\44\0\1\356\2\0\1\357\5\0\1\360\40\0\1\361"+
    "\1\362\1\363\1\364\14\0\1\365\1\366\51\0\1\367"+
    "\36\0\1\370\46\0\1\371\67\0\1\372\36\0\1\373"+
    "\33\0\1\10\1\0\2\10\13\0\2\10\1\374\26\10"+
    "\4\0\1\10\1\0\2\10\13\0\17\10\1\375\11\10"+
    "\4\0\1\10\1\0\2\10\13\0\30\10\1\376\4\0"+
    "\1\10\1\0\2\10\13\0\7\10\1\377\21\10\4\0"+
    "\1\10\1\0\2\10\13\0\6\10\1\u0100\22\10\4\0"+
    "\1\10\1\0\2\10\13\0\7\10\1\u0101\21\10\4\0"+
    "\1\10\1\0\2\10\13\0\20\10\1\u0102\10\10\4\0"+
    "\1\10\1\0\2\10\13\0\2\10\1\u0103\26\10\4\0"+
    "\1\10\1\0\2\10\13\0\20\10\1\u0104\10\10\4\0"+
    "\1\10\1\0\2\10\3\0\1\u0105\7\0\31\10\4\0"+
    "\1\10\1\0\2\10\13\0\20\10\1\u0106\10\10\12\246"+
    "\1\u0107\1\326\40\246\13\0\1\u0108\75\0\1\u0109\50\0"+
    "\1\u010a\51\0\1\u010b\1\u010c\1\u010d\7\0\1\u010e\5\0"+
    "\1\u010f\35\0\1\u0110\46\0\1\u0111\53\0\1\u0112\52\0"+
    "\1\u0113\102\0\1\u0114\24\0\1\u0115\60\0\1\u0116\36\0"+
    "\1\u0117\64\0\1\u0118\71\0\1\u0119\53\0\1\u011a\23\0"+
    "\1\u011b\103\0\1\u011c\44\0\1\u011d\52\0\1\u011e\70\0"+
    "\1\u011f\34\0\1\u0120\74\0\1\u0121\44\0\1\u0122\24\0"+
    "\1\u0123\110\0\1\u0124\46\0\1\u0125\23\0\1\u0126\103\0"+
    "\1\u0127\41\0\1\u0128\46\0\1\u0129\62\0\1\u012a\54\0"+
    "\1\u012b\47\0\1\u012c\26\0\1\10\1\0\2\10\13\0"+
    "\7\10\1\u012d\21\10\4\0\1\10\1\0\2\10\13\0"+
    "\7\10\1\u012e\21\10\4\0\1\10\1\0\2\10\13\0"+
    "\3\10\1\u012f\25\10\4\0\1\10\1\0\2\10\13\0"+
    "\20\10\1\u0130\10\10\4\0\1\10\1\0\2\10\13\0"+
    "\3\10\1\u0131\25\10\4\0\1\10\1\0\2\10\13\0"+
    "\4\10\1\u0132\24\10\23\0\1\u0133\34\0\1\10\1\0"+
    "\2\10\13\0\4\10\1\u0134\24\10\12\246\1\u0135\1\326"+
    "\40\246\12\0\1\u0136\1\u0108\74\0\1\u0137\67\0\1\u0138"+
    "\46\0\1\u0139\24\0\1\u013a\110\0\1\u013b\33\0\1\u013c"+
    "\36\0\1\u013d\64\0\1\u013e\61\0\1\u013f\52\0\1\u0140"+
    "\64\0\1\u0141\55\0\1\u0142\31\0\1\u0143\57\0\1\u0144"+
    "\77\0\1\u0145\35\0\1\u0146\52\0\1\u0147\47\0\1\u0148"+
    "\54\0\1\u0149\51\0\1\u014a\56\0\1\u014b\65\0\1\u014c"+
    "\23\0\1\u014d\77\0\1\u014e\56\0\1\u014f\42\0\1\u0150"+
    "\46\0\1\u0151\52\0\1\u0152\33\0\1\10\1\0\2\10"+
    "\13\0\1\10\1\u0153\27\10\4\0\1\10\1\0\2\10"+
    "\13\0\27\10\1\u0154\1\10\4\0\1\10\1\0\2\10"+
    "\13\0\1\10\1\u0155\27\10\4\0\1\10\1\0\2\10"+
    "\13\0\3\10\1\u0156\25\10\35\0\1\u0157\16\0\13\246"+
    "\1\326\1\u0158\37\246\12\0\1\u0159\114\0\1\u015a\34\0"+
    "\1\u015b\46\0\1\u015c\56\0\1\u015d\70\0\1\u015e\47\0"+
    "\1\u015f\42\0\1\u0160\73\0\1\u0161\33\0\1\u0162\56\0"+
    "\1\u0163\47\0\1\u0164\46\0\1\u0165\61\0\1\u0166\55\0"+
    "\1\u0167\43\0\1\u0168\70\0\1\u0169\26\0\1\u016a\36\0"+
    "\1\u016b\14\0\1\u016c\102\0\1\u016d\44\0\1\u016e\52\0"+
    "\1\u016f\45\0\1\u0170\53\0\1\u0171\32\0\1\10\1\0"+
    "\2\10\13\0\6\10\1\u0172\22\10\4\0\1\10\1\0"+
    "\2\10\13\0\7\10\1\u0173\21\10\25\0\1\u0174\42\0"+
    "\1\u0158\70\0\1\u0175\54\0\1\u0176\62\0\1\u0177\26\0"+
    "\1\u0178\73\0\1\u0179\53\0\1\u017a\67\0\1\u017b\34\0"+
    "\1\u017c\50\0\1\u017d\52\0\1\u017e\42\0\1\u017f\64\0"+
    "\1\u0180\42\0\1\u0181\63\0\1\u0182\43\0\1\u0183\36\0"+
    "\1\u0184\24\0\1\u0185\60\0\1\u0186\47\0\1\u0187\42\0"+
    "\1\u0188\102\0\1\u0189\53\0\1\u018a\24\0\1\u018b\43\0"+
    "\1\10\1\0\2\10\13\0\1\10\1\u018c\27\10\14\0"+
    "\1\u018d\53\0\1\u018e\53\0\1\u018f\63\0\1\u0190\43\0"+
    "\1\u0191\53\0\1\u0192\102\0\1\u0193\34\0\1\u0194\53\0"+
    "\1\u0195\43\0\1\u0196\53\0\1\u0197\53\0\1\u0198\71\0"+
    "\1\u0199\35\0\1\u019a\102\0\1\u019b\24\0\1\u019c\53\0"+
    "\1\u019d\66\0\1\u019e\40\0\1\u019f\104\0\1\u01a0\22\0"+
    "\1\u01a1\53\0\1\u01a2\111\0\1\u01a3\15\0\1\u01a4\71\0"+
    "\1\u01a5\52\0\1\u01a6\50\0\1\u01a7\51\0\1\u01a8\53\0"+
    "\1\u01a9\43\0\1\u01aa\53\0\1\u01ab\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\1\11\10\1\6\11\16\1\1\0"+
    "\1\1\1\0\1\11\12\0\1\1\1\0\1\1\1\0"+
    "\1\11\32\1\6\0\1\11\3\0\1\11\7\0\1\11"+
    "\31\1\13\0\1\11\7\0\1\1\1\0\26\1\11\0"+
    "\1\1\1\11\10\0\1\1\11\0\23\1\7\0\1\11"+
    "\1\0\1\11\1\0\1\1\4\0\1\11\4\0\1\11"+
    "\20\0\11\1\1\0\1\1\13\0\2\11\1\0\1\11"+
    "\1\0\2\11\1\0\1\11\10\0\1\11\2\0\1\11"+
    "\6\0\6\1\1\0\1\1\5\0\1\11\2\0\1\11"+
    "\2\0\1\11\3\0\1\11\10\0\1\11\5\0\4\1"+
    "\1\0\1\11\21\0\1\11\1\0\1\11\5\0\2\1"+
    "\4\0\1\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\4\0\1\11\2\0\1\11\1\1\3\11\1\0\2\11"+
    "\1\0\1\11\1\0\3\11\1\0\1\11\1\0\2\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\11\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string = new StringBuilder();

static LinkedList<Erro_r> listaErrores= new LinkedList();

  public void adderror(int fila, int columna, String valor){
       Erro_r n = new Erro_r(fila,columna,valor,"");
       listaErrores.add(n);
  }

/*public void agregar(String Token,String Lexema,int Fila, int Columna){
  Simbolo simbolo= new Simbolo(Token,Lexema,Fila,Columna);
  TablaSimbolos.add(simbolo);	
}
  

public LinkedList<Simbolo> retornarTablaSimbolos(){
     return AnalizadorLexico.TablaSimbolos;
}*/

public LinkedList<Erro_r> retornarErrores(){       
	return null;//AnalizadorLexico.listaErrores;
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AL_HTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AL_HTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2298) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 56: 
          { return new Symbol(sym.FCT, new token(yycolumn, yyline, yytext()));
          }
        case 97: break;
        case 95: 
          { return new Symbol(sym.FCAJA_TEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 98: break;
        case 42: 
          { return new Symbol(sym.IFIL_T2, new token(yycolumn, yyline, yytext()));
          }
        case 99: break;
        case 91: 
          { return new Symbol(sym.FCUERPO2, new token(yycolumn, yyline, yytext()));
          }
        case 100: break;
        case 23: 
          { return new Symbol(sym.ICB2, new token(yycolumn, yyline, yytext()));
          }
        case 101: break;
        case 54: 
          { return new Symbol(sym.IIMAGEN, new token(yycolumn, yyline, yytext()));
          }
        case 102: break;
        case 77: 
          { return new Symbol(sym.FBOTON, new token(yycolumn, yyline, yytext()));
          }
        case 103: break;
        case 65: 
          { return new Symbol(sym.FCJS, new token(yycolumn, yyline, yytext()));
          }
        case 104: break;
        case 21: 
          { return new Symbol(sym.APERTURA2, new token(yycolumn, yyline, yytext()));
          }
        case 105: break;
        case 41: 
          { return new Symbol(sym.TBOTON, new token(yycolumn, yyline, yytext()));
          }
        case 106: break;
        case 67: 
          { return new Symbol(sym.CENT, new token(yycolumn, yyline, yytext()));
          }
        case 107: break;
        case 93: 
          { return new Symbol(sym.FTEXTO_A, new token(yycolumn, yyline, yytext()));
          }
        case 108: break;
        case 79: 
          { return new Symbol(sym.TSALTOF, new token(yycolumn, yyline, yytext()));
          }
        case 109: break;
        case 34: 
          { return new Symbol(sym.TTABLA, new token(yycolumn, yyline, yytext()));
          }
        case 110: break;
        case 30: 
          { return new Symbol(sym.ICAJA, new token(yycolumn, yyline, yytext()));
          }
        case 111: break;
        case 5: 
          { return new Symbol(sym.I_D, new token(yycolumn, yyline, yytext()));
          }
        case 112: break;
        case 18: 
          { return new Symbol(sym.ICT, new token(yycolumn, yyline, yytext()));
          }
        case 113: break;
        case 58: 
          { return new Symbol(sym.DER, new token(yycolumn, yyline, yytext()));
          }
        case 114: break;
        case 37: 
          { return new Symbol(sym.CLICK, new token(yycolumn, yyline, yytext()));
          }
        case 115: break;
        case 61: 
          { return new Symbol(sym.FCT2, new token(yycolumn, yyline, yytext()));
          }
        case 116: break;
        case 47: 
          { return new Symbol(sym.IOPCION, new token(yycolumn, yyline, yytext()));
          }
        case 117: break;
        case 2: 
          { System.out.println(yyline+","+yycolumn+"=["+yytext()+"],"+yychar); adderror(yyline,yycolumn,yytext());
          }
        case 118: break;
        case 44: 
          { return new Symbol(sym.ITEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 119: break;
        case 14: 
          { return new Symbol(sym.STRING_LITERAL, new token(yycolumn, yyline, yytext()));
          }
        case 120: break;
        case 27: 
          { return new Symbol(sym.ALTO, new token(yycolumn, yyline, yytext()));
          }
        case 121: break;
        case 4: 
          { return new Symbol(sym.NUM, new token(yycolumn, yyline, yytext()));
          }
        case 122: break;
        case 15: 
          { return new Symbol(sym.APERTURA1, new token(yycolumn, yyline, yytext()));
          }
        case 123: break;
        case 69: 
          { return new Symbol(sym.FCAJA, new token(yycolumn, yyline, yytext()));
          }
        case 124: break;
        case 28: 
          { return new Symbol(sym.TCAJA, new token(yycolumn, yyline, yytext()));
          }
        case 125: break;
        case 90: 
          { return new Symbol(sym.FENLACE, new token(yycolumn, yyline, yytext()));
          }
        case 126: break;
        case 29: 
          { return new Symbol(sym.CCSS, new token(yycolumn, yyline, yytext()));
          }
        case 127: break;
        case 88: 
          { return new Symbol(sym.FCUERPO, new token(yycolumn, yyline, yytext()));
          }
        case 128: break;
        case 17: 
          { return new Symbol(sym.EXPLICIT, new token(yycolumn, yyline, yytext()));
          }
        case 129: break;
        case 26: 
          { return new Symbol(sym.RUTA, new token(yycolumn, yyline, yytext()));
          }
        case 130: break;
        case 7: 
          { return new Symbol(sym.MENOS, new token(yycolumn, yyline, yytext()));
          }
        case 131: break;
        case 87: 
          { return new Symbol(sym.FTITULO, new token(yycolumn, yyline, yytext()));
          }
        case 132: break;
        case 82: 
          { return new Symbol(sym.FCHTML, new token(yycolumn, yyline, yytext()));
          }
        case 133: break;
        case 20: 
          { return new Symbol(sym.ID, new token(yycolumn, yyline, yytext()));
          }
        case 134: break;
        case 9: 
          { return new Symbol(sym.POR, new token(yycolumn, yyline, yytext()));
          }
        case 135: break;
        case 76: 
          { return new Symbol(sym.FPANEL, new token(yycolumn, yyline, yytext()));
          }
        case 136: break;
        case 81: 
          { return new Symbol(sym.FTABLA2, new token(yycolumn, yyline, yytext()));
          }
        case 137: break;
        case 40: 
          { return new Symbol(sym.TPANEL, new token(yycolumn, yyline, yytext()));
          }
        case 138: break;
        case 80: 
          { return new Symbol(sym.FFIL_T2, new token(yycolumn, yyline, yytext()));
          }
        case 139: break;
        case 31: 
          { return new Symbol(sym.ICCSS, new token(yycolumn, yyline, yytext()));
          }
        case 140: break;
        case 24: 
          { return new Symbol(sym.CIERRE, new token(yycolumn, yyline, yytext()));
          }
        case 141: break;
        case 11: 
          { return new Symbol(sym.IGUAL, new token(yycolumn, yyline, yytext()));
          }
        case 142: break;
        case 36: 
          { return new Symbol(sym.ANCHO, new token(yycolumn, yyline, yytext()));
          }
        case 143: break;
        case 85: 
          { return new Symbol(sym.ISALTOF, new token(yycolumn, yyline, yytext()));
          }
        case 144: break;
        case 78: 
          { return new Symbol(sym.TCAJA_TEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 145: break;
        case 70: 
          { return new Symbol(sym.FCCSS, new token(yycolumn, yyline, yytext()));
          }
        case 146: break;
        case 84: 
          { return new Symbol(sym.ICAJA_TEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 147: break;
        case 46: 
          { return new Symbol(sym.IBOTON, new token(yycolumn, yyline, yytext()));
          }
        case 148: break;
        case 32: 
          { return new Symbol(sym.FONDO, new token(yycolumn, yyline, yytext()));
          }
        case 149: break;
        case 43: 
          { return new Symbol(sym.ITABLA, new token(yycolumn, yyline, yytext()));
          }
        case 150: break;
        case 16: 
          { return new Symbol(sym.EXPLICIT_2, new token(yycolumn, yyline, yytext()));
          }
        case 151: break;
        case 49: 
          { return new Symbol(sym.TENLACE, new token(yycolumn, yyline, yytext()));
          }
        case 152: break;
        case 25: 
          { return new Symbol(sym.ICJS, new token(yycolumn, yyline, yytext()));
          }
        case 153: break;
        case 50: 
          { return new Symbol(sym.IOPCION2, new token(yycolumn, yyline, yytext()));
          }
        case 154: break;
        case 73: 
          { return new Symbol(sym.FFIL_T, new token(yycolumn, yyline, yytext()));
          }
        case 155: break;
        case 64: 
          { return new Symbol(sym.ISPINNER, new token(yycolumn, yyline, yytext()));
          }
        case 156: break;
        case 62: 
          { return new Symbol(sym.FCB2, new token(yycolumn, yyline, yytext()));
          }
        case 157: break;
        case 39: 
          { return new Symbol(sym.GRUPO, new token(yycolumn, yyline, yytext()));
          }
        case 158: break;
        case 89: 
          { return new Symbol(sym.FIMAGEN, new token(yycolumn, yyline, yytext()));
          }
        case 159: break;
        case 86: 
          { return new Symbol(sym.FOPCION, new token(yycolumn, yyline, yytext()));
          }
        case 160: break;
        case 1: 
          { return new Symbol(sym.DECIMAL, new token(yycolumn, yyline, yytext()));
          }
        case 161: break;
        case 92: 
          { return new Symbol(sym.IENCA, new token(yycolumn, yyline, yytext()));
          }
        case 162: break;
        case 96: 
          { return new Symbol(sym.FENCA, new token(yycolumn, yyline, yytext()));
          }
        case 163: break;
        case 10: 
          { return new Symbol(sym.PYC, new token(yycolumn, yyline, yytext()));
          }
        case 164: break;
        case 71: 
          { return new Symbol(sym.IZQ, new token(yycolumn, yyline, yytext()));
          }
        case 165: break;
        case 22: 
          { return new Symbol(sym.ICT2, new token(yycolumn, yyline, yytext()));
          }
        case 166: break;
        case 60: 
          { return new Symbol(sym.TSPINNER, new token(yycolumn, yyline, yytext()));
          }
        case 167: break;
        case 48: 
          { return new Symbol(sym.TIMAGEN, new token(yycolumn, yyline, yytext()));
          }
        case 168: break;
        case 66: 
          { return new Symbol(sym.ALINEADO, new token(yycolumn, yyline, yytext()));
          }
        case 169: break;
        case 12: 
          { return new Symbol(sym.ALLA, new token(yycolumn, yyline, yytext()));
          }
        case 170: break;
        case 53: 
          { return new Symbol(sym.ICHTML, new token(yycolumn, yyline, yytext()));
          }
        case 171: break;
        case 75: 
          { return new Symbol(sym.FTEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 172: break;
        case 13: 
          { return new Symbol(sym.CLLA, new token(yycolumn, yyline, yytext()));
          }
        case 173: break;
        case 6: 
          { return new Symbol(sym.DIV, new token(yycolumn, yyline, yytext()));
          }
        case 174: break;
        case 35: 
          { return new Symbol(sym.TTEXTO, new token(yycolumn, yyline, yytext()));
          }
        case 175: break;
        case 45: 
          { return new Symbol(sym.IPANEL, new token(yycolumn, yyline, yytext()));
          }
        case 176: break;
        case 94: 
          { return new Symbol(sym.FSPINNER, new token(yycolumn, yyline, yytext()));
          }
        case 177: break;
        case 51: 
          { return new Symbol(sym.ITITULO, new token(yycolumn, yyline, yytext()));
          }
        case 178: break;
        case 63: 
          { return new Symbol(sym.ITEXTO_A, new token(yycolumn, yyline, yytext()));
          }
        case 179: break;
        case 8: 
          { return new Symbol(sym.MAS, new token(yycolumn, yyline, yytext()));
          }
        case 180: break;
        case 57: 
          { return new Symbol(sym.FCB, new token(yycolumn, yyline, yytext()));
          }
        case 181: break;
        case 55: 
          { return new Symbol(sym.IENLACE, new token(yycolumn, yyline, yytext()));
          }
        case 182: break;
        case 52: 
          { return new Symbol(sym.ICUERPO, new token(yycolumn, yyline, yytext()));
          }
        case 183: break;
        case 68: 
          { System.out.println("Comentario:\n"+ yytext());
          }
        case 184: break;
        case 72: 
          { return new Symbol(sym.FCAJA2, new token(yycolumn, yyline, yytext()));
          }
        case 185: break;
        case 3: 
          { /* ignorar */
          }
        case 186: break;
        case 59: 
          { return new Symbol(sym.TTEXTO_A, new token(yycolumn, yyline, yytext()));
          }
        case 187: break;
        case 38: 
          { return new Symbol(sym.VALOR, new token(yycolumn, yyline, yytext()));
          }
        case 188: break;
        case 74: 
          { return new Symbol(sym.FTABLA, new token(yycolumn, yyline, yytext()));
          }
        case 189: break;
        case 33: 
          { return new Symbol(sym.IFIL_T, new token(yycolumn, yyline, yytext()));
          }
        case 190: break;
        case 83: 
          { return new Symbol(sym.FPANEL2, new token(yycolumn, yyline, yytext()));
          }
        case 191: break;
        case 19: 
          { return new Symbol(sym.ICB, new token(yycolumn, yyline, yytext()));
          }
        case 192: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
