
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 27 10:43:23 CST 2018
//----------------------------------------------------

package Analizadores.LenguajeCHTML;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 27 10:43:23 CST 2018
  */
public class AS_HTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_HTML() {super();}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\004\000\002\055" +
    "\006\000\002\055\006\000\002\055\003\000\002\056\002" +
    "\000\002\056\003\000\002\057\004\000\002\057\003\000" +
    "\002\060\006\000\002\060\006\000\002\060\006\000\002" +
    "\061\006\000\002\036\005\000\002\036\004\000\002\035" +
    "\004\000\002\035\003\000\002\034\006\000\002\034\006" +
    "\000\002\034\006\000\002\034\006\000\002\034\006\000" +
    "\002\034\006\000\002\034\006\000\002\034\006\000\002" +
    "\034\006\000\002\034\003\000\002\034\006\000\002\033" +
    "\006\000\002\033\006\000\002\033\006\000\002\033\006" +
    "\000\002\033\006\000\002\033\006\000\002\033\006\000" +
    "\002\033\006\000\002\033\006\000\002\033\003\000\002" +
    "\033\006\000\002\054\003\000\002\054\004\000\002\047" +
    "\003\000\002\047\004\000\002\050\004\000\002\050\003" +
    "\000\002\051\006\000\002\052\006\000\002\037\003\000" +
    "\002\037\004\000\002\021\004\000\002\021\003\000\002" +
    "\030\006\000\002\027\006\000\002\040\003\000\002\040" +
    "\004\000\002\041\004\000\002\041\003\000\002\042\006" +
    "\000\002\042\006\000\002\043\006\000\002\043\006\000" +
    "\002\045\003\000\002\045\004\000\002\044\003\000\002" +
    "\044\004\000\002\046\006\000\002\046\006\000\002\005" +
    "\002\000\002\005\003\000\002\006\005\000\002\006\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\053" +
    "\005\000\002\007\005\000\002\010\005\000\002\011\005" +
    "\000\002\012\005\000\002\013\005\000\002\014\005\000" +
    "\002\015\005\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\063\005\001\002\000\004\002\342\001" +
    "\002\000\006\065\010\131\011\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffd\001\002\000\026\017\032\020" +
    "\030\021\026\022\042\023\027\024\033\025\035\026\034" +
    "\027\036\035\uffbe\001\002\000\012\125\015\127\016\132" +
    "\ufffc\133\017\001\002\000\012\125\ufff9\127\ufff9\132\ufff9" +
    "\133\ufff9\001\002\000\004\132\103\001\002\000\012\125" +
    "\015\127\016\132\ufffb\133\017\001\002\000\026\017\032" +
    "\020\030\021\026\022\042\023\027\024\033\025\035\026" +
    "\034\027\036\035\uffbe\001\002\000\026\017\032\020\030" +
    "\021\026\022\042\023\027\024\033\025\035\026\034\027" +
    "\036\035\uffbe\001\002\000\026\017\032\020\030\021\026" +
    "\022\042\023\027\024\033\025\035\026\034\027\036\035" +
    "\uffbe\001\002\000\026\017\032\020\030\021\026\022\042" +
    "\023\027\024\033\025\035\026\034\027\036\035\uffbd\001" +
    "\002\000\004\013\uffb5\001\002\000\004\013\071\001\002" +
    "\000\004\013\uffb2\001\002\000\004\013\uffb6\001\002\000" +
    "\004\013\uffb4\001\002\000\004\014\067\001\002\000\004" +
    "\014\065\001\002\000\004\014\063\001\002\000\004\013" +
    "\uffb8\001\002\000\004\014\061\001\002\000\004\014\057" +
    "\001\002\000\004\014\055\001\002\000\004\014\053\001" +
    "\002\000\004\014\051\001\002\000\004\013\uffb3\001\002" +
    "\000\004\013\uffb7\001\002\000\004\013\uffb9\001\002\000" +
    "\004\014\047\001\002\000\004\013\uffba\001\002\000\004" +
    "\035\045\001\002\000\004\134\046\001\002\000\012\125" +
    "\ufff6\127\ufff6\132\ufff6\133\ufff6\001\002\000\004\031\050" +
    "\001\002\000\004\013\uffae\001\002\000\004\031\052\001" +
    "\002\000\004\013\uffa9\001\002\000\004\031\054\001\002" +
    "\000\004\013\uffab\001\002\000\004\031\056\001\002\000" +
    "\004\013\uffaa\001\002\000\004\031\060\001\002\000\004" +
    "\013\uffac\001\002\000\004\031\062\001\002\000\004\013" +
    "\uffb1\001\002\000\004\031\064\001\002\000\004\013\uffb0" +
    "\001\002\000\004\031\066\001\002\000\004\013\uffad\001" +
    "\002\000\004\031\070\001\002\000\004\013\uffaf\001\002" +
    "\000\026\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\035\uffbb\001\002\000\004" +
    "\013\073\001\002\000\026\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\035\uffbc" +
    "\001\002\000\004\035\075\001\002\000\004\130\076\001" +
    "\002\000\012\125\ufff7\127\ufff7\132\ufff7\133\ufff7\001\002" +
    "\000\004\035\100\001\002\000\004\126\101\001\002\000" +
    "\012\125\ufff8\127\ufff8\132\ufff8\133\ufff8\001\002\000\012" +
    "\125\ufffa\127\ufffa\132\ufffa\133\ufffa\001\002\000\006\064" +
    "\104\065\010\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\uffff\001\002\000\004\035\107\001\002\000\032\066" +
    "\116\102\124\103\113\113\120\114\125\115\123\116\114" +
    "\117\110\120\122\121\111\122\112\123\121\001\002\000" +
    "\026\017\032\020\030\021\026\022\042\023\027\024\033" +
    "\025\035\026\034\027\036\035\uffbe\001\002\000\026\017" +
    "\032\020\030\021\026\022\042\023\027\024\033\025\035" +
    "\026\034\027\036\035\uffbe\001\002\000\034\036\uffdc\040" +
    "\uffdc\042\uffdc\044\uffdc\046\uffdc\050\uffdc\052\uffdc\054\uffdc" +
    "\056\uffdc\060\uffdc\062\uffdc\112\uffdc\124\uffdc\001\002\000" +
    "\026\017\032\020\030\021\026\022\042\023\027\024\033" +
    "\025\035\026\034\027\036\035\uffbe\001\002\000\026\017" +
    "\032\020\030\021\026\022\042\023\027\024\033\025\035" +
    "\026\034\027\036\035\uffbe\001\002\000\034\036\ufff1\040" +
    "\ufff1\042\ufff1\044\ufff1\046\ufff1\050\ufff1\052\ufff1\054\ufff1" +
    "\056\ufff1\060\ufff1\062\ufff1\112\ufff1\124\ufff1\001\002\000" +
    "\004\064\325\001\002\000\032\036\253\040\261\042\257" +
    "\044\260\046\250\050\255\052\254\054\263\056\262\060" +
    "\251\062\256\112\323\001\002\000\026\017\032\020\030" +
    "\021\026\022\042\023\027\024\033\025\035\026\034\027" +
    "\036\035\uffbe\001\002\000\026\017\032\020\030\021\026" +
    "\022\042\023\027\024\033\025\035\026\034\027\036\035" +
    "\uffbe\001\002\000\026\017\032\020\030\021\026\022\042" +
    "\023\027\024\033\025\035\026\034\027\036\035\uffbe\001" +
    "\002\000\026\017\032\020\030\021\026\022\042\023\027" +
    "\024\033\025\035\026\034\027\036\035\uffbe\001\002\000" +
    "\026\017\032\020\030\021\026\022\042\023\027\024\033" +
    "\025\035\026\034\027\036\035\uffbe\001\002\000\026\017" +
    "\032\020\030\021\026\022\042\023\027\024\033\025\035" +
    "\026\034\027\036\035\uffbe\001\002\000\004\002\ufff5\001" +
    "\002\000\004\035\130\001\002\000\004\041\131\001\002" +
    "\000\034\036\uffe4\040\uffe4\042\uffe4\044\uffe4\046\uffe4\050" +
    "\uffe4\052\uffe4\054\uffe4\056\uffe4\060\uffe4\062\uffe4\112\uffe4" +
    "\124\uffe4\001\002\000\004\035\133\001\002\000\004\045" +
    "\134\001\002\000\034\036\uffe2\040\uffe2\042\uffe2\044\uffe2" +
    "\046\uffe2\050\uffe2\052\uffe2\054\uffe2\056\uffe2\060\uffe2\062" +
    "\uffe2\112\uffe2\124\uffe2\001\002\000\004\035\136\001\002" +
    "\000\004\047\137\001\002\000\034\036\uffe1\040\uffe1\042" +
    "\uffe1\044\uffe1\046\uffe1\050\uffe1\052\uffe1\054\uffe1\056\uffe1" +
    "\060\uffe1\062\uffe1\112\uffe1\124\uffe1\001\002\000\004\035" +
    "\141\001\002\000\006\057\145\106\144\001\002\000\006" +
    "\107\uffd5\111\uffd5\001\002\000\034\036\uffde\040\uffde\042" +
    "\uffde\044\uffde\046\uffde\050\uffde\052\uffde\054\uffde\056\uffde" +
    "\060\uffde\062\uffde\112\uffde\124\uffde\001\002\000\026\017" +
    "\032\020\030\021\026\022\042\023\027\024\033\025\035" +
    "\026\034\027\036\035\uffbe\001\002\000\034\036\uffd8\040" +
    "\uffd8\042\uffd8\044\uffd8\046\uffd8\050\uffd8\052\uffd8\054\uffd8" +
    "\056\uffd8\060\uffd8\062\uffd8\112\uffd8\124\uffd8\001\002\000" +
    "\006\107\147\111\150\001\002\000\026\017\032\020\030" +
    "\021\026\022\042\023\027\024\033\025\035\026\034\027" +
    "\036\035\uffbe\001\002\000\034\036\uffd7\040\uffd7\042\uffd7" +
    "\044\uffd7\046\uffd7\050\uffd7\052\uffd7\054\uffd7\056\uffd7\060" +
    "\uffd7\062\uffd7\112\uffd7\124\uffd7\001\002\000\006\107\uffd6" +
    "\111\uffd6\001\002\000\004\035\153\001\002\000\004\110" +
    "\154\001\002\000\006\107\uffd3\111\uffd3\001\002\000\004" +
    "\035\156\001\002\000\004\110\157\001\002\000\006\107" +
    "\uffd4\111\uffd4\001\002\000\004\035\161\001\002\000\006" +
    "\051\164\067\166\001\002\000\006\070\237\077\235\001" +
    "\002\000\034\036\uffdb\040\uffdb\042\uffdb\044\uffdb\046\uffdb" +
    "\050\uffdb\052\uffdb\054\uffdb\056\uffdb\060\uffdb\062\uffdb\112" +
    "\uffdb\124\uffdb\001\002\000\034\036\uffd2\040\uffd2\042\uffd2" +
    "\044\uffd2\046\uffd2\050\uffd2\052\uffd2\054\uffd2\056\uffd2\060" +
    "\uffd2\062\uffd2\112\uffd2\124\uffd2\001\002\000\006\070\uffcf" +
    "\077\uffcf\001\002\000\026\017\032\020\030\021\026\022" +
    "\042\023\027\024\033\025\035\026\034\027\036\035\uffbe" +
    "\001\002\000\004\035\170\001\002\000\010\071\174\073" +
    "\172\100\176\001\002\000\006\070\uffcd\077\uffcd\001\002" +
    "\000\026\017\032\020\030\021\026\022\042\023\027\024" +
    "\033\025\035\026\034\027\036\035\uffbe\001\002\000\010" +
    "\072\uffc9\074\uffc9\075\uffc9\001\002\000\006\070\uffcc\077" +
    "\uffcc\001\002\000\010\072\220\074\215\075\216\001\002" +
    "\000\026\017\032\020\030\021\026\022\042\023\027\024" +
    "\033\025\035\026\034\027\036\035\uffbe\001\002\000\004" +
    "\035\200\001\002\000\010\101\201\102\204\103\205\001" +
    "\002\000\010\072\uffc4\074\uffc4\075\uffc4\001\002\000\010" +
    "\072\uffc7\074\uffc7\075\uffc7\001\002\000\004\105\214\001" +
    "\002\000\026\017\032\020\030\021\026\022\042\023\027" +
    "\024\033\025\035\026\034\027\036\035\uffbe\001\002\000" +
    "\026\017\032\020\030\021\026\022\042\023\027\024\033" +
    "\025\035\026\034\027\036\035\uffbe\001\002\000\004\035" +
    "\207\001\002\000\004\043\210\001\002\000\006\104\uffbf" +
    "\105\uffbf\001\002\000\004\035\212\001\002\000\004\045" +
    "\213\001\002\000\006\104\uffc0\105\uffc0\001\002\000\010" +
    "\072\uffc3\074\uffc3\075\uffc3\001\002\000\026\017\032\020" +
    "\030\021\026\022\042\023\027\024\033\025\035\026\034" +
    "\027\036\035\uffbe\001\002\000\026\017\032\020\030\021" +
    "\026\022\042\023\027\024\033\025\035\026\034\027\036" +
    "\035\uffbe\001\002\000\010\072\uffca\074\uffca\075\uffca\001" +
    "\002\000\006\070\uffcb\077\uffcb\001\002\000\004\035\222" +
    "\001\002\000\010\101\201\102\204\103\205\001\002\000" +
    "\010\072\uffc5\074\uffc5\075\uffc5\001\002\000\004\035\225" +
    "\001\002\000\010\076\227\102\204\103\205\001\002\000" +
    "\004\104\231\001\002\000\010\072\uffc2\074\uffc2\075\uffc2" +
    "\001\002\000\010\072\uffc6\074\uffc6\075\uffc6\001\002\000" +
    "\010\072\uffc1\074\uffc1\075\uffc1\001\002\000\004\035\233" +
    "\001\002\000\010\076\227\102\204\103\205\001\002\000" +
    "\010\072\uffc8\074\uffc8\075\uffc8\001\002\000\034\036\uffd1" +
    "\040\uffd1\042\uffd1\044\uffd1\046\uffd1\050\uffd1\052\uffd1\054" +
    "\uffd1\056\uffd1\060\uffd1\062\uffd1\112\uffd1\124\uffd1\001\002" +
    "\000\006\070\uffd0\077\uffd0\001\002\000\026\017\032\020" +
    "\030\021\026\022\042\023\027\024\033\025\035\026\034" +
    "\027\036\035\uffbe\001\002\000\004\035\241\001\002\000" +
    "\010\071\174\073\172\100\176\001\002\000\006\070\uffce" +
    "\077\uffce\001\002\000\004\035\244\001\002\000\032\037" +
    "\245\102\124\103\113\113\120\114\125\115\123\116\114" +
    "\117\110\120\122\121\111\122\112\123\121\001\002\000" +
    "\034\036\uffda\040\uffda\042\uffda\044\uffda\046\uffda\050\uffda" +
    "\052\uffda\054\uffda\056\uffda\060\uffda\062\uffda\112\uffda\124" +
    "\uffda\001\002\000\034\036\uffe5\040\uffe5\042\uffe5\044\uffe5" +
    "\046\uffe5\050\uffe5\052\uffe5\054\uffe5\056\uffe5\060\uffe5\062" +
    "\uffe5\112\uffe5\124\uffe5\001\002\000\032\036\253\040\261" +
    "\042\257\044\260\046\250\050\255\052\254\054\263\056" +
    "\262\060\251\062\256\124\264\001\002\000\026\017\032" +
    "\020\030\021\026\022\042\023\027\024\033\025\035\026" +
    "\034\027\036\035\uffbe\001\002\000\026\017\032\020\030" +
    "\021\026\022\042\023\027\024\033\025\035\026\034\027" +
    "\036\035\uffbe\001\002\000\034\036\ufff2\040\ufff2\042\ufff2" +
    "\044\ufff2\046\ufff2\050\ufff2\052\ufff2\054\ufff2\056\ufff2\060" +
    "\ufff2\062\ufff2\112\ufff2\124\ufff2\001\002\000\026\017\032" +
    "\020\030\021\026\022\042\023\027\024\033\025\035\026" +
    "\034\027\036\035\uffbe\001\002\000\026\017\032\020\030" +
    "\021\026\022\042\023\027\024\033\025\035\026\034\027" +
    "\036\035\uffbe\001\002\000\026\017\032\020\030\021\026" +
    "\022\042\023\027\024\033\025\035\026\034\027\036\035" +
    "\uffbe\001\002\000\034\036\uffe7\040\uffe7\042\uffe7\044\uffe7" +
    "\046\uffe7\050\uffe7\052\uffe7\054\uffe7\056\uffe7\060\uffe7\062" +
    "\uffe7\112\uffe7\124\uffe7\001\002\000\026\017\032\020\030" +
    "\021\026\022\042\023\027\024\033\025\035\026\034\027" +
    "\036\035\uffbe\001\002\000\026\017\032\020\030\021\026" +
    "\022\042\023\027\024\033\025\035\026\034\027\036\035" +
    "\uffbe\001\002\000\026\017\032\020\030\021\026\022\042" +
    "\023\027\024\033\025\035\026\034\027\036\035\uffbe\001" +
    "\002\000\026\017\032\020\030\021\026\022\042\023\027" +
    "\024\033\025\035\026\034\027\036\035\uffbe\001\002\000" +
    "\026\017\032\020\030\021\026\022\042\023\027\024\033" +
    "\025\035\026\034\027\036\035\uffbe\001\002\000\034\036" +
    "\uffd9\040\uffd9\042\uffd9\044\uffd9\046\uffd9\050\uffd9\052\uffd9" +
    "\054\uffd9\056\uffd9\060\uffd9\062\uffd9\112\uffd9\124\uffd9\001" +
    "\002\000\004\035\266\001\002\000\004\055\267\001\002" +
    "\000\034\036\uffea\040\uffea\042\uffea\044\uffea\046\uffea\050" +
    "\uffea\052\uffea\054\uffea\056\uffea\060\uffea\062\uffea\112\uffea" +
    "\124\uffea\001\002\000\004\035\271\001\002\000\006\057" +
    "\145\106\144\001\002\000\034\036\uffe9\040\uffe9\042\uffe9" +
    "\044\uffe9\046\uffe9\050\uffe9\052\uffe9\054\uffe9\056\uffe9\060" +
    "\uffe9\062\uffe9\112\uffe9\124\uffe9\001\002\000\004\035\274" +
    "\001\002\000\004\041\275\001\002\000\034\036\uffef\040" +
    "\uffef\042\uffef\044\uffef\046\uffef\050\uffef\052\uffef\054\uffef" +
    "\056\uffef\060\uffef\062\uffef\112\uffef\124\uffef\001\002\000" +
    "\004\035\277\001\002\000\004\045\300\001\002\000\034" +
    "\036\uffed\040\uffed\042\uffed\044\uffed\046\uffed\050\uffed\052" +
    "\uffed\054\uffed\056\uffed\060\uffed\062\uffed\112\uffed\124\uffed" +
    "\001\002\000\004\035\302\001\002\000\004\043\303\001" +
    "\002\000\034\036\uffee\040\uffee\042\uffee\044\uffee\046\uffee" +
    "\050\uffee\052\uffee\054\uffee\056\uffee\060\uffee\062\uffee\112" +
    "\uffee\124\uffee\001\002\000\004\035\305\001\002\000\006" +
    "\051\164\067\166\001\002\000\034\036\uffe6\040\uffe6\042" +
    "\uffe6\044\uffe6\046\uffe6\050\uffe6\052\uffe6\054\uffe6\056\uffe6" +
    "\060\uffe6\062\uffe6\112\uffe6\124\uffe6\001\002\000\004\035" +
    "\310\001\002\000\004\053\311\001\002\000\034\036\uffeb" +
    "\040\uffeb\042\uffeb\044\uffeb\046\uffeb\050\uffeb\052\uffeb\054" +
    "\uffeb\056\uffeb\060\uffeb\062\uffeb\112\uffeb\124\uffeb\001\002" +
    "\000\004\035\313\001\002\000\032\037\245\102\124\103" +
    "\113\113\120\114\125\115\123\116\114\117\110\120\122" +
    "\121\111\122\112\123\121\001\002\000\034\036\ufff0\040" +
    "\ufff0\042\ufff0\044\ufff0\046\ufff0\050\ufff0\052\ufff0\054\ufff0" +
    "\056\ufff0\060\ufff0\062\ufff0\112\ufff0\124\ufff0\001\002\000" +
    "\004\035\316\001\002\000\004\061\317\001\002\000\034" +
    "\036\uffe8\040\uffe8\042\uffe8\044\uffe8\046\uffe8\050\uffe8\052" +
    "\uffe8\054\uffe8\056\uffe8\060\uffe8\062\uffe8\112\uffe8\124\uffe8" +
    "\001\002\000\004\035\321\001\002\000\004\047\322\001" +
    "\002\000\034\036\uffec\040\uffec\042\uffec\044\uffec\046\uffec" +
    "\050\uffec\052\uffec\054\uffec\056\uffec\060\uffec\062\uffec\112" +
    "\uffec\124\uffec\001\002\000\004\064\324\001\002\000\004" +
    "\002\ufff4\001\002\000\004\002\ufff3\001\002\000\004\035" +
    "\327\001\002\000\004\053\330\001\002\000\034\036\uffe0" +
    "\040\uffe0\042\uffe0\044\uffe0\046\uffe0\050\uffe0\052\uffe0\054" +
    "\uffe0\056\uffe0\060\uffe0\062\uffe0\112\uffe0\124\uffe0\001\002" +
    "\000\004\035\332\001\002\000\004\043\333\001\002\000" +
    "\034\036\uffe3\040\uffe3\042\uffe3\044\uffe3\046\uffe3\050\uffe3" +
    "\052\uffe3\054\uffe3\056\uffe3\060\uffe3\062\uffe3\112\uffe3\124" +
    "\uffe3\001\002\000\004\035\335\001\002\000\004\061\336" +
    "\001\002\000\034\036\uffdd\040\uffdd\042\uffdd\044\uffdd\046" +
    "\uffdd\050\uffdd\052\uffdd\054\uffdd\056\uffdd\060\uffdd\062\uffdd" +
    "\112\uffdd\124\uffdd\001\002\000\004\035\340\001\002\000" +
    "\004\055\341\001\002\000\034\036\uffdf\040\uffdf\042\uffdf" +
    "\044\uffdf\046\uffdf\050\uffdf\052\uffdf\054\uffdf\056\uffdf\060" +
    "\uffdf\062\uffdf\112\uffdf\124\uffdf\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\055\005\061\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\021\005\105\006\017\007\042\010" +
    "\040\011\030\012\037\013\023\014\020\015\024\016\036" +
    "\053\022\001\001\000\010\056\012\057\013\060\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\101" +
    "\001\001\000\032\004\021\005\076\006\017\007\042\010" +
    "\040\011\030\012\037\013\023\014\020\015\024\016\036" +
    "\053\022\001\001\000\032\004\021\005\073\006\017\007" +
    "\042\010\040\011\030\012\037\013\023\014\020\015\024" +
    "\016\036\053\022\001\001\000\032\004\021\005\043\006" +
    "\017\007\042\010\040\011\030\012\037\013\023\014\020" +
    "\015\024\016\036\053\022\001\001\000\026\004\071\007" +
    "\042\010\040\011\030\012\037\013\023\014\020\015\024" +
    "\016\036\053\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\114\035\116\036\125\001\001" +
    "\000\032\004\021\005\336\006\017\007\042\010\040\011" +
    "\030\012\037\013\023\014\020\015\024\016\036\053\022" +
    "\001\001\000\032\004\021\005\333\006\017\007\042\010" +
    "\040\011\030\012\037\013\023\014\020\015\024\016\036" +
    "\053\022\001\001\000\002\001\001\000\032\004\021\005" +
    "\330\006\017\007\042\010\040\011\030\012\037\013\023" +
    "\014\020\015\024\016\036\053\022\001\001\000\032\004" +
    "\021\005\325\006\017\007\042\010\040\011\030\012\037" +
    "\013\023\014\020\015\024\016\036\053\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\251\001\001" +
    "\000\032\004\021\005\242\006\017\007\042\010\040\011" +
    "\030\012\037\013\023\014\020\015\024\016\036\053\022" +
    "\001\001\000\032\004\021\005\157\006\017\007\042\010" +
    "\040\011\030\012\037\013\023\014\020\015\024\016\036" +
    "\053\022\001\001\000\032\004\021\005\137\006\017\007" +
    "\042\010\040\011\030\012\037\013\023\014\020\015\024" +
    "\016\036\053\022\001\001\000\032\004\021\005\134\006" +
    "\017\007\042\010\040\011\030\012\037\013\023\014\020" +
    "\015\024\016\036\053\022\001\001\000\032\004\021\005" +
    "\131\006\017\007\042\010\040\011\030\012\037\013\023" +
    "\014\020\015\024\016\036\053\022\001\001\000\032\004" +
    "\021\005\126\006\017\007\042\010\040\011\030\012\037" +
    "\013\023\014\020\015\024\016\036\053\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\142\050\145\051\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\021" +
    "\005\154\006\017\007\042\010\040\011\030\012\037\013" +
    "\023\014\020\015\024\016\036\053\022\001\001\000\002" +
    "\001\001\000\004\052\150\001\001\000\032\004\021\005" +
    "\151\006\017\007\042\010\040\011\030\012\037\013\023" +
    "\014\020\015\024\016\036\053\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\161\027\164" +
    "\037\162\001\001\000\004\030\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\021" +
    "\005\166\006\017\007\042\010\040\011\030\012\037\013" +
    "\023\014\020\015\024\016\036\053\022\001\001\000\002" +
    "\001\001\000\010\040\170\041\174\042\172\001\001\000" +
    "\002\001\001\000\032\004\021\005\231\006\017\007\042" +
    "\010\040\011\030\012\037\013\023\014\020\015\024\016" +
    "\036\053\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\216\001\001\000\032\004\021\005\176\006" +
    "\017\007\042\010\040\011\030\012\037\013\023\014\020" +
    "\015\024\016\036\053\022\001\001\000\002\001\001\000" +
    "\006\045\201\046\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\021\005\210\006" +
    "\017\007\042\010\040\011\030\012\037\013\023\014\020" +
    "\015\024\016\036\053\022\001\001\000\032\004\021\005" +
    "\205\006\017\007\042\010\040\011\030\012\037\013\023" +
    "\014\020\015\024\016\036\053\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\021\005\223\006\017\007\042\010\040\011\030" +
    "\012\037\013\023\014\020\015\024\016\036\053\022\001" +
    "\001\000\032\004\021\005\220\006\017\007\042\010\040" +
    "\011\030\012\037\013\023\014\020\015\024\016\036\053" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\222\046\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\227\046\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\233\046\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\021\005\237\006\017\007\042\010\040" +
    "\011\030\012\037\013\023\014\020\015\024\016\036\053" +
    "\022\001\001\000\002\001\001\000\010\040\241\041\174" +
    "\042\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\114\035\246\054\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\251\001\001\000\032\004" +
    "\021\005\317\006\017\007\042\010\040\011\030\012\037" +
    "\013\023\014\020\015\024\016\036\053\022\001\001\000" +
    "\032\004\021\005\314\006\017\007\042\010\040\011\030" +
    "\012\037\013\023\014\020\015\024\016\036\053\022\001" +
    "\001\000\002\001\001\000\032\004\021\005\311\006\017" +
    "\007\042\010\040\011\030\012\037\013\023\014\020\015" +
    "\024\016\036\053\022\001\001\000\032\004\021\005\306" +
    "\006\017\007\042\010\040\011\030\012\037\013\023\014" +
    "\020\015\024\016\036\053\022\001\001\000\032\004\021" +
    "\005\303\006\017\007\042\010\040\011\030\012\037\013" +
    "\023\014\020\015\024\016\036\053\022\001\001\000\002" +
    "\001\001\000\032\004\021\005\300\006\017\007\042\010" +
    "\040\011\030\012\037\013\023\014\020\015\024\016\036" +
    "\053\022\001\001\000\032\004\021\005\275\006\017\007" +
    "\042\010\040\011\030\012\037\013\023\014\020\015\024" +
    "\016\036\053\022\001\001\000\032\004\021\005\272\006" +
    "\017\007\042\010\040\011\030\012\037\013\023\014\020" +
    "\015\024\016\036\053\022\001\001\000\032\004\021\005" +
    "\267\006\017\007\042\010\040\011\030\012\037\013\023" +
    "\014\020\015\024\016\036\053\022\001\001\000\032\004" +
    "\021\005\264\006\017\007\042\010\040\011\030\012\037" +
    "\013\023\014\020\015\024\016\036\053\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\047\271\050\145\051" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\161\027" +
    "\164\037\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\114\035\246\054\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_HTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_HTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_HTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        //Inicio.reporteError.agregar("Sintactico",s.right+1,s.left+1,"Identificador "+s.value+" no reconocido");
    }

    public NodoDOM crearNodo(String nombre,String valor,int linea,int columna,String explicit){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }

    public NodoDOM crearNodo(String nombre,String valor,int linea,int columna,NodoDOM lst_attr,String explicit){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        
        if(explicit.length()>2){
            explicit= explicit.substring(1, explicit.length()-1);
            try {
                nuevo.propiedades.get("$text").valor=explicit;
            } catch (Exception e) {}
        }

        if(lst_attr!=null){agregarPropiedades(lst_attr,nuevo.propiedades);}
        action_obj.Index++;
        return nuevo;
    }


    //este metodo crear un nuevo nodo, lo agrega a la raiz actual y luego cambia la raizactual por el nuevo nodo creado
    public void m1(String nombre,String valor,int linea,int columna){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        action_obj.tmpN.add(nuevo);
        action_obj.tmpN=nuevo;         //despues de crear el nuevo nodo se deja en la variable tmpN
    }


    //este metodo crear un nuevo nodo y simplemente se lo agrega a la raiz actual sin cambiarla
    public void m2(String nombre,String valor,int linea,int columna,NodoDOM lst_attr){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        action_obj.tmpN.add(nuevo);
        action_obj.last=nuevo;

       

        if(lst_attr!=null){agregarPropiedades(lst_attr,nuevo.propiedades);}
 
        if(nombre.equals("panel")){
            if(action_obj.pilaPanel.isEmpty()){
                action_obj.gCuerpo=action_obj.tmpN;
            }
            action_obj.tmpN=nuevo;
            push(nuevo); // se agrega a la pila de paneles
        }
    }

    //este metodo hace tmpN=last
    public void Tadd(NodoDOM nodo){
        action_obj.tmpN.add(nodo);
    }

    //este metodo agrega un panel al la cima de la pila
    public void push(NodoDOM panel){
        action_obj.pilaPanel.push(panel);
    }

    public void pop(){
        action_obj.pilaPanel.pop();
        if(action_obj.pilaPanel.isEmpty()){
            action_obj.tmpN=action_obj.gCuerpo;
        }else{
            action_obj.tmpN=action_obj.pilaPanel.pop();
            action_obj.pilaPanel.push(action_obj.tmpN);
        }
    }

    //Este metodo retorna la RAIZ del arbol  generado 
    public NodoDOM getRoot(){
        return action_obj.root;
    }
    
    public void agregarPropiedades(NodoDOM lista_attr,Hashtable<String,Propiedad> propiedades){        

        for (NodoDOM atributo: lista_attr.hijos) {
            if(propiedades.containsKey(atributo.nombre.toLowerCase())){
                propiedades.get(atributo.nombre.toLowerCase()).valor=atributo.valor;
            }
        }
        
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_HTML$actions {


    //se declaran variables globales etc.
    public int Index=1;
    public NodoDOM root;
    public NodoDOM tmpN ;
    public NodoDOM last ;
    public NodoDOM gCuerpo ;
    public Stack<NodoDOM> pilaPanel = new Stack<>() ; // se guarda el ultimo panel

  private final AS_HTML parser;

  /** Constructor */
  CUP$AS_HTML$actions(AS_HTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_HTML$do_action(
    int                        CUP$AS_HTML$act_num,
    java_cup.runtime.lr_parser CUP$AS_HTML$parser,
    java.util.Stack            CUP$AS_HTML$stack,
    int                        CUP$AS_HTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_HTML$result;

      /* select the action based on the action number */
      switch (CUP$AS_HTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // att_alineado ::= ALINEADO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("alineado",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alineado",12, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // att_ancho ::= ANCHO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ancho",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ancho",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // att_alto ::= ALTO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("alto",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alto",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // att_grupo ::= GRUPO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("grupo",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_grupo",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // att_id ::= ID IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("id",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_id",8, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // att_valor ::= VALOR IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("valor",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_valor",7, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // att_click ::= CLICK IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("click",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_click",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // att_ruta ::= RUTA IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ruta",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ruta",5, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // att_fondo ::= FONDO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("fondo",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_fondo",41, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // atributo ::= att_fondo 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // atributo ::= att_alineado 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // atributo ::= att_ancho 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // atributo ::= att_alto 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // atributo ::= att_grupo 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atributo ::= att_id 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atributo ::= att_valor 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atributo ::= att_click 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // atributo ::= att_ruta 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // list_atts2 ::= atributo PYC 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 
                                RESULT = parser.crearNodo("propiedades","",0,0,""); 
                                RESULT.add(x);
                            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // list_atts2 ::= list_atts2 atributo PYC 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM y = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                                x.add(y);
                                RESULT=x;    
                            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // list_atts ::= list_atts2 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		   RESULT = x;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",3, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // list_atts ::= 
            {
              NodoDOM RESULT =null;
		    RESULT = parser.crearNodo("propiedades","",0,0,"");   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",3, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // btn_img ::= TIMAGEN list_atts EXPLICIT FIMAGEN 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("imagen","",f.getLinea(),f.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("btn_img",36, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // btn_img ::= TBOTON list_atts EXPLICIT FBOTON 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("boton","",f.getLinea(),f.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("btn_img",36, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenido_cb ::= btn_img FCB2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT=r; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_cb",34, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // contenido_cb ::= FCB 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("texto","",0,0,""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_cb",34, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenido_ct ::= btn_img FCT2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT=r; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_ct",35, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenido_ct ::= FCT 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("texto","",0,0,""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_ct",35, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // etcb_ct2 ::= ICT2 list_atts EXPLICIT contenido_ct 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ct","",f.getLinea(),f.getColumna(),LT,P.getCadena());  RESULT.add(h); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etcb_ct2",33, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // etcb_ct2 ::= ICB2 list_atts EXPLICIT contenido_cb 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("cb","",f.getLinea(),f.getColumna(),LT,P.getCadena());  RESULT.add(h); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etcb_ct2",33, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // etcb_ct1 ::= ICT list_atts EXPLICIT contenido_ct 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ct","",f.getLinea(),f.getColumna(),LT,P.getCadena());  RESULT.add(h); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etcb_ct1",32, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // etcb_ct1 ::= ICB list_atts EXPLICIT contenido_cb 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("cb","",f.getLinea(),f.getColumna(),LT,P.getCadena());  RESULT.add(h); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etcb_ct1",32, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista_cb_ct ::= etcb_ct1 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                    RESULT = parser.crearNodo("filaT","",0,0,"");  
                    RESULT.add(x); 
              
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("lista_cb_ct",31, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_cb_ct ::= lista_cb_ct etcb_ct2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                    r.add(x);
                    RESULT = r; 
              
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("lista_cb_ct",31, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenido_fila ::= lista_cb_ct FFIL_T2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                    RESULT=r;
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_fila",30, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenido_fila ::= FFIL_T 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("filaT","",0,0,"");   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_fila",30, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // et_fila1 ::= IFIL_T list_atts EXPLICIT contenido_fila 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 
                    RESULT = parser.crearNodo("fila","",f.getLinea(),f.getColumna(),LT,P.getCadena());  
                    RESULT.hijos=h.hijos;
            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_fila1",21, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // et_fila2 ::= IFIL_T2 list_atts EXPLICIT contenido_fila 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 
                    RESULT = parser.crearNodo("fila","",f.getLinea(),f.getColumna(),LT,P.getCadena());
                    RESULT.hijos=h.hijos;
            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_fila2",22, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // etiquetastabla ::= et_fila1 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		  RESULT = parser.crearNodo("tabla","",0,0,""); RESULT.add(x); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetastabla",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiquetastabla ::= etiquetastabla et_fila2 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM y = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 x.add(y); RESULT = x;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetastabla",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contenido_tabla ::= etiquetastabla FTABLA2 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                        RESULT = x;
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_tabla",29, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contenido_tabla ::= FTABLA 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("tabla","",0,0,""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_tabla",29, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opcion2 ::= IOPCION2 list_atts EXPLICIT FOPCION 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("opcion","",f.getLinea(),f.getColumna(),LT,P.getCadena()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("opcion2",40, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opcion1 ::= IOPCION list_atts EXPLICIT FOPCION 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("opcion","",f.getLinea(),f.getColumna(),LT,P.getCadena()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("opcion1",39, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_opciones ::= opcion1 
            {
              NodoDOM RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                       RESULT = parser.crearNodo("caja","",0,0,"");
                       RESULT.add(h);
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("lista_opciones",38, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_opciones ::= lista_opciones opcion2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                       r.add(h);
                       RESULT=r;
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("lista_opciones",38, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contenido_caja ::= lista_opciones FCAJA2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                        RESULT=r;
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_caja",37, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contenido_caja ::= FCAJA 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("cajaT","",0,0,"");   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_caja",37, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contenido_panel ::= etiquetas_cuerpo FPANEL2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT=r; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_panel",42, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // contenido_panel ::= FPANEL 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("cajaT","",0,0,""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_panel",42, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // et_cuerpo1 ::= TTABLA list_atts EXPLICIT contenido_tabla 
            {
              NodoDOM RESULT =null;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rzleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rzright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM rz = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                  RESULT = rz;
            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // et_cuerpo1 ::= TSALTOF 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("salto","",x.getLinea(),x.getColumna(),"");  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // et_cuerpo1 ::= TSPINNER list_atts EXPLICIT FSPINNER 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("spinner","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // et_cuerpo1 ::= TCAJA list_atts EXPLICIT contenido_caja 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("caja","",x.getLinea(),x.getColumna(),LT,P.getCadena());  RESULT.hijos=r.hijos;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // et_cuerpo1 ::= TCAJA_TEXTO list_atts EXPLICIT FCAJA_TEXTO 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("caja_texto","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // et_cuerpo1 ::= TTEXTO_A list_atts EXPLICIT FTEXTO_A 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("texto_a","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // et_cuerpo1 ::= TENLACE list_atts EXPLICIT FENLACE 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("enlace","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // et_cuerpo1 ::= TBOTON list_atts EXPLICIT FBOTON 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("boton","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // et_cuerpo1 ::= TIMAGEN list_atts EXPLICIT FIMAGEN 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("imagen","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // et_cuerpo1 ::= TTEXTO list_atts EXPLICIT FTEXTO 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("texto","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // et_cuerpo1 ::= TPANEL list_atts EXPLICIT contenido_panel 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("panel","",x.getLinea(),x.getColumna(),LT,P.getCadena());  RESULT.hijos=r.hijos; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo1",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // et_cuerpo2 ::= ITABLA list_atts EXPLICIT contenido_tabla 
            {
              NodoDOM RESULT =null;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rzleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rzright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM rz = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                  RESULT = rz;
            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // et_cuerpo2 ::= ISALTOF 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("salto","",x.getLinea(),x.getColumna(),"");  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // et_cuerpo2 ::= ISPINNER list_atts EXPLICIT FSPINNER 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("spinner","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // et_cuerpo2 ::= ICAJA list_atts EXPLICIT contenido_caja 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("caja","",x.getLinea(),x.getColumna(),LT,P.getCadena());  RESULT.hijos=r.hijos;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // et_cuerpo2 ::= ICAJA_TEXTO list_atts EXPLICIT FCAJA_TEXTO 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("caja_texto","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // et_cuerpo2 ::= ITEXTO_A list_atts EXPLICIT FTEXTO_A 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("texto_a","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // et_cuerpo2 ::= IENLACE list_atts EXPLICIT FENLACE 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("enlace","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // et_cuerpo2 ::= IBOTON list_atts EXPLICIT FBOTON 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("boton","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // et_cuerpo2 ::= IIMAGEN list_atts EXPLICIT FIMAGEN 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("imagen","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // et_cuerpo2 ::= ITEXTO list_atts EXPLICIT FTEXTO 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("texto","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // et_cuerpo2 ::= IPANEL list_atts EXPLICIT contenido_panel 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("panel","",x.getLinea(),x.getColumna(),LT,P.getCadena());  RESULT.hijos=r.hijos;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo2",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiquetas_cuerpo ::= et_cuerpo1 
            {
              NodoDOM RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                        RESULT =  parser.crearNodo("","",0,0,"");
                        RESULT.add(h);    
                     
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",27, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiquetas_cuerpo ::= etiquetas_cuerpo et_cuerpo2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                        r.add(h);
                        RESULT = r;
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",27, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenidocuerpo ::= FCUERPO FCHTML 
            {
              NodoDOM RESULT =null;
		
                        RESULT = parser.crearNodo("cuerpo","",0,0,"");
                        
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",28, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenidocuerpo ::= etiquetas_cuerpo FCUERPO2 FCHTML 
            {
              NodoDOM RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		
                        RESULT = parser.crearNodo("cuerpo","",0,0,"");
                        RESULT.hijos=h.hijos;    
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",28, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiqueta_cuerpo ::= ICUERPO list_atts EXPLICIT contenidocuerpo 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 
                                                RESULT = parser.crearNodo("cuerpo","",f.getLinea(),f.getColumna(),LT,P.getCadena()); 
                                                RESULT.hijos=r.hijos;
                                              
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiqueta_cuerpo",47, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // et_cjs_ccss ::= ITITULO list_atts EXPLICIT FTITULO 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                    RESULT = parser.crearNodo("titulo","",f.getLinea(),f.getColumna(),LT,P.getCadena());
                
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cjs_ccss",46, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // et_cjs_ccss ::= ICCSS list_atts EXPLICIT FCCSS 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                    RESULT = parser.crearNodo("ccss","",f.getLinea(),f.getColumna(),LT,P.getCadena());
                
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cjs_ccss",46, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // et_cjs_ccss ::= ICJS list_atts EXPLICIT FCJS 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                    RESULT = parser.crearNodo("cjs","",f.getLinea(),f.getColumna(),LT,P.getCadena());
                
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cjs_ccss",46, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiquetas_cjs_ccss ::= et_cjs_ccss 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                        RESULT = parser.crearNodo("encabezado","",0,0,""); 
                        RESULT.add(r);
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cjs_ccss",45, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiquetas_cjs_ccss ::= etiquetas_cjs_ccss et_cjs_ccss 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                        r.add(h);
                        RESULT=r;
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cjs_ccss",45, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenido_enca ::= etiquetas_cjs_ccss 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                        RESULT=r;
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_enca",44, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenido_enca ::= 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("encabezado","",0,0,"");  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_enca",44, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contenido_html ::= etiqueta_cuerpo 
            {
              NodoDOM RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM c = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                        RESULT = parser.crearNodo("chtml","",0,0,"");
                        RESULT.add(c);
                   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_html",43, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // contenido_html ::= IENCA contenido_enca FENCA FCHTML 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		
                        RESULT = parser.crearNodo("chtml","",0,0,"");
                        NodoDOM encab=parser.crearNodo("encabezado","",f.getLinea(),f.getColumna(),"");
                        encab.hijos=h.hijos;
                        RESULT.add(encab);
                   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_html",43, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // contenido_html ::= IENCA contenido_enca FENCA etiqueta_cuerpo 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM c = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                        RESULT = parser.crearNodo("chtml","",0,0,"");
                        NodoDOM encab=parser.crearNodo("encabezado","",f.getLinea(),f.getColumna(),"");
                        encab.hijos=h.hijos;
                        RESULT.add(encab);
                        RESULT.add(c);
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_html",43, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= ICHTML contenido_html 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 root = parser.crearNodo("chtml","",f.getLinea(),f.getColumna(),"");  root.hijos=r.hijos; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM start_val = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		RESULT = start_val;
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_HTML$parser.done_parsing();
          return CUP$AS_HTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

