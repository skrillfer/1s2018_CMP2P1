
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 27 03:16:56 CST 2018
//----------------------------------------------------

package Analizadores.LenguajeCHTML;

import Estructuras.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 27 03:16:56 CST 2018
  */
public class AS_HTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AS_HTML() {super();}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AS_HTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\005\000\002\035" +
    "\005\000\002\035\004\000\002\034\004\000\002\034\003" +
    "\000\002\033\006\000\002\033\006\000\002\033\006\000" +
    "\002\033\006\000\002\033\006\000\002\033\006\000\002" +
    "\033\006\000\002\033\006\000\002\033\003\000\002\033" +
    "\006\000\002\046\003\000\002\046\004\000\002\047\004" +
    "\000\002\047\003\000\002\050\006\000\002\051\006\000" +
    "\002\036\003\000\002\036\004\000\002\021\004\000\002" +
    "\021\003\000\002\030\006\000\002\027\006\000\002\037" +
    "\003\000\002\037\004\000\002\040\004\000\002\040\003" +
    "\000\002\041\006\000\002\041\006\000\002\042\006\000" +
    "\002\042\006\000\002\044\003\000\002\044\004\000\002" +
    "\043\003\000\002\043\004\000\002\045\006\000\002\045" +
    "\006\000\002\005\002\000\002\005\003\000\002\006\005" +
    "\000\002\006\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\052\005\000\002\007\005\000\002\010\005" +
    "\000\002\011\005\000\002\012\005\000\002\013\005\000" +
    "\002\014\005\000\002\015\005\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\063\005\001\002\000\004\002\232\001" +
    "\002\000\004\065\006\001\002\000\030\040\021\042\015" +
    "\044\016\046\007\050\013\052\012\054\023\056\022\060" +
    "\010\062\014\066\017\001\002\000\026\017\037\020\035" +
    "\021\033\022\047\023\034\024\040\025\042\026\041\027" +
    "\043\035\uffd7\001\002\000\026\017\037\020\035\021\033" +
    "\022\047\023\034\024\040\025\042\026\041\027\043\035" +
    "\uffd7\001\002\000\030\040\ufffc\042\ufffc\044\ufffc\046\ufffc" +
    "\050\ufffc\052\ufffc\054\ufffc\056\ufffc\060\ufffc\062\ufffc\066" +
    "\ufffc\001\002\000\026\017\037\020\035\021\033\022\047" +
    "\023\034\024\040\025\042\026\041\027\043\035\uffd7\001" +
    "\002\000\026\017\037\020\035\021\033\022\047\023\034" +
    "\024\040\025\042\026\041\027\043\035\uffd7\001\002\000" +
    "\030\040\ufff3\042\ufff3\044\ufff3\046\ufff3\050\ufff3\052\ufff3" +
    "\054\ufff3\056\ufff3\060\ufff3\062\ufff3\066\ufff3\001\002\000" +
    "\026\017\037\020\035\021\033\022\047\023\034\024\040" +
    "\025\042\026\041\027\043\035\uffd7\001\002\000\026\017" +
    "\037\020\035\021\033\022\047\023\034\024\040\025\042" +
    "\026\041\027\043\035\uffd7\001\002\000\004\064\127\001" +
    "\002\000\030\040\021\042\015\044\016\046\007\050\013" +
    "\052\012\054\023\056\022\060\010\062\014\066\125\001" +
    "\002\000\026\017\037\020\035\021\033\022\047\023\034" +
    "\024\040\025\042\026\041\027\043\035\uffd7\001\002\000" +
    "\026\017\037\020\035\021\033\022\047\023\034\024\040" +
    "\025\042\026\041\027\043\035\uffd7\001\002\000\026\017" +
    "\037\020\035\021\033\022\047\023\034\024\040\025\042" +
    "\026\041\027\043\035\uffd7\001\002\000\004\002\000\001" +
    "\002\000\026\017\037\020\035\021\033\022\047\023\034" +
    "\024\040\025\042\026\041\027\043\035\uffd6\001\002\000" +
    "\004\013\uffce\001\002\000\004\013\076\001\002\000\004" +
    "\013\uffcb\001\002\000\004\013\uffcf\001\002\000\004\013" +
    "\uffcd\001\002\000\004\014\074\001\002\000\004\014\072" +
    "\001\002\000\004\014\070\001\002\000\004\013\uffd1\001" +
    "\002\000\004\014\066\001\002\000\004\014\064\001\002" +
    "\000\004\014\062\001\002\000\004\014\060\001\002\000" +
    "\004\014\056\001\002\000\004\013\uffcc\001\002\000\004" +
    "\013\uffd0\001\002\000\004\013\uffd2\001\002\000\004\014" +
    "\054\001\002\000\004\013\uffd3\001\002\000\004\035\052" +
    "\001\002\000\004\055\053\001\002\000\030\040\ufff6\042" +
    "\ufff6\044\ufff6\046\ufff6\050\ufff6\052\ufff6\054\ufff6\056\ufff6" +
    "\060\ufff6\062\ufff6\066\ufff6\001\002\000\004\031\055\001" +
    "\002\000\004\013\uffc7\001\002\000\004\031\057\001\002" +
    "\000\004\013\uffc2\001\002\000\004\031\061\001\002\000" +
    "\004\013\uffc4\001\002\000\004\031\063\001\002\000\004" +
    "\013\uffc3\001\002\000\004\031\065\001\002\000\004\013" +
    "\uffc5\001\002\000\004\031\067\001\002\000\004\013\uffca" +
    "\001\002\000\004\031\071\001\002\000\004\013\uffc9\001" +
    "\002\000\004\031\073\001\002\000\004\013\uffc6\001\002" +
    "\000\004\031\075\001\002\000\004\013\uffc8\001\002\000" +
    "\026\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\035\uffd4\001\002\000\004\013" +
    "\100\001\002\000\026\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\035\uffd5\001" +
    "\002\000\004\035\102\001\002\000\006\057\106\106\104" +
    "\001\002\000\006\107\uffee\111\uffee\001\002\000\026\017" +
    "\037\020\035\021\033\022\047\023\034\024\040\025\042" +
    "\026\041\027\043\035\uffd7\001\002\000\030\040\ufff5\042" +
    "\ufff5\044\ufff5\046\ufff5\050\ufff5\052\ufff5\054\ufff5\056\ufff5" +
    "\060\ufff5\062\ufff5\066\ufff5\001\002\000\030\040\ufff1\042" +
    "\ufff1\044\ufff1\046\ufff1\050\ufff1\052\ufff1\054\ufff1\056\ufff1" +
    "\060\ufff1\062\ufff1\066\ufff1\001\002\000\006\107\110\111" +
    "\111\001\002\000\026\017\037\020\035\021\033\022\047" +
    "\023\034\024\040\025\042\026\041\027\043\035\uffd7\001" +
    "\002\000\030\040\ufff0\042\ufff0\044\ufff0\046\ufff0\050\ufff0" +
    "\052\ufff0\054\ufff0\056\ufff0\060\ufff0\062\ufff0\066\ufff0\001" +
    "\002\000\006\107\uffef\111\uffef\001\002\000\004\035\114" +
    "\001\002\000\004\110\115\001\002\000\006\107\uffec\111" +
    "\uffec\001\002\000\004\035\117\001\002\000\004\110\120" +
    "\001\002\000\006\107\uffed\111\uffed\001\002\000\004\035" +
    "\122\001\002\000\004\041\123\001\002\000\030\040\ufffb" +
    "\042\ufffb\044\ufffb\046\ufffb\050\ufffb\052\ufffb\054\ufffb\056" +
    "\ufffb\060\ufffb\062\ufffb\066\ufffb\001\002\000\030\040\ufffd" +
    "\042\ufffd\044\ufffd\046\ufffd\050\ufffd\052\ufffd\054\ufffd\056" +
    "\ufffd\060\ufffd\062\ufffd\066\ufffd\001\002\000\004\064\126" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffe\001" +
    "\002\000\004\035\131\001\002\000\004\045\132\001\002" +
    "\000\030\040\ufff9\042\ufff9\044\ufff9\046\ufff9\050\ufff9\052" +
    "\ufff9\054\ufff9\056\ufff9\060\ufff9\062\ufff9\066\ufff9\001\002" +
    "\000\004\035\134\001\002\000\004\043\135\001\002\000" +
    "\030\040\ufffa\042\ufffa\044\ufffa\046\ufffa\050\ufffa\052\ufffa" +
    "\054\ufffa\056\ufffa\060\ufffa\062\ufffa\066\ufffa\001\002\000" +
    "\004\035\137\001\002\000\006\051\142\067\144\001\002" +
    "\000\006\070\215\077\213\001\002\000\030\040\ufff2\042" +
    "\ufff2\044\ufff2\046\ufff2\050\ufff2\052\ufff2\054\ufff2\056\ufff2" +
    "\060\ufff2\062\ufff2\066\ufff2\001\002\000\030\040\uffeb\042" +
    "\uffeb\044\uffeb\046\uffeb\050\uffeb\052\uffeb\054\uffeb\056\uffeb" +
    "\060\uffeb\062\uffeb\066\uffeb\001\002\000\006\070\uffe8\077" +
    "\uffe8\001\002\000\026\017\037\020\035\021\033\022\047" +
    "\023\034\024\040\025\042\026\041\027\043\035\uffd7\001" +
    "\002\000\004\035\146\001\002\000\010\071\152\073\150" +
    "\100\154\001\002\000\006\070\uffe6\077\uffe6\001\002\000" +
    "\026\017\037\020\035\021\033\022\047\023\034\024\040" +
    "\025\042\026\041\027\043\035\uffd7\001\002\000\010\072" +
    "\uffe2\074\uffe2\075\uffe2\001\002\000\006\070\uffe5\077\uffe5" +
    "\001\002\000\010\072\176\074\173\075\174\001\002\000" +
    "\026\017\037\020\035\021\033\022\047\023\034\024\040" +
    "\025\042\026\041\027\043\035\uffd7\001\002\000\004\035" +
    "\156\001\002\000\010\101\157\102\162\103\163\001\002" +
    "\000\010\072\uffdd\074\uffdd\075\uffdd\001\002\000\010\072" +
    "\uffe0\074\uffe0\075\uffe0\001\002\000\004\105\172\001\002" +
    "\000\026\017\037\020\035\021\033\022\047\023\034\024" +
    "\040\025\042\026\041\027\043\035\uffd7\001\002\000\026" +
    "\017\037\020\035\021\033\022\047\023\034\024\040\025" +
    "\042\026\041\027\043\035\uffd7\001\002\000\004\035\165" +
    "\001\002\000\004\043\166\001\002\000\006\104\uffd8\105" +
    "\uffd8\001\002\000\004\035\170\001\002\000\004\045\171" +
    "\001\002\000\006\104\uffd9\105\uffd9\001\002\000\010\072" +
    "\uffdc\074\uffdc\075\uffdc\001\002\000\026\017\037\020\035" +
    "\021\033\022\047\023\034\024\040\025\042\026\041\027" +
    "\043\035\uffd7\001\002\000\026\017\037\020\035\021\033" +
    "\022\047\023\034\024\040\025\042\026\041\027\043\035" +
    "\uffd7\001\002\000\010\072\uffe3\074\uffe3\075\uffe3\001\002" +
    "\000\006\070\uffe4\077\uffe4\001\002\000\004\035\200\001" +
    "\002\000\010\101\157\102\162\103\163\001\002\000\010" +
    "\072\uffde\074\uffde\075\uffde\001\002\000\004\035\203\001" +
    "\002\000\010\076\205\102\162\103\163\001\002\000\004" +
    "\104\207\001\002\000\010\072\uffdb\074\uffdb\075\uffdb\001" +
    "\002\000\010\072\uffdf\074\uffdf\075\uffdf\001\002\000\010" +
    "\072\uffda\074\uffda\075\uffda\001\002\000\004\035\211\001" +
    "\002\000\010\076\205\102\162\103\163\001\002\000\010" +
    "\072\uffe1\074\uffe1\075\uffe1\001\002\000\030\040\uffea\042" +
    "\uffea\044\uffea\046\uffea\050\uffea\052\uffea\054\uffea\056\uffea" +
    "\060\uffea\062\uffea\066\uffea\001\002\000\006\070\uffe9\077" +
    "\uffe9\001\002\000\026\017\037\020\035\021\033\022\047" +
    "\023\034\024\040\025\042\026\041\027\043\035\uffd7\001" +
    "\002\000\004\035\217\001\002\000\010\071\152\073\150" +
    "\100\154\001\002\000\006\070\uffe7\077\uffe7\001\002\000" +
    "\004\035\222\001\002\000\004\053\223\001\002\000\030" +
    "\040\ufff7\042\ufff7\044\ufff7\046\ufff7\050\ufff7\052\ufff7\054" +
    "\ufff7\056\ufff7\060\ufff7\062\ufff7\066\ufff7\001\002\000\004" +
    "\035\225\001\002\000\004\061\226\001\002\000\030\040" +
    "\ufff4\042\ufff4\044\ufff4\046\ufff4\050\ufff4\052\ufff4\054\ufff4" +
    "\056\ufff4\060\ufff4\062\ufff4\066\ufff4\001\002\000\004\035" +
    "\230\001\002\000\004\047\231\001\002\000\030\040\ufff8" +
    "\042\ufff8\044\ufff8\046\ufff8\050\ufff8\052\ufff8\054\ufff8\056" +
    "\ufff8\060\ufff8\062\ufff8\066\ufff8\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\010\034\017\035\023\001\001" +
    "\000\032\004\026\005\226\006\024\007\047\010\045\011" +
    "\035\012\044\013\030\014\025\015\031\016\043\052\027" +
    "\001\001\000\032\004\026\005\223\006\024\007\047\010" +
    "\045\011\035\012\044\013\030\014\025\015\031\016\043" +
    "\052\027\001\001\000\002\001\001\000\032\004\026\005" +
    "\220\006\024\007\047\010\045\011\035\012\044\013\030" +
    "\014\025\015\031\016\043\052\027\001\001\000\032\004" +
    "\026\005\135\006\024\007\047\010\045\011\035\012\044" +
    "\013\030\014\025\015\031\016\043\052\027\001\001\000" +
    "\002\001\001\000\032\004\026\005\132\006\024\007\047" +
    "\010\045\011\035\012\044\013\030\014\025\015\031\016" +
    "\043\052\027\001\001\000\032\004\026\005\127\006\024" +
    "\007\047\010\045\011\035\012\044\013\030\014\025\015" +
    "\031\016\043\052\027\001\001\000\002\001\001\000\004" +
    "\033\123\001\001\000\032\004\026\005\120\006\024\007" +
    "\047\010\045\011\035\012\044\013\030\014\025\015\031" +
    "\016\043\052\027\001\001\000\032\004\026\005\100\006" +
    "\024\007\047\010\045\011\035\012\044\013\030\014\025" +
    "\015\031\016\043\052\027\001\001\000\032\004\026\005" +
    "\050\006\024\007\047\010\045\011\035\012\044\013\030" +
    "\014\025\015\031\016\043\052\027\001\001\000\002\001" +
    "\001\000\026\004\076\007\047\010\045\011\035\012\044" +
    "\013\030\014\025\015\031\016\043\052\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\046\104\047\106\050" +
    "\102\001\001\000\002\001\001\000\032\004\026\005\115" +
    "\006\024\007\047\010\045\011\035\012\044\013\030\014" +
    "\025\015\031\016\043\052\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\111\001\001\000\032\004" +
    "\026\005\112\006\024\007\047\010\045\011\035\012\044" +
    "\013\030\014\025\015\031\016\043\052\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\137" +
    "\027\142\036\140\001\001\000\004\030\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\026\005\144\006\024\007\047\010\045\011\035\012" +
    "\044\013\030\014\025\015\031\016\043\052\027\001\001" +
    "\000\002\001\001\000\010\037\146\040\152\041\150\001" +
    "\001\000\002\001\001\000\032\004\026\005\207\006\024" +
    "\007\047\010\045\011\035\012\044\013\030\014\025\015" +
    "\031\016\043\052\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\174\001\001\000\032\004\026\005" +
    "\154\006\024\007\047\010\045\011\035\012\044\013\030" +
    "\014\025\015\031\016\043\052\027\001\001\000\002\001" +
    "\001\000\006\044\157\045\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\026\005" +
    "\166\006\024\007\047\010\045\011\035\012\044\013\030" +
    "\014\025\015\031\016\043\052\027\001\001\000\032\004" +
    "\026\005\163\006\024\007\047\010\045\011\035\012\044" +
    "\013\030\014\025\015\031\016\043\052\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\026\005\201\006\024\007\047\010\045" +
    "\011\035\012\044\013\030\014\025\015\031\016\043\052" +
    "\027\001\001\000\032\004\026\005\176\006\024\007\047" +
    "\010\045\011\035\012\044\013\030\014\025\015\031\016" +
    "\043\052\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\200\045\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\205\045\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\211" +
    "\045\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\026\005\215\006\024\007\047" +
    "\010\045\011\035\012\044\013\030\014\025\015\031\016" +
    "\043\052\027\001\001\000\002\001\001\000\010\037\217" +
    "\040\152\041\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AS_HTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AS_HTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AS_HTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        //Inicio.reporteError.agregar("Sintactico",s.right+1,s.left+1,"Identificador "+s.value+" no reconocido");
    }

    public NodoDOM crearNodo(String nombre,String valor,int linea,int columna,String explicit){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        return nuevo;
    }

    public NodoDOM crearNodo(String nombre,String valor,int linea,int columna,NodoDOM lst_attr,String explicit){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        
        if(explicit.length()>2){
            explicit= explicit.substring(1, explicit.length()-1);
            try {
                nuevo.propiedades.get("$text").valor=explicit;
            } catch (Exception e) {}
        }

        if(lst_attr!=null){agregarPropiedades(lst_attr,nuevo.propiedades);}
        action_obj.Index++;
        return nuevo;
    }


    //este metodo crear un nuevo nodo, lo agrega a la raiz actual y luego cambia la raizactual por el nuevo nodo creado
    public void m1(String nombre,String valor,int linea,int columna){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        action_obj.tmpN.add(nuevo);
        action_obj.tmpN=nuevo;         //despues de crear el nuevo nodo se deja en la variable tmpN
    }


    //este metodo crear un nuevo nodo y simplemente se lo agrega a la raiz actual sin cambiarla
    public void m2(String nombre,String valor,int linea,int columna,NodoDOM lst_attr){
        NodoDOM nuevo = new NodoDOM(nombre,valor,linea,columna,action_obj.Index);
        action_obj.Index++;
        action_obj.tmpN.add(nuevo);
        action_obj.last=nuevo;

       

        if(lst_attr!=null){agregarPropiedades(lst_attr,nuevo.propiedades);}
 
        if(nombre.equals("panel")){
            if(action_obj.pilaPanel.isEmpty()){
                action_obj.gCuerpo=action_obj.tmpN;
            }
            action_obj.tmpN=nuevo;
            push(nuevo); // se agrega a la pila de paneles
        }
    }

    //este metodo hace tmpN=last
    public void Tadd(NodoDOM nodo){
        action_obj.tmpN.add(nodo);
    }

    //este metodo agrega un panel al la cima de la pila
    public void push(NodoDOM panel){
        action_obj.pilaPanel.push(panel);
    }

    public void pop(){
        action_obj.pilaPanel.pop();
        if(action_obj.pilaPanel.isEmpty()){
            action_obj.tmpN=action_obj.gCuerpo;
        }else{
            action_obj.tmpN=action_obj.pilaPanel.pop();
            action_obj.pilaPanel.push(action_obj.tmpN);
        }
    }

    //Este metodo retorna la RAIZ del arbol  generado 
    public NodoDOM getRoot(){
        return action_obj.root;
    }
    
    public void agregarPropiedades(NodoDOM lista_attr,Hashtable<String,Propiedad> propiedades){        

        for (NodoDOM atributo: lista_attr.hijos) {
            if(propiedades.containsKey(atributo.nombre.toLowerCase())){
                propiedades.get(atributo.nombre.toLowerCase()).valor=atributo.valor;
            }
        }
        
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AS_HTML$actions {


    //se declaran variables globales etc.
    public int Index=1;
    public NodoDOM root;
    public NodoDOM tmpN ;
    public NodoDOM last ;
    public NodoDOM gCuerpo ;
    public Stack<NodoDOM> pilaPanel = new Stack<>() ; // se guarda el ultimo panel

  private final AS_HTML parser;

  /** Constructor */
  CUP$AS_HTML$actions(AS_HTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AS_HTML$do_action(
    int                        CUP$AS_HTML$act_num,
    java_cup.runtime.lr_parser CUP$AS_HTML$parser,
    java.util.Stack            CUP$AS_HTML$stack,
    int                        CUP$AS_HTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AS_HTML$result;

      /* select the action based on the action number */
      switch (CUP$AS_HTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // att_alineado ::= ALINEADO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("alineado",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alineado",12, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // att_ancho ::= ANCHO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ancho",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ancho",11, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // att_alto ::= ALTO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("alto",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_alto",10, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // att_grupo ::= GRUPO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("grupo",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_grupo",9, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // att_id ::= ID IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("id",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_id",8, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // att_valor ::= VALOR IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("valor",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_valor",7, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // att_click ::= CLICK IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("click",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_click",6, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // att_ruta ::= RUTA IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ruta",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_ruta",5, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // att_fondo ::= FONDO IGUAL STRING_LITERAL 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token y = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("fondo",y.getCadena().substring(1, y.getCadena().length()-1),x.getLinea(),x.getColumna(),""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("att_fondo",40, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // atributo ::= att_fondo 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atributo ::= att_alineado 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atributo ::= att_ancho 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atributo ::= att_alto 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atributo ::= att_grupo 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atributo ::= att_id 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atributo ::= att_valor 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atributo ::= att_click 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atributo ::= att_ruta 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = r;   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("atributo",2, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // list_atts2 ::= atributo PYC 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 
                                RESULT = parser.crearNodo("propiedades","",0,0,""); 
                                RESULT.add(x);
                            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list_atts2 ::= list_atts2 atributo PYC 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM y = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                                x.add(y);
                                RESULT=x;    
                            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts2",4, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list_atts ::= list_atts2 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		   RESULT = x;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",3, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_atts ::= 
            {
              NodoDOM RESULT =null;
		    RESULT = parser.crearNodo("propiedades","",0,0,"");   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("list_atts",3, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // btn_img ::= TIMAGEN list_atts EXPLICIT FIMAGEN 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("imagen","",f.getLinea(),f.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("btn_img",35, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // btn_img ::= TBOTON list_atts EXPLICIT FBOTON 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("boton","",f.getLinea(),f.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("btn_img",35, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // contenido_cb ::= btn_img FCB2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT=r; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_cb",33, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contenido_cb ::= FCB 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("texto","",0,0,""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_cb",33, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // contenido_ct ::= btn_img FCT2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT=r; 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_ct",34, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contenido_ct ::= FCT 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("texto","",0,0,""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_ct",34, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // etcb_ct2 ::= ICT2 list_atts EXPLICIT contenido_ct 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ct","",f.getLinea(),f.getColumna(),LT,P.getCadena());  RESULT.add(h); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etcb_ct2",32, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // etcb_ct2 ::= ICB2 list_atts EXPLICIT contenido_cb 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("cb","",f.getLinea(),f.getColumna(),LT,P.getCadena());  RESULT.add(h); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etcb_ct2",32, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // etcb_ct1 ::= ICT list_atts EXPLICIT contenido_ct 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("ct","",f.getLinea(),f.getColumna(),LT,P.getCadena());  RESULT.add(h); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etcb_ct1",31, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // etcb_ct1 ::= ICB list_atts EXPLICIT contenido_cb 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("cb","",f.getLinea(),f.getColumna(),LT,P.getCadena());  RESULT.add(h); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etcb_ct1",31, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_cb_ct ::= etcb_ct1 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                    RESULT = parser.crearNodo("filaT","",0,0,"");  
                    RESULT.add(x); 
              
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("lista_cb_ct",30, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_cb_ct ::= lista_cb_ct etcb_ct2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                    r.add(x);
                    RESULT = r; 
              
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("lista_cb_ct",30, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contenido_fila ::= lista_cb_ct FFIL_T2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                    RESULT=r;
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_fila",29, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contenido_fila ::= FFIL_T 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("filaT","",0,0,"");   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_fila",29, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // et_fila1 ::= IFIL_T list_atts EXPLICIT contenido_fila 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 
                    RESULT = parser.crearNodo("fila","",f.getLinea(),f.getColumna(),LT,P.getCadena());  
                    RESULT.hijos=h.hijos;
            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_fila1",21, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // et_fila2 ::= IFIL_T2 list_atts EXPLICIT contenido_fila 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 
                    RESULT = parser.crearNodo("fila","",f.getLinea(),f.getColumna(),LT,P.getCadena());
                    RESULT.hijos=h.hijos;
            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_fila2",22, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiquetastabla ::= et_fila1 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		  RESULT = parser.crearNodo("tabla","",0,0,""); RESULT.add(x); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetastabla",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiquetastabla ::= etiquetastabla et_fila2 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM y = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 x.add(y); RESULT = x;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetastabla",15, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contenido_tabla ::= etiquetastabla FTABLA2 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM x = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                        RESULT = x;
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_tabla",28, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // contenido_tabla ::= FTABLA 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("tabla","",0,0,""); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_tabla",28, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opcion2 ::= IOPCION2 list_atts EXPLICIT FOPCION 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("opcion","",f.getLinea(),f.getColumna(),LT,P.getCadena()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("opcion2",39, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opcion1 ::= IOPCION list_atts EXPLICIT FOPCION 
            {
              NodoDOM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token f = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("opcion","",f.getLinea(),f.getColumna(),LT,P.getCadena()); 
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("opcion1",38, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_opciones ::= opcion1 
            {
              NodoDOM RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                       RESULT = parser.crearNodo("caja","",0,0,"");
                       RESULT.add(h);
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("lista_opciones",37, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_opciones ::= lista_opciones opcion2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                       r.add(h);
                       RESULT=r;
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("lista_opciones",37, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contenido_caja ::= lista_opciones FCAJA2 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		
                        RESULT=r;
                  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_caja",36, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // contenido_caja ::= FCAJA 
            {
              NodoDOM RESULT =null;
		 RESULT = parser.crearNodo("cajaT","",0,0,"");   
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenido_caja",36, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // et_cuerpo ::= ITABLA list_atts EXPLICIT contenido_tabla 
            {
              NodoDOM RESULT =null;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rzleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rzright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM rz = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                  RESULT = rz;
            
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // et_cuerpo ::= ISALTOF 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("salto","",x.getLinea(),x.getColumna(),"");  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // et_cuerpo ::= ISPINNER list_atts EXPLICIT FSPINNER 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("spinner","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // et_cuerpo ::= ICAJA list_atts EXPLICIT contenido_caja 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 RESULT = parser.crearNodo("caja","",x.getLinea(),x.getColumna(),LT,P.getCadena());  RESULT.hijos=r.hijos;  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // et_cuerpo ::= ICAJA_TEXTO list_atts EXPLICIT FCAJA_TEXTO 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("caja_texto","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // et_cuerpo ::= ITEXTO_A list_atts EXPLICIT FTEXTO_A 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("texto_a","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // et_cuerpo ::= IENLACE list_atts EXPLICIT FENLACE 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("enlace","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // et_cuerpo ::= IBOTON list_atts EXPLICIT FBOTON 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("boton","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // et_cuerpo ::= IIMAGEN list_atts EXPLICIT FIMAGEN 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("imagen","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // et_cuerpo ::= ITEXTO list_atts EXPLICIT FTEXTO 
            {
              NodoDOM RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).right;
		token x = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)).value;
		int LTleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int LTright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM LT = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		token P = (token)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		 RESULT = parser.crearNodo("texto","",x.getLinea(),x.getColumna(),LT,P.getCadena());  
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("et_cuerpo",25, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-3)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // etiquetas_cuerpo ::= et_cuerpo 
            {
              NodoDOM RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                        RESULT =  parser.crearNodo("","",0,0,"");
                        RESULT.add(h);    
                     
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // etiquetas_cuerpo ::= etiquetas_cuerpo et_cuerpo 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		
                        r.add(h);
                        RESULT = r;
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",26, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // contenidocuerpo ::= FCUERPO FCHTML 
            {
              NodoDOM RESULT =null;
		
                        RESULT = parser.crearNodo("cuerpo","",0,0,"");
                        
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",27, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // contenidocuerpo ::= etiquetas_cuerpo FCUERPO FCHTML 
            {
              NodoDOM RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).right;
		NodoDOM h = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)).value;
		
                        RESULT = parser.crearNodo("cuerpo","",0,0,"");
                        RESULT.hijos=h.hijos;    
                    
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("contenidocuerpo",27, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= ICHTML ICUERPO contenidocuerpo 
            {
              NodoDOM RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()).right;
		NodoDOM r = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.peek()).value;
		 
                                                RESULT = parser.crearNodo("chtml","",0,0,""); 
                                                RESULT.add(r);
                                                root=RESULT; 
                                              
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-2)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          return CUP$AS_HTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).right;
		NodoDOM start_val = (NodoDOM)((java_cup.runtime.Symbol) CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)).value;
		RESULT = start_val;
              CUP$AS_HTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.elementAt(CUP$AS_HTML$top-1)), ((java_cup.runtime.Symbol)CUP$AS_HTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AS_HTML$parser.done_parsing();
          return CUP$AS_HTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

